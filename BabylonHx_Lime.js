(function (console, $hx_exports, $global) { "use strict";
$hx_exports.lime = $hx_exports.lime || {};
$hx_exports.BABYLON = $hx_exports.BABYLON || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = true;
ApplicationMain.create = function() {
	ApplicationMain.preloader = new lime_app_Preloader();
	ApplicationMain.app = new MainLime();
	ApplicationMain.app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.app.create(ApplicationMain.config);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.start);
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("assets/fondo.jpg");
	types.push("IMAGE");
	urls.push("assets/fondo.png");
	types.push("IMAGE");
	urls.push("assets/wood.jpg");
	types.push("IMAGE");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
};
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "28", company : "Mingga Labs", file : "BabylonHx_Lime", fps : 60, name : "BabylonHx Example", orientation : "", packageName : "com.minggalabs.babylonhx.example", version : "1.0.0", windows : [{ antialiasing : 0, background : 16777215, borderless : false, depthBuffer : true, display : 0, fullscreen : false, hardware : true, height : 0, parameters : "{}", resizable : true, stencilBuffer : true, title : "BabylonHx Example", vsync : false, width : 0, x : null, y : null}]};
};
ApplicationMain.start = function() {
	var result = ApplicationMain.app.exec();
};
var lime_AssetLibrary = function() {
	this.onChange = new lime_app_Event_$Void_$Void();
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = true;
lime_AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function() {
		var _g = this;
		return new lime_app_Future(function() {
			return _g;
		});
	}
	,loadAudioBuffer: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getAudioBuffer(id);
		});
	}
	,loadBytes: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getBytes(id);
		});
	}
	,loadFont: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getFont(id);
		});
	}
	,loadImage: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getImage(id);
		});
	}
	,loadText: function(id) {
		return this.loadBytes(id).then(function(bytes) {
			return new lime_app_Future(function() {
				if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
			});
		});
	}
	,unload: function() {
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	var id;
	id = "assets/fondo.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/fondo.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/wood.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = true;
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var bytes = null;
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var data = loader.data;
		if(typeof(data) == "string") {
			bytes = new lime_utils_ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js_Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime_text_Font);
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var data = loader.data;
		if(typeof(data) == "string") return data; else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id) {
		var _g = this;
		var promise = new lime_app_Promise();
		promise.completeWith(new lime_app_Future(function() {
			return _g.getAudioBuffer(id);
		}));
		return promise.future;
	}
	,loadBytes: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var loader = new lime_net_URLLoader();
			loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
			loader.onComplete.add(function(_) {
				promise.complete(loader.data);
			});
			loader.onProgress.add(function(_1,loaded,total) {
				if(total == 0) promise.progress(0); else promise.progress(loaded / total);
			});
			loader.onIOError.add(function(_2,e) {
				promise.error(e);
			});
			loader.load(new lime_net_URLRequest(this.path.get(id)));
		} else promise.complete(this.getBytes(id));
		return promise.future;
	}
	,loadImage: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var image = new Image();
			image.onload = function(_) {
				promise.complete(lime_graphics_Image.fromImageElement(image));
			};
			image.onerror = $bind(promise,promise.error);
			image.src = this.path.get(id);
		} else promise.complete(this.getImage(id));
		return promise.future;
	}
	,loadText: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var loader = new lime_net_URLLoader();
			loader.onComplete.add(function(_) {
				promise.complete(loader.data);
			});
			loader.onProgress.add(function(_1,loaded,total) {
				if(total == 0) promise.progress(0); else promise.progress(loaded / total);
			});
			loader.onIOError.add(function(_2,msg) {
				promise.error(msg);
			});
			loader.load(new lime_net_URLRequest(this.path.get(id)));
		} else promise.complete(this.getText(id));
		return promise.future;
	}
	,__class__: DefaultAssetLibrary
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,__class__: List
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = true;
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app_Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = true;
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onExit.add($bind(this,this.onModuleExit));
	this.onUpdate.add($bind(this,this.update));
	lime_ui_Gamepad.onConnect.add($bind(this,this.onGamepadConnect));
	lime_ui_Joystick.onConnect.add($bind(this,this.onJoystickConnect));
	lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
	lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
	lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = true;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		this.modules.push(module);
		if(this.windows.length > 0) {
			var _g = 0;
			var _g1 = this.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				module.onWindowCreate($window);
			}
			if(this.preloader == null || this.preloader.complete) module.onPreloadComplete();
		}
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.render),renderer));
		renderer.onContextLost.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onRenderContextLost),renderer));
		renderer.onContextRestored.add((function(f2,a12) {
			return function(a2) {
				f2(a12,a2);
			};
		})($bind(this,this.onRenderContextRestored),renderer));
		this.renderers.push(renderer);
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new lime_ui_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) this.onPreloadComplete();
		}
	}
	,createWindow: function(window) {
		window.onActivate.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.onWindowActivate),window));
		window.onClose.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onWindowClose),window));
		window.onCreate.add((function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.onWindowCreate),window));
		window.onDeactivate.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onWindowDeactivate),window));
		window.onEnter.add((function(f4,a14) {
			return function() {
				f4(a14);
			};
		})($bind(this,this.onWindowEnter),window));
		window.onFocusIn.add((function(f5,a15) {
			return function() {
				f5(a15);
			};
		})($bind(this,this.onWindowFocusIn),window));
		window.onFocusOut.add((function(f6,a16) {
			return function() {
				f6(a16);
			};
		})($bind(this,this.onWindowFocusOut),window));
		window.onFullscreen.add((function(f7,a17) {
			return function() {
				f7(a17);
			};
		})($bind(this,this.onWindowFullscreen),window));
		window.onKeyDown.add((function(f8,a18) {
			return function(a2,a3) {
				f8(a18,a2,a3);
			};
		})($bind(this,this.onKeyDown),window));
		window.onKeyUp.add((function(f9,a19) {
			return function(a21,a31) {
				f9(a19,a21,a31);
			};
		})($bind(this,this.onKeyUp),window));
		window.onLeave.add((function(f10,a110) {
			return function() {
				f10(a110);
			};
		})($bind(this,this.onWindowLeave),window));
		window.onMinimize.add((function(f11,a111) {
			return function() {
				f11(a111);
			};
		})($bind(this,this.onWindowMinimize),window));
		window.onMouseDown.add((function(f12,a112) {
			return function(x,y,a22) {
				f12(a112,x,y,a22);
			};
		})($bind(this,this.onMouseDown),window));
		window.onMouseMove.add((function(f13,a113) {
			return function(x1,y1) {
				f13(a113,x1,y1);
			};
		})($bind(this,this.onMouseMove),window));
		window.onMouseMoveRelative.add((function(f14,a114) {
			return function(x2,y2) {
				f14(a114,x2,y2);
			};
		})($bind(this,this.onMouseMoveRelative),window));
		window.onMouseUp.add((function(f15,a115) {
			return function(x3,y3,a23) {
				f15(a115,x3,y3,a23);
			};
		})($bind(this,this.onMouseUp),window));
		window.onMouseWheel.add((function(f16,a116) {
			return function(a24,a32) {
				f16(a116,a24,a32);
			};
		})($bind(this,this.onMouseWheel),window));
		window.onMove.add((function(f17,a117) {
			return function(x4,y4) {
				f17(a117,x4,y4);
			};
		})($bind(this,this.onWindowMove),window));
		window.onResize.add((function(f18,a118) {
			return function(a25,a33) {
				f18(a118,a25,a33);
			};
		})($bind(this,this.onWindowResize),window));
		window.onRestore.add((function(f19,a119) {
			return function() {
				f19(a119);
			};
		})($bind(this,this.onWindowRestore),window));
		window.onTextEdit.add((function(f20,a120) {
			return function(a26,a34,a4) {
				f20(a120,a26,a34,a4);
			};
		})($bind(this,this.onTextEdit),window));
		window.onTextInput.add((function(f21,a121) {
			return function(a27) {
				f21(a121,a27);
			};
		})($bind(this,this.onTextInput),window));
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windows.push(window);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
		gamepad.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onGamepadAxisMove),gamepad));
		gamepad.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onGamepadButtonDown),gamepad));
		gamepad.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onGamepadButtonUp),gamepad));
		gamepad.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onGamepadDisconnect),gamepad));
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickAxisMove(joystick,axis,value);
		}
	}
	,onJoystickButtonDown: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonDown(joystick,button);
		}
	}
	,onJoystickButtonUp: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonUp(joystick,button);
		}
	}
	,onJoystickConnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickConnect(joystick);
		}
		joystick.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onJoystickAxisMove),joystick));
		joystick.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onJoystickButtonDown),joystick));
		joystick.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onJoystickButtonUp),joystick));
		joystick.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onJoystickDisconnect),joystick));
		joystick.onHatMove.add((function(f4,a14) {
			return function(a23,a31) {
				f4(a14,a23,a31);
			};
		})($bind(this,this.onJoystickHatMove),joystick));
		joystick.onTrackballMove.add((function(f5,a15) {
			return function(a24,a32) {
				f5(a15,a24,a32);
			};
		})($bind(this,this.onJoystickTrackballMove),joystick));
	}
	,onJoystickDisconnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickDisconnect(joystick);
		}
	}
	,onJoystickHatMove: function(joystick,hat,position) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickHatMove(joystick,hat,position);
		}
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickTrackballMove(joystick,trackball,value);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(window,keyCode,modifier);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(window,keyCode,modifier);
		}
	}
	,onModuleExit: function(code) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onModuleExit(code);
		}
		this.backend.exit();
	}
	,onMouseDown: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(window,x,y,button);
		}
	}
	,onMouseMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(window,x,y);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(window,x,y);
		}
	}
	,onMouseUp: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(window,x,y,button);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(window,deltaX,deltaY);
		}
	}
	,onPreloadComplete: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadComplete();
		}
	}
	,onPreloadProgress: function(loaded,total) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadProgress(loaded,total);
		}
	}
	,onRenderContextLost: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost(renderer);
		}
	}
	,onRenderContextRestored: function(renderer,context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(renderer,context);
		}
	}
	,onTextEdit: function(window,text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(window,text,start,length);
		}
	}
	,onTextInput: function(window,text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(window,text);
		}
	}
	,onTouchEnd: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(touch);
		}
	}
	,onTouchMove: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(touch);
		}
	}
	,onTouchStart: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(touch);
		}
	}
	,onWindowActivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate(window);
		}
	}
	,onWindowClose: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose(window);
		}
		this.removeWindow(window);
	}
	,onWindowCreate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowCreate(window);
		}
	}
	,onWindowDeactivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate(window);
		}
	}
	,onWindowEnter: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter(window);
		}
	}
	,onWindowFocusIn: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn(window);
		}
	}
	,onWindowFocusOut: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut(window);
		}
	}
	,onWindowFullscreen: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen(window);
		}
	}
	,onWindowLeave: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave(window);
		}
	}
	,onWindowMinimize: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize(window);
		}
	}
	,onWindowMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(window,x,y);
		}
	}
	,onWindowResize: function(window,width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(window,width,height);
		}
	}
	,onWindowRestore: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore(window);
		}
	}
	,removeModule: function(module) {
		if(module != null) {
			module.onModuleExit(0);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(this.windows[0] == window) this.window = null;
		}
	}
	,render: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(renderer);
		}
	}
	,setPreloader: function(preloader) {
		if(this.preloader != null) {
			this.preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.preloader = preloader;
		if(preloader.complete) this.onPreloadComplete(); else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime_app_Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var MainLime = function() {
	lime_app_Application.call(this);
};
$hxClasses["MainLime"] = MainLime;
MainLime.__name__ = true;
MainLime.__super__ = lime_app_Application;
MainLime.prototype = $extend(lime_app_Application.prototype,{
	onWindowCreate: function(window) {
		var _g = this;
		this.engine = new com_babylonhx_Engine(window,false);
		this.scene = new com_babylonhx_Scene(this.engine);
		var camera = new com_babylonhx_cameras_FreeCamera("camera1",new com_babylonhx_math_Vector3(0,1,-10),this.scene);
		camera.setTarget(new com_babylonhx_math_Vector3(0,0,0));
		camera.attachControl();
		var background = new com_babylonhx_layer_Layer("background","assets/fondo.png",this.scene,true);
		var light = new com_babylonhx_lights_HemisphericLight("light1",new com_babylonhx_math_Vector3(0,1,0),this.scene);
		light.diffuse = new com_babylonhx_math_Color3(1,1,1);
		light.groundColor = new com_babylonhx_math_Color3(0.3,0.3,0.3);
		light.specular = new com_babylonhx_math_Color3(1,1,1);
		var texture_wood = new com_babylonhx_materials_StandardMaterial("texture_wood",this.scene);
		texture_wood.diffuseTexture = new com_babylonhx_materials_textures_Texture("assets/wood.jpg",this.scene);
		var sphere = com_babylonhx_mesh_Mesh.CreateSphere("sphere1",16,1,this.scene);
		sphere.position.y = 1;
		sphere.set_material(texture_wood);
		var texture_ground = new com_babylonhx_materials_StandardMaterial("texture_ground",this.scene);
		texture_ground.diffuseColor = new com_babylonhx_math_Color3(0.8,0.2,0.2);
		var ground = com_babylonhx_mesh_Mesh.CreateGround("ground1",6,6,2,this.scene);
		ground.set_material(texture_ground);
		this.scene._engine.runRenderLoop(function() {
			_g.scene.render();
		});
		this.engine.width = this.windows[0].__width;
		this.engine.height = this.windows[0].__height;
	}
	,onMouseDown: function(window,x,y,button) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseDown;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(x,y,button);
		}
	}
	,onMouseUp: function(window,x,y,button) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseUp;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f();
		}
	}
	,onMouseMove: function(window,x,y) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseMove;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(x,y);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseWheel;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(deltaY / 2);
		}
	}
	,onTouchStart: function(touch) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.touchDown;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(touch.x,touch.y,touch.id);
		}
	}
	,onTouchEnd: function(touch) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.touchUp;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(touch.x,touch.y,touch.id);
		}
	}
	,onTouchMove: function(touch) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.touchMove;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(touch.x,touch.y,touch.id);
		}
	}
	,onKeyUp: function(window,keycode,modifier) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.keyUp;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(keycode);
		}
	}
	,onKeyDown: function(window,keycode,modifier) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.keyDown;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(keycode);
		}
	}
	,onWindowResize: function(window,width,height) {
		this.engine.width = this.windows[0].__width;
		this.engine.height = this.windows[0].__height;
	}
	,update: function(deltaTime) {
		if(this.engine != null) this.engine._renderLoop();
	}
	,__class__: MainLime
});
Math.__name__ = true;
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = true;
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var com_babylonhx_Engine = $hx_exports.BABYLON.Engine = function(canvas,antialias,options) {
	if(antialias == null) antialias = false;
	this._canvasClientRect = { x : 0, y : 0, width : 800, height : 600};
	this._uintIndicesCurrentlySet = false;
	this._compiledEffects = new haxe_ds_StringMap();
	this._activeTexturesCache = [];
	this._loadedTexturesCache = [];
	this._alphaMode = 0;
	this._alphaState = new com_babylonhx__$AlphaState();
	this._depthCullingState = new com_babylonhx__$DepthCullingState();
	this.deltaTime = 0.0;
	this.fps = 60.0;
	this.previousFramesDuration = [];
	this.fpsRange = 60.0;
	this._activeRenderLoops = [];
	this._renderingQueueLaunched = false;
	this._drawCalls = 0;
	this._runningLoop = false;
	this._windowIsBackground = false;
	this.scenes = [];
	this.renderEvenInBackground = true;
	this.cullBackFaces = true;
	this.isPointerLock = false;
	this.isFullscreen = false;
	var _g = this;
	haxe_Log.trace("BabylonHx - Cross-Platform 3D Engine | " + new Date().getFullYear() + " | www.babylonhx.com",{ fileName : "Engine.hx", lineNumber : 168, className : "com.babylonhx.Engine", methodName : "new"});
	com_babylonhx_Engine.app = canvas;
	this._renderingCanvas = canvas;
	this._canvasClientRect.width = 800;
	this._canvasClientRect.height = 600;
	this.width = 800;
	this.height = 600;
	if(options != null) options = options; else options = { };
	options.antialias = antialias;
	if(options.preserveDrawingBuffer == null) options.preserveDrawingBuffer = false;
	this._onBlur = function() {
		_g._windowIsBackground = true;
	};
	this._onFocus = function() {
		_g._windowIsBackground = false;
	};
	this._hardwareScalingLevel = 1;
	this.resize();
	this._caps = new com_babylonhx_EngineCapabilities();
	this._caps.maxTexturesImageUnits = lime_graphics_opengl_GL.context.getParameter(34930);
	this._caps.maxTextureSize = lime_graphics_opengl_GL.context.getParameter(3379);
	this._caps.maxCubemapTextureSize = lime_graphics_opengl_GL.context.getParameter(34076);
	this._caps.maxRenderTextureSize = lime_graphics_opengl_GL.context.getParameter(34024);
	this._glVersion = lime_graphics_opengl_GL.context.getParameter(7938);
	this._glExtensions = lime_graphics_opengl_GL.context.getSupportedExtensions();
	try {
		this._caps.standardDerivatives = lime_graphics_opengl_GL.context.getExtension("OES_standard_derivatives") != null;
		this._caps.s3tc = lime_graphics_opengl_GL.context.getExtension("WEBGL_compressed_texture_s3tc");
		this._caps.textureFloat = lime_graphics_opengl_GL.context.getExtension("OES_texture_float") != null;
		this._caps.textureAnisotropicFilterExtension = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic") || lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic") || lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
		if(this._caps.textureAnisotropicFilterExtension != null) this._caps.maxAnisotropy = lime_graphics_opengl_GL.getParameter(this._caps.textureAnisotropicFilterExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT); else this._caps.maxAnisotropy = 0;
		this._caps.instancedArrays = lime_graphics_opengl_GL.context.getExtension("ANGLE_instanced_arrays");
		this._caps.uintIndices = lime_graphics_opengl_GL.context.getExtension("OES_element_index_uint") != null;
		this._caps.fragmentDepthSupported = lime_graphics_opengl_GL.context.getExtension("EXT_frag_depth") != null;
		this._caps.highPrecisionShaderSupported = true;
		if(lime_graphics_opengl_GL.getShaderPrecisionFormat != null) {
			var highp = lime_graphics_opengl_GL.context.getShaderPrecisionFormat(35632,36338);
			this._caps.highPrecisionShaderSupported = highp != null && highp.precision != 0;
		}
	} catch( err ) {
		if (err instanceof js__$Boot_HaxeError) err = err.val;
	}
	this._depthCullingState.set_depthTest(true);
	this._depthCullingState.set_depthFunc(515);
	this._depthCullingState.set_depthMask(true);
	this.isFullscreen = false;
	this.isPointerLock = false;
};
$hxClasses["com.babylonhx.Engine"] = com_babylonhx_Engine;
com_babylonhx_Engine.__name__ = true;
com_babylonhx_Engine.compileShader = function(source,type,defines) {
	var shader = lime_graphics_opengl_GL.context.createShader(type == "vertex"?35633:35632);
	lime_graphics_opengl_GL.context.shaderSource(shader,(defines != null?defines + "\n":"") + source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) throw new js__$Boot_HaxeError(lime_graphics_opengl_GL.context.getShaderInfoLog(shader));
	return shader;
};
com_babylonhx_Engine.getWebGLTextureType = function(type) {
	var textureType;
	if(type == 1) textureType = 5126; else textureType = 5121;
	return textureType;
};
com_babylonhx_Engine.getSamplingParameters = function(samplingMode,generateMipMaps) {
	var magFilter = 9728;
	var minFilter = 9728;
	if(samplingMode == 2) {
		magFilter = 9729;
		if(generateMipMaps) minFilter = 9985; else minFilter = 9729;
	} else if(samplingMode == 3) {
		magFilter = 9729;
		if(generateMipMaps) minFilter = 9987; else minFilter = 9729;
	} else if(samplingMode == 1) {
		magFilter = 9728;
		if(generateMipMaps) minFilter = 9986; else minFilter = 9728;
	}
	return { min : minFilter, mag : magFilter};
};
com_babylonhx_Engine.prepareTexture = function(texture,gl,scene,width,height,invertY,noMipmap,isCompressed,processFunction,samplingMode) {
	if(samplingMode == null) samplingMode = 3;
	var engine = scene._engine;
	var potWidth = com_babylonhx_tools_Tools.GetExponantOfTwo(width,engine.getCaps().maxTextureSize);
	var potHeight = com_babylonhx_tools_Tools.GetExponantOfTwo(height,engine.getCaps().maxTextureSize);
	if(potWidth != width || potHeight != height) haxe_Log.trace("Texture '" + texture.url + "' is not power of two !",{ fileName : "Engine.hx", lineNumber : 1931, className : "com.babylonhx.Engine", methodName : "prepareTexture"});
	lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
	texture._baseWidth = width;
	texture._baseHeight = height;
	texture._width = potWidth;
	texture._height = potHeight;
	texture.isReady = true;
	processFunction(potWidth | 0,potHeight | 0);
	var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,!noMipmap);
	lime_graphics_opengl_GL.context.texParameteri(3553,10240,filters.mag);
	lime_graphics_opengl_GL.context.texParameteri(3553,10241,filters.min);
	if(!noMipmap && !isCompressed) lime_graphics_opengl_GL.context.generateMipmap(3553);
	lime_graphics_opengl_GL.context.bindTexture(3553,null);
	engine._activeTexturesCache = [];
	scene._removePendingData(texture);
};
com_babylonhx_Engine.partialLoad = function(url,index,loadedImages,scene,onfinish) {
};
com_babylonhx_Engine.cascadeLoad = function(rootUrl,scene,onfinish,extensions) {
};
com_babylonhx_Engine.prototype = {
	get_drawCalls: function() {
		return this._drawCalls;
	}
	,getExtensions: function() {
		return this._glExtensions;
	}
	,getAspectRatio: function(camera) {
		var viewport = camera.viewport;
		return this.getRenderWidth() * viewport.width / (this.getRenderHeight() * viewport.height);
	}
	,getRenderWidth: function() {
		return this.width;
	}
	,getRenderHeight: function() {
		return this.height;
	}
	,getRenderingCanvas: function() {
		return this._renderingCanvas;
	}
	,setHardwareScalingLevel: function(level) {
		this._hardwareScalingLevel = level;
		this.resize();
	}
	,getHardwareScalingLevel: function() {
		return this._hardwareScalingLevel;
	}
	,getLoadedTexturesCache: function() {
		return this._loadedTexturesCache;
	}
	,getCaps: function() {
		return this._caps;
	}
	,resetDrawCalls: function() {
		this._drawCalls = 0;
	}
	,setDepthFunctionToGreater: function() {
		this._depthCullingState.set_depthFunc(516);
	}
	,setDepthFunctionToGreaterOrEqual: function() {
		this._depthCullingState.set_depthFunc(518);
	}
	,setDepthFunctionToLess: function() {
		this._depthCullingState.set_depthFunc(513);
	}
	,setDepthFunctionToLessOrEqual: function() {
		this._depthCullingState.set_depthFunc(515);
	}
	,stopRenderLoop: function(renderFunction) {
		if(renderFunction == null) {
			this._activeRenderLoops = [];
			return;
		}
		var index = HxOverrides.indexOf(this._activeRenderLoops,renderFunction,0);
		if(index >= 0) this._activeRenderLoops.splice(index,1);
	}
	,_renderLoop: function(rect) {
		this._measureFps();
		if(this._renderFunction != null) this._renderFunction();
		lime_graphics_opengl_GL.context.flush();
	}
	,runRenderLoop: function(renderFunction) {
		this._runningLoop = true;
		this._renderFunction = renderFunction;
	}
	,switchFullscreen: function(requestPointerLock) {
	}
	,clear: function(color,backBuffer,depthStencil) {
		this._depthCullingState.apply();
		this._alphaState.apply();
		if(js_Boot.__instanceof(color,com_babylonhx_math_Color4)) lime_graphics_opengl_GL.clearColor(color.r,color.g,color.b,color.a); else lime_graphics_opengl_GL.clearColor(color.r,color.g,color.b,1.0);
		if(this._depthCullingState.get_depthMask()) lime_graphics_opengl_GL.context.clearDepth(1.0);
		var mode = 0;
		if(backBuffer) mode |= 16384;
		if(depthStencil && this._depthCullingState.get_depthMask()) mode |= 256;
		lime_graphics_opengl_GL.context.clear(mode);
	}
	,setViewport: function(viewport,requiredWidth,requiredHeight) {
		if(requiredHeight == null) requiredHeight = 0;
		if(requiredWidth == null) requiredWidth = 0;
		var width;
		if(requiredWidth == 0) width = this.getRenderWidth(); else width = requiredWidth;
		var height;
		if(requiredHeight == 0) height = this.getRenderHeight(); else height = requiredHeight;
		var x = viewport.x;
		var y = viewport.y;
		this._cachedViewport = viewport;
		lime_graphics_opengl_GL.context.viewport(x * width | 0,y * height | 0,width * viewport.width | 0,height * viewport.height | 0);
	}
	,setDirectViewport: function(x,y,width,height) {
		this._cachedViewport = null;
		lime_graphics_opengl_GL.context.viewport(x,y,width,height);
	}
	,beginFrame: function() {
		this._measureFps();
	}
	,endFrame: function() {
		lime_graphics_opengl_GL.context.flush();
	}
	,getFps: function() {
		return this.fps;
	}
	,getDeltaTime: function() {
		return this.deltaTime;
	}
	,_measureFps: function() {
		this.previousFramesDuration.push(Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000));
		var length = this.previousFramesDuration.length;
		if(length >= 2) this.deltaTime = this.previousFramesDuration[length - 1] - this.previousFramesDuration[length - 2];
		if(length >= this.fpsRange) {
			if(length > this.fpsRange) {
				this.previousFramesDuration.splice(0,1);
				length = this.previousFramesDuration.length;
			}
			var sum = 0.0;
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var id = _g1++;
				sum += this.previousFramesDuration[id + 1] - this.previousFramesDuration[id];
			}
			this.fps = 1000.0 / (sum / (length - 1));
		}
	}
	,resize: function() {
	}
	,setSize: function(width,height) {
	}
	,bindFramebuffer: function(texture,faceIndex) {
		if(faceIndex == null) faceIndex = 0;
		this._currentRenderTarget = texture;
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,texture._framebuffer);
		if(texture.isCube) lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,34069 + faceIndex,texture.data,0); else lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.data,0);
		lime_graphics_opengl_GL.context.viewport(0,0,texture._width,texture._height);
		this.wipeCaches();
	}
	,unBindFramebuffer: function(texture,disableGenerateMipMaps) {
		if(disableGenerateMipMaps == null) disableGenerateMipMaps = false;
		this._currentRenderTarget = null;
		if(texture.generateMipMaps && !disableGenerateMipMaps) {
			lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
			lime_graphics_opengl_GL.context.generateMipmap(3553);
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
		}
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
	}
	,generateMipMapsForCubemap: function(texture) {
		if(texture.generateMipMaps) {
			lime_graphics_opengl_GL.context.bindTexture(34067,texture.data);
			lime_graphics_opengl_GL.context.generateMipmap(34067);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
		}
	}
	,flushFramebuffer: function() {
		lime_graphics_opengl_GL.context.flush();
	}
	,restoreDefaultFramebuffer: function() {
		this._currentRenderTarget = null;
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		this.setViewport(this._cachedViewport,null,null);
		this.wipeCaches();
	}
	,_resetVertexBufferBinding: function() {
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
	}
	,createVertexBuffer: function(vertices) {
		var vbo = lime_graphics_opengl_GL.context.createBuffer();
		lime_graphics_opengl_GL.context.bindBuffer(34962,vbo);
		lime_graphics_opengl_GL.bufferData(34962,(function($this) {
			var $r;
			var this1;
			if(vertices != null) this1 = new Float32Array(vertices); else this1 = null;
			$r = this1;
			return $r;
		}(this)),35044);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
		var ret = new com_babylonhx_mesh_WebGLBuffer(vbo);
		ret.references = 1;
		return ret;
	}
	,createDynamicVertexBuffer: function(capacity) {
		var vbo = lime_graphics_opengl_GL.context.createBuffer();
		lime_graphics_opengl_GL.context.bindBuffer(34962,vbo);
		lime_graphics_opengl_GL.bufferData(34962,(function($this) {
			var $r;
			var this1;
			if(capacity != null) this1 = new Float32Array(capacity); else this1 = null;
			$r = this1;
			return $r;
		}(this)),35048);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
		var ret = new com_babylonhx_mesh_WebGLBuffer(vbo);
		ret.references = 1;
		return ret;
	}
	,updateDynamicVertexBuffer: function(vertexBuffer,vertices,offset) {
		if(offset == null) offset = 0;
		lime_graphics_opengl_GL.context.bindBuffer(34962,vertexBuffer.buffer);
		if(!((vertices instanceof Array) && vertices.__enum__ == null)) lime_graphics_opengl_GL.bufferSubData(34962,offset,vertices); else lime_graphics_opengl_GL.bufferSubData(34962,offset,(function($this) {
			var $r;
			var array;
			array = js_Boot.__cast(vertices , Array);
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
	}
	,_resetIndexBufferBinding: function() {
		lime_graphics_opengl_GL.context.bindBuffer(34963,null);
		this._cachedIndexBuffer = null;
	}
	,createIndexBuffer: function(indices) {
		var vbo = lime_graphics_opengl_GL.context.createBuffer();
		lime_graphics_opengl_GL.context.bindBuffer(34963,vbo);
		var arrayBuffer = null;
		var need32Bits = false;
		if(this._caps.uintIndices) {
			var _g1 = 0;
			var _g = indices.length;
			while(_g1 < _g) {
				var index = _g1++;
				if(indices[index] > 65535) {
					need32Bits = true;
					break;
				}
			}
			if(need32Bits) {
				var this1;
				if(indices != null) this1 = new Int32Array(indices); else this1 = null;
				arrayBuffer = this1;
			} else {
				var this2;
				if(indices != null) this2 = new Int16Array(indices); else this2 = null;
				arrayBuffer = this2;
			}
		} else {
			var this3;
			if(indices != null) this3 = new Int16Array(indices); else this3 = null;
			arrayBuffer = this3;
		}
		lime_graphics_opengl_GL.context.bufferData(34963,arrayBuffer,35044);
		lime_graphics_opengl_GL.context.bindBuffer(34963,null);
		this._cachedIndexBuffer = null;
		var ret = new com_babylonhx_mesh_WebGLBuffer(vbo);
		ret.references = 1;
		ret.is32Bits = need32Bits;
		return ret;
	}
	,bindBuffers: function(vertexBuffer,indexBuffer,vertexDeclaration,vertexStrideSize,effect) {
		if(this._cachedVertexBuffers != vertexBuffer || this._cachedEffectForVertexBuffers != effect) {
			this._cachedVertexBuffers = vertexBuffer;
			this._cachedEffectForVertexBuffers = effect;
			lime_graphics_opengl_GL.context.bindBuffer(34962,vertexBuffer.buffer);
			var offset = 0;
			var _g1 = 0;
			var _g = vertexDeclaration.length;
			while(_g1 < _g) {
				var index = _g1++;
				var order = effect._attributes[index];
				if(order >= 0) lime_graphics_opengl_GL.context.vertexAttribPointer(order,vertexDeclaration[index],5126,false,vertexStrideSize,offset);
				offset += vertexDeclaration[index] * 4;
			}
		}
		if(this._cachedIndexBuffer != indexBuffer) {
			this._cachedIndexBuffer = indexBuffer;
			lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.buffer);
			this._uintIndicesCurrentlySet = indexBuffer.is32Bits;
		}
	}
	,bindMultiBuffers: function(vertexBuffers,indexBuffer,effect) {
		if(this._cachedVertexBuffers != vertexBuffers || this._cachedEffectForVertexBuffers != effect) {
			this._cachedVertexBuffers = vertexBuffers;
			this._cachedEffectForVertexBuffers = effect;
			var attributes = effect._attributesNames;
			var _g1 = 0;
			var _g = attributes.length;
			while(_g1 < _g) {
				var index = _g1++;
				var order = effect._attributes[index];
				if(order >= 0) {
					var vertexBuffer = vertexBuffers.get(attributes[index]);
					if(vertexBuffer == null) continue;
					var stride = vertexBuffer._strideSize;
					lime_graphics_opengl_GL.context.bindBuffer(34962,vertexBuffer._buffer.buffer);
					lime_graphics_opengl_GL.context.vertexAttribPointer(order,stride,5126,false,stride * 4,0);
				}
			}
		}
		if(indexBuffer != null && this._cachedIndexBuffer != indexBuffer) {
			this._cachedIndexBuffer = indexBuffer;
			lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.buffer);
			this._uintIndicesCurrentlySet = indexBuffer.is32Bits;
		}
	}
	,_releaseBuffer: function(buffer) {
		buffer.references--;
		if(buffer.references == 0) {
			lime_graphics_opengl_GL.context.deleteBuffer(buffer.buffer);
			return true;
		}
		return false;
	}
	,createInstancesBuffer: function(capacity) {
		var buffer = new com_babylonhx_mesh_WebGLBuffer(lime_graphics_opengl_GL.context.createBuffer());
		buffer.capacity = capacity;
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.buffer);
		lime_graphics_opengl_GL.bufferData(34962,(function($this) {
			var $r;
			var this1;
			if(capacity != null) this1 = new Float32Array(capacity); else this1 = null;
			$r = this1;
			return $r;
		}(this)),35048);
		return buffer;
	}
	,deleteInstancesBuffer: function(buffer) {
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.buffer);
		buffer = null;
	}
	,updateAndBindInstancesBuffer: function(instancesBuffer,data,offsetLocations) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,instancesBuffer.buffer);
		lime_graphics_opengl_GL.context.bufferSubData(34962,0,data);
		var _g = 0;
		while(_g < 4) {
			var index = _g++;
			var offsetLocation = offsetLocations[index];
			lime_graphics_opengl_GL.context.enableVertexAttribArray(offsetLocation);
			lime_graphics_opengl_GL.context.vertexAttribPointer(offsetLocation,4,5126,false,64,index * 16);
			this._caps.instancedArrays.vertexAttribDivisorANGLE(offsetLocation,1);
		}
	}
	,unBindInstancesBuffer: function(instancesBuffer,offsetLocations) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,instancesBuffer.buffer);
		var _g = 0;
		while(_g < 4) {
			var index = _g++;
			var offsetLocation = offsetLocations[index];
			lime_graphics_opengl_GL.context.disableVertexAttribArray(offsetLocation);
			this._caps.instancedArrays.vertexAttribDivisorANGLE(offsetLocation,0);
		}
	}
	,applyStates: function() {
		this._depthCullingState.apply();
		this._alphaState.apply();
	}
	,draw: function(useTriangles,indexStart,indexCount,instancesCount) {
		if(instancesCount == null) instancesCount = -1;
		this._depthCullingState.apply();
		this._alphaState.apply();
		this._drawCalls++;
		var indexFormat;
		if(this._uintIndicesCurrentlySet) indexFormat = 5125; else indexFormat = 5123;
		var mult;
		if(this._uintIndicesCurrentlySet) mult = 4; else mult = 2;
		if(instancesCount > -1) {
			this._caps.instancedArrays.drawElementsInstancedANGLE(useTriangles?4:1,indexCount,indexFormat,indexStart * mult,instancesCount);
			return;
		}
		lime_graphics_opengl_GL.context.drawElements(useTriangles?4:1,indexCount,indexFormat,indexStart * mult);
	}
	,drawPointClouds: function(verticesStart,verticesCount,instancesCount) {
		if(instancesCount == null) instancesCount = -1;
		this._depthCullingState.apply();
		this._alphaState.apply();
		this._drawCalls++;
		if(instancesCount > -1) {
			this._caps.instancedArrays.drawArraysInstancedANGLE(0,verticesStart,verticesCount,instancesCount);
			return;
		}
		lime_graphics_opengl_GL.context.drawArrays(0,verticesStart,verticesCount);
	}
	,_releaseEffect: function(effect) {
		if(this._compiledEffects.exists(effect._key)) {
			this._compiledEffects.remove(effect._key);
			if(effect._program != null) lime_graphics_opengl_GL.context.deleteProgram(effect._program);
		}
	}
	,createEffect: function(baseName,attributesNames,uniformsNames,samplers,defines,fallbacks,onCompiled,onError) {
		var vertex;
		if(baseName.vertexElement != null) vertex = baseName.vertexElement; else if(baseName.vertex != null) vertex = baseName.vertex; else vertex = baseName;
		var fragment;
		if(baseName.fragmentElement != null) fragment = baseName.fragmentElement; else if(baseName.fragment != null) fragment = baseName.fragment; else fragment = baseName;
		var name = vertex + "+" + fragment + "@" + defines;
		if(this._compiledEffects.exists(name)) return this._compiledEffects.get(name);
		var effect = new com_babylonhx_materials_Effect(baseName,attributesNames,uniformsNames,samplers,this,defines,fallbacks,onCompiled,onError);
		effect._key = name;
		this._compiledEffects.set(name,effect);
		return effect;
	}
	,createEffectForParticles: function(fragmentName,uniformsNames,samplers,defines,fallbacks,onCompiled,onError) {
		if(defines == null) defines = "";
		if(uniformsNames == null) uniformsNames = [];
		if(samplers == null) samplers = [];
		return this.createEffect({ vertex : "particles", fragment : fragmentName},["position","color","options"],["view","projection"].concat(uniformsNames),["diffuseSampler"].concat(samplers),defines,fallbacks,onCompiled,onError);
	}
	,createShaderProgram: function(vertexCode,fragmentCode,defines) {
		var vertexShader = com_babylonhx_Engine.compileShader(vertexCode,"vertex",defines);
		var fragmentShader = com_babylonhx_Engine.compileShader(fragmentCode,"fragment",defines);
		var shaderProgram = lime_graphics_opengl_GL.context.createProgram();
		lime_graphics_opengl_GL.context.attachShader(shaderProgram,vertexShader);
		lime_graphics_opengl_GL.context.attachShader(shaderProgram,fragmentShader);
		lime_graphics_opengl_GL.context.linkProgram(shaderProgram);
		var linked = lime_graphics_opengl_GL.context.getProgramParameter(shaderProgram,35714);
		if(linked == 0) {
			var error = lime_graphics_opengl_GL.context.getProgramInfoLog(shaderProgram);
			if(error != "") throw new js__$Boot_HaxeError(error);
		}
		lime_graphics_opengl_GL.context.deleteShader(vertexShader);
		lime_graphics_opengl_GL.context.deleteShader(fragmentShader);
		return shaderProgram;
	}
	,getUniforms: function(shaderProgram,uniformsNames) {
		var results = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < uniformsNames.length) {
			var name = uniformsNames[_g];
			++_g;
			var uniform = lime_graphics_opengl_GL.context.getUniformLocation(shaderProgram,name);
			if(uniform != null) {
				if(__map_reserved[name] != null) results.setReserved(name,uniform); else results.h[name] = uniform;
			}
		}
		return results;
	}
	,getAttributes: function(shaderProgram,attributesNames) {
		var results = [];
		var _g1 = 0;
		var _g = attributesNames.length;
		while(_g1 < _g) {
			var index = _g1++;
			try {
				results.push(lime_graphics_opengl_GL.context.getAttribLocation(shaderProgram,attributesNames[index]));
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				haxe_Log.trace("getAttributes() -> ERROR: " + Std.string(e),{ fileName : "Engine.hx", lineNumber : 934, className : "com.babylonhx.Engine", methodName : "getAttributes"});
				results.push(-1);
			}
		}
		return results;
	}
	,enableEffect: function(effect) {
		if(effect == null || effect._attributes.length == 0 || this._currentEffect == effect) {
			if(effect != null && effect.onBind != null) effect.onBind(effect);
			return;
		}
		if(this._vertexAttribArrays != null) this._vertexAttribArrays = this._vertexAttribArrays; else this._vertexAttribArrays = [];
		lime_graphics_opengl_GL.context.useProgram(effect._program);
		var _g1 = 0;
		var _g = this._vertexAttribArrays.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i > 34338 || !this._vertexAttribArrays[i]) continue;
			this._vertexAttribArrays[i] = false;
			lime_graphics_opengl_GL.context.disableVertexAttribArray(i);
		}
		var attributesCount = effect._attributes.length;
		var _g2 = 0;
		while(_g2 < attributesCount) {
			var index = _g2++;
			var order = effect._attributes[index];
			if(order >= 0) {
				this._vertexAttribArrays[order] = true;
				lime_graphics_opengl_GL.context.enableVertexAttribArray(order);
			}
		}
		this._currentEffect = effect;
		if(effect.onBind != null) effect.onBind(effect);
	}
	,setArray: function(uniform,array) {
		lime_graphics_opengl_GL.uniform1fv(uniform,(function($this) {
			var $r;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setArray2: function(uniform,array) {
		if(array.length % 2 == 0) lime_graphics_opengl_GL.uniform2fv(uniform,(function($this) {
			var $r;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setArray3: function(uniform,array) {
		if(array.length % 3 == 0) lime_graphics_opengl_GL.uniform3fv(uniform,(function($this) {
			var $r;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setArray4: function(uniform,array) {
		if(array.length % 4 == 0) lime_graphics_opengl_GL.uniform4fv(uniform,(function($this) {
			var $r;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setMatrices: function(uniform,matrices) {
		lime_graphics_opengl_GL.context.uniformMatrix4fv(uniform,false,matrices);
	}
	,setMatrix: function(uniform,matrix) {
		lime_graphics_opengl_GL.context.uniformMatrix4fv(uniform,false,matrix.m);
	}
	,setMatrix3x3: function(uniform,matrix) {
		lime_graphics_opengl_GL.context.uniformMatrix3fv(uniform,false,matrix);
	}
	,setMatrix2x2: function(uniform,matrix) {
		lime_graphics_opengl_GL.context.uniformMatrix2fv(uniform,false,matrix);
	}
	,setFloat: function(uniform,value) {
		lime_graphics_opengl_GL.context.uniform1f(uniform,value);
	}
	,setFloat2: function(uniform,x,y) {
		lime_graphics_opengl_GL.context.uniform2f(uniform,x,y);
	}
	,setFloat3: function(uniform,x,y,z) {
		lime_graphics_opengl_GL.context.uniform3f(uniform,x,y,z);
	}
	,setBool: function(uniform,bool) {
		lime_graphics_opengl_GL.context.uniform1i(uniform,bool?1:0);
	}
	,setFloat4: function(uniform,x,y,z,w) {
		lime_graphics_opengl_GL.context.uniform4f(uniform,x,y,z,w);
	}
	,setColor3: function(uniform,color3) {
		lime_graphics_opengl_GL.context.uniform3f(uniform,color3.r,color3.g,color3.b);
	}
	,setColor4: function(uniform,color3,alpha) {
		lime_graphics_opengl_GL.context.uniform4f(uniform,color3.r,color3.g,color3.b,alpha);
	}
	,setState: function(culling,zOffset,force,reverseSide) {
		if(reverseSide == null) reverseSide = false;
		if(force == null) force = false;
		if(zOffset == null) zOffset = 0;
		var showSide;
		if(reverseSide) showSide = 1028; else showSide = 1029;
		var hideSide;
		if(reverseSide) hideSide = 1029; else hideSide = 1028;
		var cullFace;
		if(this.cullBackFaces) cullFace = showSide; else cullFace = hideSide;
		if(this._depthCullingState.get_cull() != culling || force || this._depthCullingState.get_cullFace() != cullFace) {
			if(culling) {
				this._depthCullingState.set_cullFace(cullFace);
				this._depthCullingState.set_cull(true);
			} else this._depthCullingState.set_cull(false);
		}
		this._depthCullingState.set_zOffset(zOffset);
	}
	,setDepthBuffer: function(enable) {
		this._depthCullingState.set_depthTest(enable);
	}
	,getDepthWrite: function() {
		return this._depthCullingState.get_depthMask();
	}
	,setDepthWrite: function(enable) {
		this._depthCullingState.set_depthMask(enable);
	}
	,setColorWrite: function(enable) {
		lime_graphics_opengl_GL.context.colorMask(enable,enable,enable,enable);
	}
	,setAlphaMode: function(mode) {
		if(this._alphaMode == mode) return;
		switch(mode) {
		case 0:
			this._depthCullingState.set_depthMask(true);
			this._alphaState.set_alphaBlend(false);
			break;
		case 2:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 6:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 1:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 3:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 4:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 5:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
			this._alphaState.set_alphaBlend(true);
			break;
		}
		this._alphaMode = mode;
	}
	,getAlphaMode: function() {
		return this._alphaMode;
	}
	,setAlphaTesting: function(enable) {
		this._alphaTest = enable;
	}
	,getAlphaTesting: function() {
		return this._alphaTest;
	}
	,wipeCaches: function() {
		this._activeTexturesCache = [];
		this._currentEffect = null;
		this._depthCullingState.reset();
		this._alphaState.reset();
		this._cachedVertexBuffers = null;
		this._cachedIndexBuffer = null;
		this._cachedEffectForVertexBuffers = null;
	}
	,setSamplingMode: function(texture,samplingMode) {
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		var magFilter = 9728;
		var minFilter = 9728;
		if(samplingMode == 2) {
			magFilter = 9729;
			minFilter = 9729;
		} else if(samplingMode == 3) {
			magFilter = 9729;
			minFilter = 9987;
		}
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,magFilter);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,minFilter);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		texture.samplingMode = samplingMode;
	}
	,createTexture: function(url,noMipmap,invertY,scene,samplingMode,onLoad,onError,buffer) {
		if(samplingMode == null) samplingMode = 3;
		var texture = new com_babylonhx_materials_textures_WebGLTexture(url,lime_graphics_opengl_GL.context.createTexture());
		var extension = "";
		var fromData = null;
		if(HxOverrides.substr(url,0,5) == "data:") fromData = true;
		if(fromData == null) extension = HxOverrides.substr(url,url.length - 4,4).toLowerCase(); else {
			var oldUrl = url;
			fromData = oldUrl.split(":");
			url = oldUrl;
			extension = fromData[1].substr(fromData[1].length - 4,4).toLowerCase();
		}
		var isDDS = this.getCaps().s3tc && extension == ".dds";
		var isTGA = extension == ".tga";
		scene._addPendingData(texture);
		texture.url = url;
		texture.noMipmap = noMipmap;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		this._loadedTexturesCache.push(texture);
		var onerror = function(e) {
			scene._removePendingData(texture);
			if(onError != null) onError();
		};
		if(isTGA) {
		} else if(isDDS) {
		} else {
			var onload = function(img) {
				com_babylonhx_Engine.prepareTexture(texture,lime_graphics_opengl_GL,scene,img.width,img.height,invertY,noMipmap,false,function(potWidth,potHeight) {
					lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,potWidth,potHeight,0,6408,5121,img.data);
					if(onLoad != null) onLoad();
				},samplingMode);
			};
			if(!((fromData instanceof Array) && fromData.__enum__ == null)) com_babylonhx_tools_Tools.LoadImage(url,onload,onerror,scene.database); else com_babylonhx_tools_Tools.LoadImage(buffer,onload,onerror,scene.database);
		}
		return texture;
	}
	,createRawTexture: function(data,width,height,format,generateMipMaps,invertY,samplingMode,compression) {
		if(compression == null) compression = "";
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",lime_graphics_opengl_GL.context.createTexture());
		texture._baseWidth = width;
		texture._baseHeight = height;
		texture._width = width;
		texture._height = height;
		texture.references = 1;
		this.updateRawTexture(texture,data,format,invertY,compression);
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,generateMipMaps);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,filters.mag);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,filters.min);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		texture.samplingMode = samplingMode;
		this._loadedTexturesCache.push(texture);
		return texture;
	}
	,updateRawTexture: function(texture,data,format,invertY,compression) {
		if(compression == null) compression = "";
		if(invertY == null) invertY = false;
		var internalFormat = 6408;
		switch(format) {
		case 0:
			internalFormat = 6406;
			break;
		case 1:
			internalFormat = 6409;
			break;
		case 2:
			internalFormat = 6410;
			break;
		case 3:
			internalFormat = 6407;
			break;
		case 4:
			internalFormat = 6408;
			break;
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		if(compression != "") lime_graphics_opengl_GL.compressedTexImage2D(3553,0,Reflect.getProperty(this.getCaps().s3tc,compression),texture._width,texture._height,0,data); else lime_graphics_opengl_GL.context.texImage2D(3553,0,internalFormat,texture._width,texture._height,0,internalFormat,5121,data);
		if(texture.generateMipMaps) lime_graphics_opengl_GL.context.generateMipmap(3553);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		this._activeTexturesCache = [];
		texture.isReady = true;
	}
	,createDynamicTexture: function(width,height,generateMipMaps,samplingMode) {
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",lime_graphics_opengl_GL.context.createTexture());
		width = com_babylonhx_tools_Tools.GetExponantOfTwo(width,this._caps.maxTextureSize);
		height = com_babylonhx_tools_Tools.GetExponantOfTwo(height,this._caps.maxTextureSize);
		this._activeTexturesCache = [];
		texture._baseWidth = width;
		texture._baseHeight = height;
		texture._width = width;
		texture._height = height;
		texture.isReady = false;
		texture.generateMipMaps = generateMipMaps;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		this.updateTextureSamplingMode(samplingMode,texture);
		this._loadedTexturesCache.push(texture);
		return texture;
	}
	,updateDynamicTexture: function(texture,canvas,invertY) {
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,canvas.width,canvas.height,0,6408,5121,canvas.data);
		if(texture.generateMipMaps) lime_graphics_opengl_GL.context.generateMipmap(3553);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		this._activeTexturesCache = [];
		texture.isReady = true;
	}
	,updateTextureSamplingMode: function(samplingMode,texture) {
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,texture.generateMipMaps);
		if(texture.isCube) {
			lime_graphics_opengl_GL.context.bindTexture(34067,texture.data);
			lime_graphics_opengl_GL.context.texParameteri(34067,10240,filters.mag);
			lime_graphics_opengl_GL.context.texParameteri(34067,10241,filters.min);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
		} else {
			lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
			lime_graphics_opengl_GL.context.texParameteri(3553,10240,filters.mag);
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,filters.min);
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
		}
	}
	,updateVideoTexture: function(texture,video,invertY) {
	}
	,createRenderTargetTexture: function(size,options) {
		var generateMipMaps = false;
		var generateDepthBuffer = true;
		var type = 0;
		var samplingMode = 3;
		if(options != null) {
			if(options.generateMipMaps != null) generateMipMaps = options.generateMipMaps; else generateMipMaps = options;
			if(options.generateDepthBuffer != null) generateDepthBuffer = options.generateDepthBuffer; else generateDepthBuffer = true;
			if(options.type == null) type = type; else type = options.type;
			if(options.samplingMode != null) samplingMode = options.samplingMode;
			if(type == 1) samplingMode = 1;
		}
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",lime_graphics_opengl_GL.context.createTexture());
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		var width;
		if(size.width != null) width = size.width; else width = size;
		var height;
		if(size.height != null) height = size.height; else height = size;
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,generateMipMaps);
		if(type == 1 && !this._caps.textureFloat) {
			type = 0;
			haxe_Log.trace("Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type",{ fileName : "Engine.hx", lineNumber : 1472, className : "com.babylonhx.Engine", methodName : "createRenderTargetTexture"});
		}
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,filters.mag);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,filters.min);
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		lime_graphics_opengl_GL.texImage2D(3553,0,6408,width,height,0,6408,com_babylonhx_Engine.getWebGLTextureType(type),null);
		var depthBuffer = null;
		if(generateDepthBuffer) {
			depthBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
			lime_graphics_opengl_GL.context.bindRenderbuffer(36161,depthBuffer);
			lime_graphics_opengl_GL.context.renderbufferStorage(36161,33189,width,height);
		}
		var framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,framebuffer);
		if(generateDepthBuffer) lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36096,36161,depthBuffer);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		texture._framebuffer = framebuffer;
		if(generateDepthBuffer) texture._depthBuffer = depthBuffer;
		texture._width = width;
		texture._height = height;
		texture.isReady = true;
		texture.generateMipMaps = generateMipMaps;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		this._activeTexturesCache = [];
		this._loadedTexturesCache.push(texture);
		return texture;
	}
	,createRenderTargetCubeTexture: function(size,options) {
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",lime_graphics_opengl_GL.context.createTexture());
		var generateMipMaps = true;
		var samplingMode = 3;
		if(options != null) {
			if(options.generateMipMaps == null) generateMipMaps = options; else generateMipMaps = options.generateMipMaps;
			if(options.samplingMode != null) samplingMode = options.samplingMode;
		}
		texture.isCube = true;
		texture.references = 1;
		texture.generateMipMaps = generateMipMaps;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,generateMipMaps);
		lime_graphics_opengl_GL.context.bindTexture(34067,texture.data);
		var _g = 0;
		while(_g < 6) {
			var face = _g++;
			lime_graphics_opengl_GL.context.texImage2D(34069 + face,0,6408,size,size,0,6408,5121,null);
		}
		lime_graphics_opengl_GL.context.texParameteri(34067,10240,filters.mag);
		lime_graphics_opengl_GL.context.texParameteri(34067,10241,filters.min);
		lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
		var depthBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,depthBuffer);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,33189,size,size);
		var framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,framebuffer);
		lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36096,36161,depthBuffer);
		if(texture.generateMipMaps) {
			lime_graphics_opengl_GL.context.bindTexture(34067,texture.data);
			lime_graphics_opengl_GL.context.generateMipmap(34067);
		}
		lime_graphics_opengl_GL.context.bindTexture(34067,null);
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		texture._framebuffer = framebuffer;
		texture._depthBuffer = depthBuffer;
		this._activeTexturesCache = [];
		texture._width = size;
		texture._height = size;
		texture.isReady = true;
		return texture;
	}
	,createCubeTexture: function(rootUrl,scene,extensions,noMipmap) {
		if(noMipmap == null) noMipmap = false;
		var _g = this;
		var texture = new com_babylonhx_materials_textures_WebGLTexture(rootUrl,lime_graphics_opengl_GL.context.createTexture());
		texture.isCube = true;
		texture.url = rootUrl;
		texture.references = 1;
		var extension = HxOverrides.substr(rootUrl,rootUrl.length - 4,4).toLowerCase();
		var isDDS = this.getCaps().s3tc && extension == ".dds";
		if(isDDS) {
		} else {
			var faces = [34069,34071,34073,34070,34072,34074];
			var imgs = [];
			var _setTex = function(img,index) {
				_g._workingCanvas = img;
				lime_graphics_opengl_GL.context.texImage2D(faces[index],0,6408,_g._workingCanvas.width,_g._workingCanvas.height,0,6408,5121,img.data);
			};
			var generate = function() {
				var width = com_babylonhx_tools_Tools.GetExponantOfTwo(imgs[0].width,_g._caps.maxCubemapTextureSize);
				var height = width;
				lime_graphics_opengl_GL.context.bindTexture(34067,texture.data);
				var _g2 = 0;
				var _g1 = faces.length;
				while(_g2 < _g1) {
					var index1 = _g2++;
					_setTex(imgs[index1],index1);
				}
				if(!noMipmap) lime_graphics_opengl_GL.context.generateMipmap(34067);
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9729);
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,noMipmap?9729:9987);
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
				lime_graphics_opengl_GL.context.bindTexture(34067,null);
				_g._activeTexturesCache = [];
				texture._width = width;
				texture._height = height;
				texture.isReady = true;
			};
			var i = 0;
			var loadImage;
			var loadImage1 = null;
			loadImage1 = function() {
				com_babylonhx_tools_Tools.LoadImage(rootUrl + extensions[i],function(bd) {
					imgs.push(bd);
					if(++i == extensions.length) generate(); else loadImage1();
				});
			};
			loadImage = loadImage1;
			loadImage();
		}
		return texture;
	}
	,_releaseTexture: function(texture) {
		if(texture._framebuffer != null) lime_graphics_opengl_GL.context.deleteFramebuffer(texture._framebuffer);
		if(texture._depthBuffer != null) lime_graphics_opengl_GL.context.deleteRenderbuffer(texture._depthBuffer);
		lime_graphics_opengl_GL.context.deleteTexture(texture.data);
		this.unbindAllTextures();
		var index = HxOverrides.indexOf(this._loadedTexturesCache,texture,0);
		if(index != -1) this._loadedTexturesCache.splice(index,1);
		texture = null;
	}
	,unbindAllTextures: function() {
		var _g1 = 0;
		var _g = this._caps.maxTexturesImageUnits;
		while(_g1 < _g) {
			var channel = _g1++;
			lime_graphics_opengl_GL.context.activeTexture(33984 + channel);
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
			this._activeTexturesCache[channel] = null;
		}
	}
	,getGLTexture: function(channel) {
		return 33984 + channel;
	}
	,bindSamplers: function(effect) {
		lime_graphics_opengl_GL.context.useProgram(effect._program);
		var samplers = effect._samplers;
		var _g1 = 0;
		var _g = samplers.length;
		while(_g1 < _g) {
			var index = _g1++;
			var uniform = effect._uniforms.get(samplers[index]);
			lime_graphics_opengl_GL.context.uniform1i(uniform,index);
		}
		this._currentEffect = null;
	}
	,_bindTexture: function(channel,texture) {
		lime_graphics_opengl_GL.context.activeTexture(33984 + channel);
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		this._activeTexturesCache[channel] = null;
	}
	,setTextureFromPostProcess: function(channel,postProcess) {
		if(postProcess._textures.length > 0) {
			lime_graphics_opengl_GL.context.activeTexture(33984 + channel);
			lime_graphics_opengl_GL.context.bindTexture(3553,postProcess._textures.data[postProcess._currentRenderTextureInd].data);
			this._activeTexturesCache[channel] = null;
		}
	}
	,setTexture: function(channel,texture) {
		if(channel < 0) return;
		if(texture == null || !texture.isReady()) {
			if(this._activeTexturesCache[channel] != null) {
				lime_graphics_opengl_GL.context.activeTexture(33984 + channel);
				lime_graphics_opengl_GL.context.bindTexture(3553,null);
				lime_graphics_opengl_GL.context.bindTexture(34067,null);
				this._activeTexturesCache[channel] = null;
			}
			return;
		}
		if(js_Boot.__instanceof(texture,com_babylonhx_materials_textures_VideoTexture)) {
		} else if(texture.delayLoadState == 4) {
			texture.delayLoad();
			return;
		}
		if(this._activeTexturesCache[channel] == texture) return;
		this._activeTexturesCache[channel] = texture;
		var internalTexture = texture.getInternalTexture();
		lime_graphics_opengl_GL.context.activeTexture(33984 + channel);
		if(internalTexture.isCube) {
			lime_graphics_opengl_GL.context.bindTexture(34067,internalTexture.data);
			if(internalTexture._cachedCoordinatesMode != texture.coordinatesMode) {
				internalTexture._cachedCoordinatesMode = texture.coordinatesMode;
				var textureWrapMode;
				if(texture.coordinatesMode != 3 && texture.coordinatesMode != 5) textureWrapMode = 10497; else textureWrapMode = 33071;
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,textureWrapMode);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,textureWrapMode);
			}
			this._setAnisotropicLevel(34067,texture);
		} else {
			lime_graphics_opengl_GL.context.bindTexture(3553,internalTexture.data);
			if(internalTexture._cachedWrapU != texture.wrapU) {
				internalTexture._cachedWrapU = texture.wrapU;
				var _g = texture.wrapU;
				switch(_g) {
				case 1:
					lime_graphics_opengl_GL.context.texParameteri(3553,10242,10497);
					break;
				case 0:
					lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
					break;
				case 2:
					lime_graphics_opengl_GL.context.texParameteri(3553,10242,33648);
					break;
				}
			}
			if(internalTexture._cachedWrapV != texture.wrapV) {
				internalTexture._cachedWrapV = texture.wrapV;
				var _g1 = texture.wrapV;
				switch(_g1) {
				case 1:
					lime_graphics_opengl_GL.context.texParameteri(3553,10243,10497);
					break;
				case 0:
					lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
					break;
				case 2:
					lime_graphics_opengl_GL.context.texParameteri(3553,10243,33648);
					break;
				}
			}
			this._setAnisotropicLevel(3553,texture);
		}
	}
	,_setAnisotropicLevel: function(key,texture) {
		var anisotropicFilterExtension = this._caps.textureAnisotropicFilterExtension;
		if(anisotropicFilterExtension != null && texture._cachedAnisotropicFilteringLevel != texture.anisotropicFilteringLevel) {
			lime_graphics_opengl_GL.texParameterf(key,anisotropicFilterExtension.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropicFilteringLevel,this._caps.maxAnisotropy));
			texture._cachedAnisotropicFilteringLevel = texture.anisotropicFilteringLevel;
		}
	}
	,readPixels: function(x,y,width,height) {
		var data;
		var elements = height * width * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		data = this1;
		lime_graphics_opengl_GL.context.readPixels(x,y,width,height,6408,5121,data);
		return data;
	}
	,dispose: function() {
		this.stopRenderLoop();
		while(this.scenes.length > 0) {
			this.scenes[0].dispose();
			this.scenes[0] = null;
			this.scenes.shift();
		}
		var $it0 = this._compiledEffects.keys();
		while( $it0.hasNext() ) {
			var name = $it0.next();
			lime_graphics_opengl_GL.deleteProgram(this._compiledEffects.get(name)._program);
		}
	}
	,__class__: com_babylonhx_Engine
	,__properties__: {get_drawCalls:"get_drawCalls"}
};
var com_babylonhx_EngineCapabilities = $hx_exports.BABYLON.EngineCapabilities = function() {
};
$hxClasses["com.babylonhx.EngineCapabilities"] = com_babylonhx_EngineCapabilities;
com_babylonhx_EngineCapabilities.__name__ = true;
com_babylonhx_EngineCapabilities.prototype = {
	__class__: com_babylonhx_EngineCapabilities
};
var com_babylonhx_IDisposable = $hx_exports.BABYLON.IDisposable = function() { };
$hxClasses["com.babylonhx.IDisposable"] = com_babylonhx_IDisposable;
com_babylonhx_IDisposable.__name__ = true;
com_babylonhx_IDisposable.prototype = {
	__class__: com_babylonhx_IDisposable
};
var com_babylonhx_ISmartArrayCompatible = $hx_exports.BABYLON.ISmartArrayCompatible = function() { };
$hxClasses["com.babylonhx.ISmartArrayCompatible"] = com_babylonhx_ISmartArrayCompatible;
com_babylonhx_ISmartArrayCompatible.__name__ = true;
com_babylonhx_ISmartArrayCompatible.prototype = {
	__class__: com_babylonhx_ISmartArrayCompatible
};
var com_babylonhx_NodeCache = function() {
};
$hxClasses["com.babylonhx.NodeCache"] = com_babylonhx_NodeCache;
com_babylonhx_NodeCache.__name__ = true;
com_babylonhx_NodeCache.prototype = {
	__class__: com_babylonhx_NodeCache
};
var com_babylonhx_Node = $hx_exports.BABYLON.Node = function(name,scene) {
	this.__smartArrayFlags = [];
	this._parentRenderId = -1;
	this._currentRenderId = -1;
	this._isReady = true;
	this._isEnabled = true;
	this._childrenFlag = -1;
	this.animations = [];
	this.state = "";
	this.name = name;
	this.id = name;
	this._scene = scene;
	this._initCache();
};
$hxClasses["com.babylonhx.Node"] = com_babylonhx_Node;
com_babylonhx_Node.__name__ = true;
com_babylonhx_Node.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_Node.prototype = {
	getScene: function() {
		return this._scene;
	}
	,getEngine: function() {
		return this._scene._engine;
	}
	,getWorldMatrix: function() {
		return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,_initCache: function() {
		this._cache = new com_babylonhx_NodeCache();
		this._cache.parent = null;
	}
	,updateCache: function(force) {
		if(force == null) force = false;
		if(!force && this.isSynchronized(null)) return;
		this._cache.parent = this.parent;
		this._updateCache();
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
	}
	,_isSynchronized: function() {
		return true;
	}
	,_markSyncedWithParent: function() {
		this._parentRenderId = this.parent._currentRenderId;
	}
	,isSynchronizedWithParent: function() {
		if(this.parent == null) return true;
		if(this._parentRenderId != this.parent._currentRenderId) return false;
		return this.parent.isSynchronized(null);
	}
	,isSynchronized: function(updateCache) {
		if(updateCache == null) updateCache = false;
		var check = this.hasNewParent();
		check = check || !this.isSynchronizedWithParent();
		check = check || !this._isSynchronized();
		if(updateCache) this.updateCache(true);
		return !check;
	}
	,hasNewParent: function(update) {
		if(update == null) update = false;
		if(this._cache.parent == this.parent) return false;
		if(update) this._cache.parent = this.parent;
		return true;
	}
	,isReady: function() {
		return this._isReady;
	}
	,isEnabled: function() {
		if(!this._isEnabled) return false;
		if(this.parent != null) return this.parent.isEnabled();
		return true;
	}
	,setEnabled: function(value) {
		this._isEnabled = value;
	}
	,isDescendantOf: function(ancestor) {
		if(this.parent != null) {
			if(this.parent == ancestor) return true;
			return this.parent.isDescendantOf(ancestor);
		}
		return false;
	}
	,_getDescendants: function(list,results) {
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var index = _g1++;
			var item = list[index];
			if(item.isDescendantOf(this)) results.push(item);
		}
	}
	,getDescendants: function() {
		var results = [];
		this._getDescendants(this._scene.meshes,results);
		this._getDescendants(this._scene.lights,results);
		this._getDescendants(this._scene.cameras,results);
		return results;
	}
	,_setReady: function(state) {
		if(state == this._isReady) return;
		if(!state) {
			this._isReady = false;
			return;
		}
		this._isReady = true;
		if(this.onReady != null) this.onReady(this);
	}
	,getAnimationByName: function(name) {
		var _g1 = 0;
		var _g = this.animations.length;
		while(_g1 < _g) {
			var i = _g1++;
			var animation = this.animations[i];
			if(animation.name == name) return animation;
		}
		return null;
	}
	,__class__: com_babylonhx_Node
};
var com_babylonhx_Scene = $hx_exports.BABYLON.Scene = function(engine) {
	this._uniqueIdCounter = 0;
	this._edgesRenderers = new com_babylonhx_tools_SmartArray(16);
	this._scaledVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._activeAnimatables = [];
	this._activeBones = 0;
	this._softwareSkinnedMeshes = new com_babylonhx_tools_SmartArray(32);
	this._activeSkeletons = new com_babylonhx_tools_SmartArray(32);
	this._activeParticleSystems = new com_babylonhx_tools_SmartArray(256);
	this._renderTargets = new com_babylonhx_tools_SmartArray(256);
	this._processedMaterials = new com_babylonhx_tools_SmartArray(256);
	this._activeMeshes = new com_babylonhx_tools_SmartArray(256);
	this._onAfterRenderCallbacks = [];
	this._onBeforeRenderCallbacks = [];
	this._pendingData = [];
	this._onReadyCallbacks = [];
	this._toBeDisposed = new com_babylonhx_tools_SmartArray(256);
	this._executeWhenReadyTimeoutId = -1;
	this._renderId = 0;
	this._animationStartDate = -1;
	this._animationRatio = 0;
	this._spritesDuration = 0;
	this._renderDuration = 0;
	this._particlesDuration = 0;
	this._renderTargetsDuration = 0;
	this._evaluateActiveMeshesDuration = 0;
	this._lastFrameDuration = 0;
	this._activeParticles = 0;
	this._activeIndices = 0;
	this._totalVertices = 0;
	this._proceduralTextures = [];
	this.proceduralTexturesEnabled = true;
	this._meshesForIntersections = new com_babylonhx_tools_SmartArray(256);
	this._actionManagers = [];
	this.reflectionProbes = [];
	this.probesEnabled = true;
	this.importedMeshesFiles = [];
	this.customRenderTargets = [];
	this.dumpNextRenderTargets = false;
	this.renderTargetsEnabled = true;
	this.postProcessesEnabled = true;
	this.gravity = new com_babylonhx_math_Vector3(0,-9.0,0);
	this._workerCollisions = false;
	this.collisionsEnabled = true;
	this.lensFlareSystems = [];
	this.lensFlaresEnabled = true;
	this.skeletons = [];
	this.skeletonsEnabled = true;
	this.layers = [];
	this.spriteManagers = [];
	this.spritesEnabled = true;
	this.particleSystems = [];
	this.particlesEnabled = true;
	this.textures = [];
	this.texturesEnabled = true;
	this.multiMaterials = [];
	this.materials = [];
	this._geometries = [];
	this.meshes = [];
	this.activeCameras = [];
	this.cameras = [];
	this.lights = [];
	this.lightsEnabled = true;
	this.shadowsEnabled = true;
	this.fogEnd = 1000.0;
	this.fogStart = 0;
	this.fogDensity = 0.1;
	this.fogColor = new com_babylonhx_math_Color3(0.2,0.2,0.2);
	this.fogMode = com_babylonhx_Scene.FOGMODE_NONE;
	this.fogEnabled = true;
	this.cameraToUseForPointers = null;
	this.constantlyUpdateMeshUnderPointer = false;
	this.animationsEnabled = true;
	this.forceShowBoundingBoxes = false;
	this.forcePointsCloud = false;
	this.forceWireframe = false;
	this.ambientColor = new com_babylonhx_math_Color3(0,0,0);
	this.clearColor = new com_babylonhx_math_Color3(0.2,0.2,0.2);
	this.autoClear = true;
	this._engine = engine;
	engine.scenes.push(this);
	this.defaultMaterial = new com_babylonhx_materials_StandardMaterial("default material",this);
	this._renderingManager = new com_babylonhx_rendering_RenderingManager(this);
	this.postProcessManager = new com_babylonhx_postprocess_PostProcessManager(this);
	this.postProcessRenderPipelineManager = new com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager();
	this._boundingBoxRenderer = new com_babylonhx_rendering_BoundingBoxRenderer(this);
	this._outlineRenderer = new com_babylonhx_rendering_OutlineRenderer(this);
	this.attachControl();
	this.simplificationQueue = new com_babylonhx_mesh_simplification_SimplificationQueue();
	this.set_workerCollisions(false);
};
$hxClasses["com.babylonhx.Scene"] = com_babylonhx_Scene;
com_babylonhx_Scene.__name__ = true;
com_babylonhx_Scene.prototype = {
	set_workerCollisions: function(enabled) {
		this._workerCollisions = enabled;
		if(this.collisionCoordinator != null) this.collisionCoordinator.destroy();
		this.collisionCoordinator = new com_babylonhx_collisions_CollisionCoordinatorLegacy();
		this.collisionCoordinator.init(this);
		return enabled;
	}
	,get_workerCollisions: function() {
		return this._workerCollisions;
	}
	,get_SelectionOctree: function() {
		return this._selectionOctree;
	}
	,get_meshUnderPointer: function() {
		return this._meshUnderPointer;
	}
	,get_pointerX: function() {
		return this._pointerX;
	}
	,get_pointerY: function() {
		return this._pointerY;
	}
	,getCachedMaterial: function() {
		return this._cachedMaterial;
	}
	,getBoundingBoxRenderer: function() {
		return this._boundingBoxRenderer;
	}
	,getOutlineRenderer: function() {
		return this._outlineRenderer;
	}
	,getEngine: function() {
		return this._engine;
	}
	,getTotalVertices: function() {
		return this._totalVertices;
	}
	,getActiveVertices: function() {
		return this._activeIndices;
	}
	,getActiveParticles: function() {
		return this._activeParticles;
	}
	,getActiveBones: function() {
		return this._activeBones;
	}
	,getLastFrameDuration: function() {
		return this._lastFrameDuration;
	}
	,getEvaluateActiveMeshesDuration: function() {
		return this._evaluateActiveMeshesDuration;
	}
	,getActiveMeshes: function() {
		return this._activeMeshes;
	}
	,getRenderTargetsDuration: function() {
		return this._renderTargetsDuration;
	}
	,getRenderDuration: function() {
		return this._renderDuration;
	}
	,getParticlesDuration: function() {
		return this._particlesDuration;
	}
	,getSpritesDuration: function() {
		return this._spritesDuration;
	}
	,getAnimationRatio: function() {
		return this._animationRatio;
	}
	,getRenderId: function() {
		return this._renderId;
	}
	,incrementRenderId: function() {
		this._renderId++;
	}
	,_updatePointerPosition: function(x,y) {
		this._pointerX = x;
		this._pointerY = y;
		if(this.cameraToUseForPointers != null) {
			this._pointerX = this._pointerX - (this.cameraToUseForPointers.viewport.x | 0) * this._engine.getRenderWidth();
			this._pointerY = this._pointerY - (this.cameraToUseForPointers.viewport.y | 0) * this._engine.getRenderHeight();
		}
	}
	,attachControl: function() {
		var _g = this;
		var spritePredicate = function(sprite) {
			return sprite.isPickable && sprite.actionManager != null && sprite.actionManager.get_hasPickTriggers();
		};
		this._onPointerMove = function(x,y) {
			_g._pointerX = x;
			_g._pointerY = y;
			if(_g.cameraToUseForPointers != null) {
				_g._pointerX = _g._pointerX - (_g.cameraToUseForPointers.viewport.x | 0) * _g._engine.getRenderWidth();
				_g._pointerY = _g._pointerY - (_g.cameraToUseForPointers.viewport.y | 0) * _g._engine.getRenderHeight();
			}
			var pickResult = _g.pick(_g._pointerX,_g._pointerY,function(mesh) {
				return mesh.get_isPickable() && mesh.isVisible && mesh.isReady() && (_g.constantlyUpdateMeshUnderPointer || mesh.actionManager != null);
			},false,_g.cameraToUseForPointers);
			if(pickResult.hit && pickResult.pickedMesh != null) {
				_g._meshUnderPointer = pickResult.pickedMesh;
				_g.setPointerOverMesh(pickResult.pickedMesh);
			} else {
				pickResult = _g.pickSprite(_g._pointerX,_g._pointerY,spritePredicate,false,_g.cameraToUseForPointers);
				if(pickResult.hit && pickResult.pickedSprite != null) {
				} else {
					_g.setPointerOverMesh(null);
					_g._meshUnderPointer = null;
				}
			}
			if(_g.onPointerMove != null) _g.onPointerMove(pickResult);
		};
		this._onPointerDown = function(x1,y1,button) {
			_g._pointerX = x1;
			_g._pointerY = y1;
			if(_g.cameraToUseForPointers != null) {
				_g._pointerX = _g._pointerX - (_g.cameraToUseForPointers.viewport.x | 0) * _g._engine.getRenderWidth();
				_g._pointerY = _g._pointerY - (_g.cameraToUseForPointers.viewport.y | 0) * _g._engine.getRenderHeight();
			}
			var predicate = null;
			if(_g.onPointerDown == null) predicate = function(mesh1) {
				return mesh1.get_isPickable() && mesh1.isVisible && mesh1.isReady() && mesh1.actionManager != null && mesh1.actionManager.get_hasPickTriggers();
			};
			var pickResult1 = _g.pick(_g._pointerX,_g._pointerY,predicate,false,_g.cameraToUseForPointers);
			if(pickResult1.hit) {
				if(pickResult1.pickedMesh.actionManager != null) {
					switch(button) {
					case 0:
						pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnLeftPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
						break;
					case 1:
						pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnCenterPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
						break;
					case 2:
						pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnRightPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
						break;
					}
					pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
				}
			}
			if(_g.onPointerDown != null) _g.onPointerDown(x1,y1,button,pickResult1);
			if(_g.spriteManagers.length > 0) {
				pickResult1 = _g.pickSprite(_g._pointerX,_g._pointerY,spritePredicate,false,_g.cameraToUseForPointers);
				if(pickResult1.hit && pickResult1.pickedSprite != null) {
					if(pickResult1.pickedSprite.actionManager != null) {
						switch(button) {
						case 0:
							pickResult1.pickedSprite.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnLeftPickTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromSprite(pickResult1.pickedSprite,_g));
							break;
						case 1:
							pickResult1.pickedSprite.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnCenterPickTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromSprite(pickResult1.pickedSprite,_g));
							break;
						case 2:
							pickResult1.pickedSprite.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnRightPickTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromSprite(pickResult1.pickedSprite,_g));
							break;
						}
						pickResult1.pickedSprite.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPickTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromSprite(pickResult1.pickedSprite,_g));
					}
				}
			}
		};
		this._onPointerUp = function(x2,y2,button1) {
			var predicate1 = null;
			_g._pointerX = x2;
			_g._pointerY = y2;
			if(_g.cameraToUseForPointers != null) {
				_g._pointerX = _g._pointerX - (_g.cameraToUseForPointers.viewport.x | 0) * _g._engine.getRenderWidth();
				_g._pointerY = _g._pointerY - (_g.cameraToUseForPointers.viewport.y | 0) * _g._engine.getRenderHeight();
			}
			if(_g.onPointerUp == null) predicate1 = function(mesh2) {
				return mesh2.get_isPickable() && mesh2.isVisible && mesh2.isReady() && mesh2.actionManager != null && mesh2.actionManager.hasSpecificTrigger(com_babylonhx_actions_ActionManager.OnPickUpTrigger);
			};
			var pickResult2 = _g.pick(_g._pointerX,_g._pointerY,predicate1,false,_g.cameraToUseForPointers);
			if(pickResult2.hit) {
				if(pickResult2.pickedMesh.actionManager != null) pickResult2.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPickUpTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult2.pickedMesh));
			}
			if(_g.onPointerUp != null) _g.onPointerUp(x2,y2,button1,pickResult2);
			if(_g.spriteManagers.length > 0) {
				pickResult2 = _g.pickSprite(_g._pointerX,_g._pointerY,spritePredicate,false,_g.cameraToUseForPointers);
				if(pickResult2.hit && pickResult2.pickedSprite != null) {
					if(pickResult2.pickedSprite.actionManager != null) pickResult2.pickedSprite.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPickUpTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromSprite(pickResult2.pickedSprite,_g));
				}
			}
		};
		this._onKeyDown = function(keycode) {
			if(_g.actionManager != null) _g.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnKeyDownTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromScene(_g,keycode));
		};
		this._onKeyUp = function(keycode1) {
			if(_g.actionManager != null) _g.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnKeyUpTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromScene(_g,keycode1));
		};
		com_babylonhx_Engine.mouseDown.push(this._onPointerDown);
		com_babylonhx_Engine.mouseUp.push(this._onPointerUp);
		com_babylonhx_Engine.mouseMove.push(this._onPointerMove);
		com_babylonhx_Engine.keyDown.push(this._onKeyDown);
		com_babylonhx_Engine.keyUp.push(this._onKeyUp);
	}
	,detachControl: function() {
		var x = this._onPointerDown;
		HxOverrides.remove(com_babylonhx_Engine.mouseDown,x);
		var x1 = this._onPointerUp;
		HxOverrides.remove(com_babylonhx_Engine.mouseUp,x1);
		var x2 = this._onPointerMove;
		HxOverrides.remove(com_babylonhx_Engine.mouseMove,x2);
		var x3 = this._onKeyDown;
		HxOverrides.remove(com_babylonhx_Engine.keyDown,x3);
		var x4 = this._onKeyUp;
		HxOverrides.remove(com_babylonhx_Engine.keyUp,x4);
	}
	,isReady: function() {
		if(this._pendingData.length > 0) return false;
		var _g1 = 0;
		var _g = this._geometries.length;
		while(_g1 < _g) {
			var index = _g1++;
			var geometry = this._geometries[index];
			if(geometry.delayLoadState == 2) return false;
		}
		var _g11 = 0;
		var _g2 = this.meshes.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			var mesh = this.meshes[index1];
			if(!mesh.isReady()) return false;
			var mat = mesh.get_material();
			if(mat != null) {
				if(!mat.isReady(mesh)) return false;
			}
		}
		return true;
	}
	,resetCachedMaterial: function() {
		this._cachedMaterial = null;
	}
	,registerBeforeRender: function(func) {
		this._onBeforeRenderCallbacks.push(func);
	}
	,unregisterBeforeRender: function(func) {
		HxOverrides.remove(this._onBeforeRenderCallbacks,func);
	}
	,registerAfterRender: function(func) {
		this._onAfterRenderCallbacks.push(func);
	}
	,unregisterAfterRender: function(func) {
		HxOverrides.remove(this._onAfterRenderCallbacks,func);
	}
	,_addPendingData: function(data) {
		this._pendingData.push(data);
	}
	,_removePendingData: function(data) {
		var x = data;
		HxOverrides.remove(this._pendingData,x);
	}
	,getWaitingItemsCount: function() {
		return this._pendingData.length;
	}
	,executeWhenReady: function(func) {
		this._onReadyCallbacks.push(func);
		if(this._executeWhenReadyTimeoutId != -1) return;
		this._executeWhenReadyTimeoutId = 1;
		com_babylonhx_tools_Tools.delay($bind(this,this._checkIsReady),150);
	}
	,_checkIsReady: function() {
		if(this.isReady()) {
			var _g = 0;
			var _g1 = this._onReadyCallbacks;
			while(_g < _g1.length) {
				var func = _g1[_g];
				++_g;
				func();
			}
			this._onReadyCallbacks = [];
			this._executeWhenReadyTimeoutId = -1;
			return;
		}
		this._executeWhenReadyTimeoutId = 1;
		com_babylonhx_tools_Tools.delay($bind(this,this._checkIsReady),150);
	}
	,beginAnimation: function(target,from,to,loop,speedRatio,onAnimationEnd,animatable) {
		if(speedRatio == null) speedRatio = 1.0;
		if(loop == null) loop = false;
		this.stopAnimation(target);
		if(animatable == null) animatable = new com_babylonhx_animations_Animatable(this,target,from,to,loop,speedRatio,onAnimationEnd);
		if(target.animations != null) animatable.appendAnimations(target,target.animations);
		if(target.getAnimatables != null) {
			var animatables = target.getAnimatables();
			var _g1 = 0;
			var _g = animatables.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.beginAnimation(animatables[index],from,to,loop,speedRatio,onAnimationEnd,animatable);
			}
		}
		return animatable;
	}
	,beginDirectAnimation: function(target,animations,from,to,loop,speedRatio,onAnimationEnd) {
		if(speedRatio == null) speedRatio = 1.0;
		if(loop == null) loop = false;
		var animatable = new com_babylonhx_animations_Animatable(this,target,from,to,loop,speedRatio,onAnimationEnd,animations);
		return animatable;
	}
	,getAnimatableByTarget: function(target) {
		var _g1 = 0;
		var _g = this._activeAnimatables.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._activeAnimatables[index].target == target) return this._activeAnimatables[index];
		}
		return null;
	}
	,stopAnimation: function(target) {
		var animatable = this.getAnimatableByTarget(target);
		if(animatable != null) animatable.stop();
	}
	,_animate: function() {
		if(!this.animationsEnabled) return;
		if(this._animationStartDate == -1) this._animationStartDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		var now = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		var delay = now - this._animationStartDate;
		var _g1 = 0;
		var _g = this._activeAnimatables.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._activeAnimatables[index] != null) this._activeAnimatables[index]._animate(delay);
		}
	}
	,getViewMatrix: function() {
		return this._viewMatrix;
	}
	,getProjectionMatrix: function() {
		return this._projectionMatrix;
	}
	,getTransformMatrix: function() {
		return this._transformMatrix;
	}
	,setTransformMatrix: function(view,projection) {
		this._viewMatrix = view;
		this._projectionMatrix = projection;
		this._viewMatrix.multiplyToRef(this._projectionMatrix,this._transformMatrix);
	}
	,addMesh: function(newMesh) {
		newMesh.uniqueId = this._uniqueIdCounter++;
		var position = this.meshes.push(newMesh);
		this.collisionCoordinator.onMeshAdded(newMesh);
		if(this.onNewMeshAdded != null) this.onNewMeshAdded(newMesh,position,this);
	}
	,removeMesh: function(toRemove) {
		var index = HxOverrides.indexOf(this.meshes,toRemove,0);
		if(index != -1) this.meshes.splice(index,1);
		this.collisionCoordinator.onMeshRemoved(toRemove);
		if(this.onMeshRemoved != null) this.onMeshRemoved(toRemove);
		return index;
	}
	,removeSkeleton: function(toRemove) {
		var index = HxOverrides.indexOf(this.skeletons,toRemove,0);
		if(index != -1) this.skeletons.splice(index,1);
		return index;
	}
	,removeLight: function(toRemove) {
		var index = HxOverrides.indexOf(this.lights,toRemove,0);
		if(index != -1) this.lights.splice(index,1);
		if(this.onLightRemoved != null) this.onLightRemoved(toRemove);
		return index;
	}
	,removeCamera: function(toRemove) {
		var index = HxOverrides.indexOf(this.cameras,toRemove,0);
		if(index != -1) this.cameras.splice(index,1);
		index = HxOverrides.indexOf(this.activeCameras,toRemove,0);
		if(index != -1) this.activeCameras.splice(index,1);
		if(this.activeCamera == toRemove) {
			if(this.cameras.length > 0) this.activeCamera = this.cameras[0]; else this.activeCamera = null;
		}
		if(this.onCameraRemoved != null) this.onCameraRemoved(toRemove);
		return index;
	}
	,addLight: function(newLight) {
		newLight.uniqueId = this._uniqueIdCounter++;
		var position = this.lights.push(newLight);
		if(this.onNewLightAdded != null) this.onNewLightAdded(newLight,position,this);
	}
	,addCamera: function(newCamera) {
		newCamera.uniqueId = this._uniqueIdCounter++;
		var position = this.cameras.push(newCamera);
		if(this.onNewCameraAdded != null) this.onNewCameraAdded(newCamera,position,this);
	}
	,setActiveCameraByID: function(id) {
		var camera = this.getCameraByID(id);
		if(camera != null) {
			this.activeCamera = camera;
			return camera;
		}
		return null;
	}
	,setActiveCameraByName: function(name) {
		var camera = this.getCameraByName(name);
		if(camera != null) {
			this.activeCamera = camera;
			return camera;
		}
		return null;
	}
	,getMaterialByID: function(id) {
		var _g1 = 0;
		var _g = this.materials.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.materials[index].id == id) return this.materials[index];
		}
		return null;
	}
	,getMaterialByName: function(name) {
		var _g1 = 0;
		var _g = this.materials.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.materials[index].name == name) return this.materials[index];
		}
		return null;
	}
	,getLensFlareSystemByName: function(name) {
		var _g1 = 0;
		var _g = this.lensFlareSystems.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lensFlareSystems[index].name == name) return this.lensFlareSystems[index];
		}
		return null;
	}
	,getCameraByID: function(id) {
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.cameras[index].id == id) return this.cameras[index];
		}
		return null;
	}
	,getCameraByUniqueID: function(uniqueId) {
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.cameras[index].uniqueId == uniqueId) return this.cameras[index];
		}
		return null;
	}
	,getCameraByName: function(name) {
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.cameras[index].name == name) return this.cameras[index];
		}
		return null;
	}
	,getLightByName: function(name) {
		var _g1 = 0;
		var _g = this.lights.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lights[index].name == name) return this.lights[index];
		}
		return null;
	}
	,getLightByID: function(id) {
		var _g1 = 0;
		var _g = this.lights.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lights[index].id == id) return this.lights[index];
		}
		return null;
	}
	,getLightByUniqueID: function(uniqueId) {
		var _g1 = 0;
		var _g = this.lights.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lights[index].uniqueId == uniqueId) return this.lights[index];
		}
		return null;
	}
	,getGeometryByID: function(id) {
		var _g1 = 0;
		var _g = this._geometries.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._geometries[index].id == id) return this._geometries[index];
		}
		return null;
	}
	,pushGeometry: function(geometry,force) {
		if(force == null) force = false;
		if(!force && this.getGeometryByID(geometry.id) != null) return false;
		this.collisionCoordinator.onGeometryAdded(geometry);
		this._geometries.push(geometry);
		if(this.onGeometryAdded != null) this.onGeometryAdded(geometry);
		return true;
	}
	,removeGeometry: function(geometry) {
		var index = HxOverrides.indexOf(this._geometries,geometry,0);
		if(index > -1) {
			this._geometries.splice(index,1);
			this.collisionCoordinator.onGeometryDeleted(geometry);
			if(this.onGeometryRemoved != null) this.onGeometryRemoved(geometry);
			return true;
		}
		return false;
	}
	,getGeometries: function() {
		return this._geometries;
	}
	,getMeshByID: function(id) {
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.meshes[index].id == id) return this.meshes[index];
		}
		return null;
	}
	,getMeshByUniqueID: function(uniqueId) {
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.meshes[index].uniqueId == uniqueId) return this.meshes[index];
		}
		return null;
	}
	,getLastMeshByID: function(id) {
		var index = this.meshes.length - 1;
		while(index >= 0) {
			if(this.meshes[index].id == id) return this.meshes[index];
			--index;
		}
		return null;
	}
	,getLastEntryByID: function(id) {
		var index = this.meshes.length - 1;
		while(index >= 0) {
			if(this.meshes[index].id == id) return this.meshes[index];
			--index;
		}
		index = this.cameras.length - 1;
		while(index >= 0) {
			if(this.cameras[index].id == id) return this.cameras[index];
			--index;
		}
		index = this.lights.length - 1;
		while(index >= 0) {
			if(this.lights[index].id == id) return this.lights[index];
			--index;
		}
		return null;
	}
	,getNodeByID: function(id) {
		var mesh = this.getMeshByID(id);
		if(mesh != null) return mesh;
		var light = this.getLightByID(id);
		if(light != null) return light;
		return this.getCameraByID(id);
	}
	,getNodeByName: function(name) {
		var mesh = this.getMeshByName(name);
		if(mesh != null) return mesh;
		var light = this.getLightByName(name);
		if(light != null) return light;
		return this.getCameraByName(name);
	}
	,getMeshByName: function(name) {
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.meshes[index].name == name) return this.meshes[index];
		}
		return null;
	}
	,getLastSkeletonByID: function(id) {
		var index = this.skeletons.length - 1;
		while(index >= 0) {
			if(this.skeletons[index].id == id) return this.skeletons[index];
			--index;
		}
		return null;
	}
	,getSkeletonById: function(id) {
		var _g1 = 0;
		var _g = this.skeletons.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.skeletons[index].id == id) return this.skeletons[index];
		}
		return null;
	}
	,getSkeletonByName: function(name) {
		var _g1 = 0;
		var _g = this.skeletons.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.skeletons[index].name == name) return this.skeletons[index];
		}
		return null;
	}
	,isActiveMesh: function(mesh) {
		return this._activeMeshes.indexOf(mesh) != -1;
	}
	,_evaluateSubMesh: function(subMesh,mesh) {
		if(mesh.alwaysSelectAsActiveMesh || mesh.subMeshes.length == 1 || subMesh._boundingInfo.isInFrustum(this._frustumPlanes)) {
			com_babylonhx_Scene._eSMMaterial = subMesh.getMaterial();
			if(mesh.showSubMeshesBoundingBox) this._boundingBoxRenderer.renderList.push(subMesh._boundingInfo.boundingBox);
			if(com_babylonhx_Scene._eSMMaterial != null) {
				if(com_babylonhx_Scene._eSMMaterial.getRenderTargetTextures != null) {
					if(this._processedMaterials.indexOf(com_babylonhx_Scene._eSMMaterial) == -1) {
						this._processedMaterials.push(com_babylonhx_Scene._eSMMaterial);
						this._renderTargets.concatSmartArray(com_babylonhx_Scene._eSMMaterial.getRenderTargetTextures());
					}
				}
				this._activeIndices += subMesh.verticesCount;
				this._renderingManager.dispatch(subMesh);
			}
		}
	}
	,_evaluateActiveMeshes: function() {
		this.activeCamera._activeMeshes.reset();
		this._activeMeshes.reset();
		this._renderingManager.reset();
		this._processedMaterials.reset();
		this._activeParticleSystems.reset();
		this._activeSkeletons.reset();
		this._softwareSkinnedMeshes.reset();
		this._boundingBoxRenderer.reset();
		this._edgesRenderers.reset();
		if(this._frustumPlanes == null) this._frustumPlanes = com_babylonhx_math_Frustum.GetPlanes(this._transformMatrix); else com_babylonhx_math_Frustum.GetPlanesToRef(this._transformMatrix,this._frustumPlanes);
		com_babylonhx_Scene._activeMeshes_ = null;
		var len = -1;
		if(this._selectionOctree != null) {
			var selection = this._selectionOctree.select(this._frustumPlanes,null);
			com_babylonhx_Scene._activeMeshes_ = selection.data;
			len = selection.length;
		} else {
			len = this.meshes.length;
			com_babylonhx_Scene._activeMeshes_ = this.meshes;
		}
		var _g = 0;
		while(_g < len) {
			var meshIndex = _g++;
			com_babylonhx_Scene._activeMesh_ = com_babylonhx_Scene._activeMeshes_[meshIndex];
			if(com_babylonhx_Scene._activeMesh_.get_isBlocked()) continue;
			this._totalVertices += com_babylonhx_Scene._activeMesh_.getTotalVertices();
			if(!com_babylonhx_Scene._activeMesh_.isReady() || !com_babylonhx_Scene._activeMesh_.isEnabled()) continue;
			com_babylonhx_Scene._activeMesh_.computeWorldMatrix();
			if(com_babylonhx_Scene._activeMesh_.actionManager != null && com_babylonhx_Scene._activeMesh_.actionManager.hasSpecificTriggers([com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger,com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger])) this._meshesForIntersections.pushNoDuplicate(com_babylonhx_Scene._activeMesh_);
			var meshLOD = com_babylonhx_Scene._activeMesh_.getLOD(this.activeCamera);
			if(meshLOD == null) continue;
			com_babylonhx_Scene._activeMesh_._preActivate();
			if(com_babylonhx_Scene._activeMesh_.alwaysSelectAsActiveMesh || com_babylonhx_Scene._activeMesh_.isVisible && com_babylonhx_Scene._activeMesh_.get_visibility() > 0 && (com_babylonhx_Scene._activeMesh_.layerMask & this.activeCamera.layerMask) != 0 && com_babylonhx_Scene._activeMesh_.isInFrustum(this._frustumPlanes)) {
				this._activeMeshes.push(com_babylonhx_Scene._activeMesh_);
				this.activeCamera._activeMeshes.push(com_babylonhx_Scene._activeMesh_);
				com_babylonhx_Scene._activeMesh_._activate(this._renderId);
				this._activeMesh(meshLOD);
			}
		}
		if(this.particlesEnabled) {
			var _g1 = 0;
			var _g2 = this.particleSystems.length;
			while(_g1 < _g2) {
				var particleIndex = _g1++;
				var particleSystem = this.particleSystems[particleIndex];
				if(!particleSystem._started) continue;
				if(particleSystem.emitter.position == null || particleSystem.emitter != null && particleSystem.emitter.isEnabled()) {
					this._activeParticleSystems.push(particleSystem);
					particleSystem.animate();
				}
			}
		}
	}
	,_activeMesh: function(mesh) {
		if(mesh.get_skeleton() != null && this.skeletonsEnabled) {
			this._activeSkeletons.pushNoDuplicate(mesh.get_skeleton());
			if(!mesh.computeBonesUsingShaders) this._softwareSkinnedMeshes.pushNoDuplicate(mesh);
		}
		if(mesh.showBoundingBox || this.forceShowBoundingBoxes) this._boundingBoxRenderer.renderList.push(mesh.getBoundingInfo().boundingBox);
		if(mesh._edgesRenderer != null) this._edgesRenderers.push(mesh._edgesRenderer);
		if(mesh != null && mesh.subMeshes != null) {
			var len = -1;
			var subMeshes = null;
			if(mesh._submeshesOctree != null && mesh.useOctreeForRenderingSelection) {
				var intersections = mesh._submeshesOctree.select(this._frustumPlanes,null);
				len = intersections.length;
				subMeshes = intersections.data;
			} else {
				subMeshes = mesh.subMeshes;
				len = subMeshes.length;
			}
			var _g = 0;
			while(_g < len) {
				var subIndex = _g++;
				var subMesh = subMeshes[subIndex];
				if(mesh.alwaysSelectAsActiveMesh || mesh.subMeshes.length == 1 || subMesh._boundingInfo.isInFrustum(this._frustumPlanes)) {
					com_babylonhx_Scene._eSMMaterial = subMesh.getMaterial();
					if(mesh.showSubMeshesBoundingBox) this._boundingBoxRenderer.renderList.push(subMesh._boundingInfo.boundingBox);
					if(com_babylonhx_Scene._eSMMaterial != null) {
						if(com_babylonhx_Scene._eSMMaterial.getRenderTargetTextures != null) {
							if(this._processedMaterials.indexOf(com_babylonhx_Scene._eSMMaterial) == -1) {
								this._processedMaterials.push(com_babylonhx_Scene._eSMMaterial);
								this._renderTargets.concatSmartArray(com_babylonhx_Scene._eSMMaterial.getRenderTargetTextures());
							}
						}
						this._activeIndices += subMesh.verticesCount;
						this._renderingManager.dispatch(subMesh);
					}
				}
			}
		}
	}
	,updateTransformMatrix: function(force) {
		if(force == null) force = false;
		this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(force));
	}
	,_renderForCamera: function(camera) {
		var engine = this._engine;
		this.activeCamera = camera;
		if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
		engine.setViewport(this.activeCamera.viewport,null,null);
		this._renderId++;
		this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(false));
		if(this.beforeCameraRender != null) this.beforeCameraRender(this.activeCamera);
		var beforeEvaluateActiveMeshesDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		this._evaluateActiveMeshes();
		this._evaluateActiveMeshesDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeEvaluateActiveMeshesDate;
		var _g1 = 0;
		var _g = this._activeSkeletons.length;
		while(_g1 < _g) {
			var skeletonIndex = _g1++;
			var skeleton = this._activeSkeletons.data[skeletonIndex];
			skeleton.prepare();
		}
		var _g11 = 0;
		var _g2 = this._softwareSkinnedMeshes.length;
		while(_g11 < _g2) {
			var softwareSkinnedMeshIndex = _g11++;
			var mesh = this._softwareSkinnedMeshes.data[softwareSkinnedMeshIndex];
			mesh.applySkeleton(mesh.get_skeleton());
		}
		var beforeRenderTargetDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		if(this.renderTargetsEnabled) {
			var _g12 = 0;
			var _g3 = this._renderTargets.length;
			while(_g12 < _g3) {
				var renderIndex = _g12++;
				var renderTarget = this._renderTargets.data[renderIndex];
				if(renderTarget._shouldRender()) {
					this._renderId++;
					var hasSpecialRenderTargetCamera = renderTarget.activeCamera != null && renderTarget.activeCamera != this.activeCamera;
					renderTarget.render(hasSpecialRenderTargetCamera);
				}
			}
			this._renderId++;
		}
		if(this._renderTargets.length > 0) {
			engine._currentRenderTarget = null;
			lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
			engine.setViewport(engine._cachedViewport,null,null);
			engine.wipeCaches();
		}
		this._renderTargetsDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeRenderTargetDate;
		this.postProcessManager._prepareFrame();
		var beforeRenderDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		if(this.layers.length > 0) {
			engine._depthCullingState.set_depthTest(false);
			var layer = null;
			var _g13 = 0;
			var _g4 = this.layers.length;
			while(_g13 < _g4) {
				var layerIndex = _g13++;
				layer = this.layers[layerIndex];
				if(layer.isBackground) layer.render();
			}
			engine._depthCullingState.set_depthTest(true);
		}
		this._renderingManager.render(null,null,true,true);
		this._boundingBoxRenderer.render();
		var _g14 = 0;
		var _g5 = this._edgesRenderers.length;
		while(_g14 < _g5) {
			var edgesRendererIndex = _g14++;
			this._edgesRenderers.data[edgesRendererIndex].render();
		}
		if(this.lensFlaresEnabled) {
			var _g15 = 0;
			var _g6 = this.lensFlareSystems.length;
			while(_g15 < _g6) {
				var lensFlareSystemIndex = _g15++;
				var lensFlareSystem = this.lensFlareSystems[lensFlareSystemIndex];
				if((camera.layerMask & lensFlareSystem.layerMask) != 0) lensFlareSystem.render();
			}
		}
		if(this.layers.length > 0) {
			engine._depthCullingState.set_depthTest(false);
			var _g16 = 0;
			var _g7 = this.layers.length;
			while(_g16 < _g7) {
				var layerIndex1 = _g16++;
				var layer1 = this.layers[layerIndex1];
				if(!layer1.isBackground) layer1.render();
			}
			engine._depthCullingState.set_depthTest(true);
		}
		this._renderDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeRenderDate;
		this.postProcessManager._finalizeFrame(camera.isIntermediate);
		this.activeCamera._updateFromScene();
		this._renderTargets.reset();
		if(this.afterCameraRender != null) this.afterCameraRender(this.activeCamera);
	}
	,_processSubCameras: function(camera) {
		if(camera.subCameras.length == 0 && camera._rigCameras.length == 0) {
			this._renderForCamera(camera);
			return;
		}
		var _g1 = 0;
		var _g = camera.subCameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			this._renderForCamera(camera.subCameras[index]);
		}
		var _g11 = 0;
		var _g2 = camera._rigCameras.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			this._renderForCamera(camera._rigCameras[index1]);
		}
		this.activeCamera = camera;
		this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(false));
		this.activeCamera._updateFromScene();
	}
	,_checkIntersections: function() {
		var _g1 = 0;
		var _g = this._meshesForIntersections.length;
		while(_g1 < _g) {
			var index = _g1++;
			var sourceMesh = this._meshesForIntersections.data[index];
			var _g3 = 0;
			var _g2 = sourceMesh.actionManager.actions.length;
			while(_g3 < _g2) {
				var actionIndex = _g3++;
				var action = sourceMesh.actionManager.actions[actionIndex];
				if(action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger || action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger) {
					var otherMesh = action.getTriggerParameter();
					var areIntersecting = otherMesh.intersectsMesh(sourceMesh,false);
					var currentIntersectionInProgress = HxOverrides.indexOf(sourceMesh._intersectionsInProgress,otherMesh,0);
					if(areIntersecting && currentIntersectionInProgress == -1 && action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger) {
						action._executeCurrent(com_babylonhx_actions_ActionEvent.CreateNew(sourceMesh));
						sourceMesh._intersectionsInProgress.push(otherMesh);
					} else if(!areIntersecting && currentIntersectionInProgress > -1 && action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger) {
						action._executeCurrent(com_babylonhx_actions_ActionEvent.CreateNew(sourceMesh));
						var indexOfOther = HxOverrides.indexOf(sourceMesh._intersectionsInProgress,otherMesh,0);
						if(indexOfOther > -1) sourceMesh._intersectionsInProgress.splice(indexOfOther,1);
					}
				}
			}
		}
	}
	,render: function() {
		this._particlesDuration = 0;
		this._spritesDuration = 0;
		this._activeParticles = 0;
		this._renderDuration = 0;
		this._renderTargetsDuration = 0;
		this._evaluateActiveMeshesDuration = 0;
		this._totalVertices = 0;
		this._activeIndices = 0;
		this._activeBones = 0;
		this._engine._drawCalls = 0;
		this._meshesForIntersections.reset();
		this._cachedMaterial = null;
		if(this.actionManager != null) this.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnEveryFrameTrigger,null);
		if(!this.simplificationQueue.running) this.simplificationQueue.executeNext();
		var deltaTime = Math.max(com_babylonhx_Scene.MinDeltaTime,Math.min(this._engine.deltaTime,com_babylonhx_Scene.MaxDeltaTime));
		this._animationRatio = deltaTime * 0.06;
		this._animate();
		if(this._physicsEngine != null) this._physicsEngine._runOneStep(deltaTime / 1000.0);
		if(this.beforeRender != null) this.beforeRender();
		var _g = 0;
		var _g1 = this._onBeforeRenderCallbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		var engine = this._engine;
		var currentActiveCamera = this.activeCamera;
		if(this.renderTargetsEnabled) {
			var _g11 = 0;
			var _g2 = this.customRenderTargets.length;
			while(_g11 < _g2) {
				var customIndex = _g11++;
				var renderTarget = this.customRenderTargets[customIndex];
				if(renderTarget._shouldRender()) {
					this._renderId++;
					if(renderTarget.activeCamera != null) this.activeCamera = renderTarget.activeCamera; else this.activeCamera = this.activeCamera;
					if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
					engine.setViewport(this.activeCamera.viewport,null,null);
					this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(false));
					renderTarget.render(currentActiveCamera != this.activeCamera);
				}
			}
			this._renderId++;
		}
		if(this.customRenderTargets.length > 0) {
			engine._currentRenderTarget = null;
			lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
			engine.setViewport(engine._cachedViewport,null,null);
			engine.wipeCaches();
		}
		this.activeCamera = currentActiveCamera;
		if(this.proceduralTexturesEnabled) {
			var _g12 = 0;
			var _g3 = this._proceduralTextures.length;
			while(_g12 < _g3) {
				var proceduralIndex = _g12++;
				var proceduralTexture = this._proceduralTextures[proceduralIndex];
				if(proceduralTexture._shouldRender()) proceduralTexture.render();
			}
		}
		this._engine.clear(this.clearColor,this.autoClear || this.forceWireframe || this.forcePointsCloud,true);
		if(this.shadowsEnabled) {
			var _g13 = 0;
			var _g4 = this.lights.length;
			while(_g13 < _g4) {
				var lightIndex = _g13++;
				var light = this.lights[lightIndex];
				var shadowGenerator = light.getShadowGenerator();
				if(light.isEnabled() && shadowGenerator != null && (function($this) {
					var $r;
					var _this = shadowGenerator.getShadowMap().getScene().textures;
					var x = shadowGenerator.getShadowMap();
					$r = HxOverrides.indexOf(_this,x,0);
					return $r;
				}(this)) != -1) this._renderTargets.push(shadowGenerator.getShadowMap());
			}
		}
		if(this._depthRenderer != null) this._renderTargets.push(this._depthRenderer.getDepthMap());
		this.postProcessRenderPipelineManager.update();
		if(this.activeCameras.length > 0) {
			var currentRenderId = this._renderId;
			var _g14 = 0;
			var _g5 = this.activeCameras.length;
			while(_g14 < _g5) {
				var cameraIndex = _g14++;
				this._renderId = currentRenderId;
				this._processSubCameras(this.activeCameras[cameraIndex]);
			}
		} else {
			if(this.activeCamera == null) throw new js__$Boot_HaxeError("No camera defined");
			this._processSubCameras(this.activeCamera);
		}
		this._checkIntersections();
		if(this.afterRender != null) this.afterRender();
		var _g6 = 0;
		var _g15 = this._onAfterRenderCallbacks;
		while(_g6 < _g15.length) {
			var callback1 = _g15[_g6];
			++_g6;
			callback1();
		}
		var _g16 = 0;
		var _g7 = this._toBeDisposed.length;
		while(_g16 < _g7) {
			var index = _g16++;
			this._toBeDisposed.data[index].dispose();
			this._toBeDisposed.data[index] = null;
		}
		this._toBeDisposed.reset();
		if(this.dumpNextRenderTargets) this.dumpNextRenderTargets = false;
	}
	,enableDepthRenderer: function() {
		if(this._depthRenderer != null) return this._depthRenderer;
		this._depthRenderer = new com_babylonhx_rendering_DepthRenderer(this);
		return this._depthRenderer;
	}
	,disableDepthRenderer: function() {
		if(this._depthRenderer == null) return;
		this._depthRenderer.dispose();
		this._depthRenderer = null;
	}
	,dispose: function() {
		this.beforeRender = null;
		this.afterRender = null;
		this.skeletons = [];
		this._boundingBoxRenderer.dispose();
		if(this._depthRenderer != null) this._depthRenderer.dispose();
		if(this.onDispose != null) this.onDispose();
		this.detachControl();
		this._onBeforeRenderCallbacks = [];
		this._onAfterRenderCallbacks = [];
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			this.cameras[index].detachControl(this);
		}
		while(this.lights.length > 0) this.lights[0].dispose();
		while(this.meshes.length > 0) this.meshes[0].dispose(true);
		while(this.cameras.length > 0) this.cameras[0].dispose();
		while(this.materials.length > 0) this.materials[0].dispose();
		while(this.particleSystems.length > 0) this.particleSystems[0].dispose(null);
		while(this.spriteManagers.length > 0) this.spriteManagers[0].dispose();
		while(this.layers.length > 0) this.layers[0].dispose();
		while(this.textures.length > 0) this.textures[0].dispose();
		this.postProcessManager.dispose();
		if(this._physicsEngine != null) this.disablePhysicsEngine();
		HxOverrides.remove(this._engine.scenes,this);
		this._engine.wipeCaches();
	}
	,_getNewPosition: function(position,velocity,collider,maximumRetry,finalPosition,excludedMesh) {
		position.divideToRef(collider.radius,this._scaledPosition);
		velocity.divideToRef(collider.radius,this._scaledVelocity);
		collider.retry = 0;
		collider.initialVelocity = this._scaledVelocity;
		collider.initialPosition = this._scaledPosition;
		this._collideWithWorld(this._scaledPosition,this._scaledVelocity,collider,maximumRetry,finalPosition,excludedMesh);
		finalPosition.multiplyInPlace(collider.radius);
	}
	,_collideWithWorld: function(position,velocity,collider,maximumRetry,finalPosition,excludedMesh) {
		var closeDistance = com_babylonhx_Engine.CollisionsEpsilon * 10.0;
		if(collider.retry >= maximumRetry) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider._initialize(position,velocity,closeDistance);
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this.meshes[index];
			if(mesh.isEnabled() && mesh.get_checkCollisions() && mesh.subMeshes != null && mesh != excludedMesh) mesh._checkCollision(collider);
		}
		if(!collider.collisionFound) {
			finalPosition.x = position.x + velocity.x;
			finalPosition.y = position.y + velocity.y;
			finalPosition.z = position.z + velocity.z;
			return;
		}
		if(velocity.x != 0 || velocity.y != 0 || velocity.z != 0) {
			position.addToRef(velocity,collider._destinationPoint);
			velocity.scaleInPlace(collider.nearestDistance / Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z));
			collider.basePoint.addToRef(velocity,position);
			position.subtractToRef(collider.intersectionPoint,collider._slidePlaneNormal);
			collider._slidePlaneNormal.normalize();
			collider._slidePlaneNormal.scaleToRef(collider.epsilon,collider._displacementVector);
			position.addInPlace(collider._displacementVector);
			collider.intersectionPoint.addInPlace(collider._displacementVector);
			collider._slidePlaneNormal.scaleInPlace(com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal(collider.intersectionPoint,collider._slidePlaneNormal,collider._destinationPoint));
			collider._destinationPoint.subtractInPlace(collider._slidePlaneNormal);
			collider._destinationPoint.subtractToRef(collider.intersectionPoint,velocity);
		}
		if(Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z) <= closeDistance) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider.retry++;
		this._collideWithWorld(position,velocity,collider,maximumRetry,finalPosition,excludedMesh);
	}
	,getWorldExtends: function() {
		var min = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		var max = new com_babylonhx_math_Vector3(-Infinity,-Infinity,-Infinity);
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this.meshes[index];
			mesh.computeWorldMatrix(true);
			var minBox = mesh.getBoundingInfo().boundingBox.minimumWorld;
			var maxBox = mesh.getBoundingInfo().boundingBox.maximumWorld;
			if(minBox.x < min.x) min.x = minBox.x;
			if(minBox.y < min.y) min.y = minBox.y;
			if(minBox.z < min.z) min.z = minBox.z;
			if(minBox.x > max.x) max.x = minBox.x;
			if(minBox.y > max.y) max.y = minBox.y;
			if(minBox.z > max.z) max.z = minBox.z;
			if(maxBox.x < min.x) min.x = maxBox.x;
			if(maxBox.y < min.y) min.y = maxBox.y;
			if(maxBox.z < min.z) min.z = maxBox.z;
			if(maxBox.x > max.x) max.x = maxBox.x;
			if(maxBox.y > max.y) max.y = maxBox.y;
			if(maxBox.z > max.z) max.z = maxBox.z;
		}
		return { min : min, max : max};
	}
	,createOrUpdateSelectionOctree: function(maxCapacity,maxDepth) {
		if(maxDepth == null) maxDepth = 2;
		if(maxCapacity == null) maxCapacity = 64;
		if(this._selectionOctree == null) this._selectionOctree = new com_babylonhx_culling_octrees_Octree(com_babylonhx_culling_octrees_Octree.CreationFuncForMeshes,maxCapacity,maxDepth);
		var worldExtends = this.getWorldExtends();
		this._selectionOctree.update(worldExtends.min,worldExtends.max,this.meshes);
		return this._selectionOctree;
	}
	,createPickingRay: function(x,y,world,camera,cameraViewSpace) {
		if(cameraViewSpace == null) cameraViewSpace = false;
		var engine = this._engine;
		if(camera == null) {
			if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
			camera = this.activeCamera;
		}
		var cameraViewport = camera.viewport;
		var viewport = cameraViewport.toGlobal(engine);
		x = x / this._engine.getHardwareScalingLevel() - viewport.x;
		y = y / this._engine.getHardwareScalingLevel() - (this._engine.getRenderHeight() - viewport.y - viewport.height);
		return com_babylonhx_math_Ray.CreateNew(x,y,viewport.width,viewport.height,world != null?world:com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0),cameraViewSpace?com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0):camera.getViewMatrix(),camera.getProjectionMatrix(false));
	}
	,createPickingRayInCameraSpace: function(x,y,camera) {
		var engine = this._engine;
		if(camera == null) {
			if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
			camera = this.activeCamera;
		}
		var cameraViewport = camera.viewport;
		var viewport = cameraViewport.toGlobal(engine);
		var identity = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		x = x / this._engine.getHardwareScalingLevel() - viewport.x;
		y = y / this._engine.getHardwareScalingLevel() - (this._engine.getRenderHeight() - viewport.y - viewport.height);
		return com_babylonhx_math_Ray.CreateNew(x,y,viewport.width,viewport.height,identity,identity,camera.getProjectionMatrix(false));
	}
	,_internalPick: function(rayFunction,predicate,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var pickingInfo = null;
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var meshIndex = _g1++;
			var mesh = this.meshes[meshIndex];
			if(predicate != null) {
				if(!predicate(mesh)) continue;
			} else if(!mesh.isEnabled() || !mesh.isVisible || !mesh.get_isPickable()) continue;
			var world = mesh.getWorldMatrix();
			var ray = rayFunction(world);
			var result = mesh.intersects(ray,fastCheck);
			if(result == null || !result.hit) continue;
			if(!fastCheck && pickingInfo != null && result.distance >= pickingInfo.distance) continue;
			pickingInfo = result;
			if(fastCheck) break;
		}
		if(pickingInfo != null) return pickingInfo; else return new com_babylonhx_collisions_PickingInfo();
	}
	,_internalPickSprites: function(ray,predicate,fastCheck,camera) {
		if(fastCheck == null) fastCheck = false;
		var pickingInfo = new com_babylonhx_collisions_PickingInfo();
		if(camera == null) camera = this.activeCamera;
		if(this.spriteManagers.length > 0) {
			var _g1 = 0;
			var _g = this.spriteManagers.length;
			while(_g1 < _g) {
				var spriteIndex = _g1++;
				var spriteManager = this.spriteManagers[spriteIndex];
				if(!spriteManager.isPickable) continue;
				var result = spriteManager.intersects(ray,camera,predicate,fastCheck);
				if(result == null || !result.hit) continue;
				if(!fastCheck && pickingInfo != null && result.distance >= pickingInfo.distance) continue;
				pickingInfo = result;
				if(fastCheck) break;
			}
		}
		return pickingInfo;
	}
	,pick: function(x,y,predicate,fastCheck,camera) {
		if(fastCheck == null) fastCheck = false;
		var _g = this;
		return this._internalPick(function(world) {
			return _g.createPickingRay(x,y,world,camera);
		},predicate,fastCheck);
	}
	,pickSprite: function(x,y,predicate,fastCheck,camera) {
		if(fastCheck == null) fastCheck = false;
		return this._internalPickSprites(this.createPickingRayInCameraSpace(x,y,camera),predicate,fastCheck,camera);
	}
	,pickWithRay: function(ray,predicate,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var _g = this;
		return this._internalPick(function(world) {
			if(_g._pickWithRayInverseMatrix == null) _g._pickWithRayInverseMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
			world.invertToRef(_g._pickWithRayInverseMatrix);
			return com_babylonhx_math_Ray.Transform(ray,_g._pickWithRayInverseMatrix);
		},predicate,fastCheck);
	}
	,setPointerOverMesh: function(mesh) {
		if(this._pointerOverMesh == mesh) return;
		if(this._pointerOverMesh != null && this._pointerOverMesh.actionManager != null) this._pointerOverMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPointerOutTrigger,com_babylonhx_actions_ActionEvent.CreateNew(this._pointerOverMesh));
		this._pointerOverMesh = mesh;
		if(this._pointerOverMesh != null && this._pointerOverMesh.actionManager != null) this._pointerOverMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPointerOverTrigger,com_babylonhx_actions_ActionEvent.CreateNew(this._pointerOverMesh));
	}
	,getPointerOverMesh: function() {
		return this._pointerOverMesh;
	}
	,getPhysicsEngine: function() {
		return this._physicsEngine;
	}
	,enablePhysics: function(gravity,plugin) {
		if(this._physicsEngine != null) return true;
		this._physicsEngine = new com_babylonhx_physics_PhysicsEngine(plugin);
		if(!this._physicsEngine.isSupported()) {
			this._physicsEngine = null;
			return false;
		}
		this._physicsEngine._initialize(gravity);
		return true;
	}
	,disablePhysicsEngine: function() {
		if(this._physicsEngine == null) return;
		this._physicsEngine.dispose();
		this._physicsEngine = null;
	}
	,isPhysicsEnabled: function() {
		return this._physicsEngine != null;
	}
	,setGravity: function(gravity) {
		if(this._physicsEngine == null) return;
		this._physicsEngine._setGravity(gravity);
	}
	,createCompoundImpostor: function(parts,options) {
		if(parts.parts != null) {
			options = parts;
			parts = parts.parts;
		}
		if(this._physicsEngine == null) return null;
		var _g1 = 0;
		var _g = parts.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = parts[index].mesh;
			mesh._physicImpostor = parts[index].impostor;
			mesh._physicsMass = options.mass / parts.length;
			mesh._physicsFriction = options.friction;
			mesh._physicRestitution = options.restitution;
		}
		return this._physicsEngine._registerMeshesAsCompound(parts,options);
	}
	,deleteCompoundImpostor: function(compound) {
		var _g1 = 0;
		var _g = compound.parts.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = compound.parts[index].mesh;
			mesh._physicImpostor = 0;
			this._physicsEngine._unregisterMesh(mesh);
		}
	}
	,createDefaultCameraOrLight: function() {
		if(this.lights.length == 0) new com_babylonhx_lights_HemisphericLight("default light",new com_babylonhx_math_Vector3(0,1.0,0),this);
		if(this.activeCamera == null) {
			var camera = new com_babylonhx_cameras_FreeCamera("default camera",new com_babylonhx_math_Vector3(0,0,0),this);
			var worldExtends = this.getWorldExtends();
			var worldCenter = worldExtends.min.add(worldExtends.max.subtract(worldExtends.min).scale(0.5));
			camera.position = new com_babylonhx_math_Vector3(worldCenter.x,worldCenter.y,worldExtends.min.z - (worldExtends.max.z - worldExtends.min.z));
			camera.upVector.normalize();
			com_babylonhx_math_Matrix.LookAtLHToRef(camera.position,worldCenter,camera.upVector,camera._camMatrix);
			camera._camMatrix.invert();
			camera.rotation.x = Math.atan(camera._camMatrix.m[6] / camera._camMatrix.m[10]);
			com_babylonhx_cameras_TargetCamera.vDir = worldCenter.subtract(camera.position);
			if(com_babylonhx_cameras_TargetCamera.vDir.x >= 0.0) camera.rotation.y = -Math.atan(com_babylonhx_cameras_TargetCamera.vDir.z / com_babylonhx_cameras_TargetCamera.vDir.x) + Math.PI / 2.0; else camera.rotation.y = -Math.atan(com_babylonhx_cameras_TargetCamera.vDir.z / com_babylonhx_cameras_TargetCamera.vDir.x) - Math.PI / 2.0;
			camera.rotation.z = -Math.acos(com_babylonhx_math_Vector3.Dot(com_babylonhx_cameras_TargetCamera.zUpVector,camera.upVector));
			this.activeCamera = camera;
		}
	}
	,__class__: com_babylonhx_Scene
	,__properties__: {get_pointerY:"get_pointerY",get_pointerX:"get_pointerX",get_meshUnderPointer:"get_meshUnderPointer",get_SelectionOctree:"get_SelectionOctree",set_workerCollisions:"set_workerCollisions",get_workerCollisions:"get_workerCollisions"}
};
var com_babylonhx__$AlphaState = $hx_exports.BABYLON._AlphaState = function() {
	this._blendFunctionParameters = [];
	this._alphaBlend = false;
	this._isBlendFunctionParametersDirty = false;
	this._isAlphaBlendDirty = false;
};
$hxClasses["com.babylonhx._AlphaState"] = com_babylonhx__$AlphaState;
com_babylonhx__$AlphaState.__name__ = true;
com_babylonhx__$AlphaState.prototype = {
	get_isDirty: function() {
		return this._isAlphaBlendDirty || this._isBlendFunctionParametersDirty;
	}
	,get_alphaBlend: function() {
		return this._alphaBlend;
	}
	,set_alphaBlend: function(value) {
		if(this._alphaBlend == value) return value;
		this._alphaBlend = value;
		this._isAlphaBlendDirty = true;
		return value;
	}
	,setAlphaBlendFunctionParameters: function(value0,value1,value2,value3) {
		if(this._blendFunctionParameters[0] == value0 && this._blendFunctionParameters[1] == value1 && this._blendFunctionParameters[2] == value2 && this._blendFunctionParameters[3] == value3) return;
		this._blendFunctionParameters[0] = value0;
		this._blendFunctionParameters[1] = value1;
		this._blendFunctionParameters[2] = value2;
		this._blendFunctionParameters[3] = value3;
		this._isBlendFunctionParametersDirty = true;
	}
	,reset: function() {
		this._alphaBlend = false;
		this._blendFunctionParameters[0] = -1;
		this._blendFunctionParameters[1] = -1;
		this._blendFunctionParameters[2] = -1;
		this._blendFunctionParameters[3] = -1;
		this._isAlphaBlendDirty = true;
		this._isBlendFunctionParametersDirty = false;
	}
	,apply: function() {
		if(!this.get_isDirty()) return;
		if(this._isAlphaBlendDirty) {
			if(this._alphaBlend) lime_graphics_opengl_GL.context.enable(3042); else lime_graphics_opengl_GL.context.disable(3042);
			this._isAlphaBlendDirty = false;
		}
		if(this._isBlendFunctionParametersDirty) {
			lime_graphics_opengl_GL.context.blendFuncSeparate(this._blendFunctionParameters[0],this._blendFunctionParameters[1],this._blendFunctionParameters[2],this._blendFunctionParameters[3]);
			this._isBlendFunctionParametersDirty = false;
		}
	}
	,__class__: com_babylonhx__$AlphaState
	,__properties__: {set_alphaBlend:"set_alphaBlend",get_alphaBlend:"get_alphaBlend",get_isDirty:"get_isDirty"}
};
var com_babylonhx__$DepthCullingState = $hx_exports.BABYLON._DepthCullingState = function() {
	this._zOffset = 0.0;
	this._isZOffsetDirty = false;
	this._isCullDirty = false;
	this._isCullFaceDirty = false;
	this._isDepthFuncDirty = false;
	this._isDepthMaskDirty = false;
	this._isDepthTestDirty = false;
};
$hxClasses["com.babylonhx._DepthCullingState"] = com_babylonhx__$DepthCullingState;
com_babylonhx__$DepthCullingState.__name__ = true;
com_babylonhx__$DepthCullingState.prototype = {
	get_isDirty: function() {
		return this._isDepthFuncDirty || this._isDepthTestDirty || this._isDepthMaskDirty || this._isCullFaceDirty || this._isCullDirty || this._isZOffsetDirty;
	}
	,get_zOffset: function() {
		return this._zOffset;
	}
	,set_zOffset: function(value) {
		if(this._zOffset == value) return value;
		this._zOffset = value;
		this._isZOffsetDirty = true;
		return value;
	}
	,get_cullFace: function() {
		return this._cullFace;
	}
	,set_cullFace: function(value) {
		if(this._cullFace == value) return value;
		this._cullFace = value;
		this._isCullFaceDirty = true;
		return value;
	}
	,get_cull: function() {
		return this._cull;
	}
	,set_cull: function(value) {
		if(this._cull == value) return value;
		this._cull = value;
		this._isCullDirty = true;
		return value;
	}
	,get_depthFunc: function() {
		return this._depthFunc;
	}
	,set_depthFunc: function(value) {
		if(this._depthFunc == value) return value;
		this._depthFunc = value;
		this._isDepthFuncDirty = true;
		return value;
	}
	,get_depthMask: function() {
		return this._depthMask;
	}
	,set_depthMask: function(value) {
		if(this._depthMask == value) return value;
		this._depthMask = value;
		this._isDepthMaskDirty = true;
		return value;
	}
	,get_depthTest: function() {
		return this._depthTest;
	}
	,set_depthTest: function(value) {
		if(this._depthTest == value) return value;
		this._depthTest = value;
		this._isDepthTestDirty = true;
		return value;
	}
	,reset: function() {
		this._depthMask = true;
		this._depthTest = true;
		this._depthFunc = null;
		this._cull = null;
		this._cullFace = null;
		this._zOffset = 0;
		this._isDepthTestDirty = true;
		this._isDepthMaskDirty = true;
		this._isDepthFuncDirty = false;
		this._isCullFaceDirty = false;
		this._isCullDirty = false;
		this._isZOffsetDirty = false;
	}
	,apply: function() {
		if(this.get_isDirty()) {
			if(this._isCullDirty) {
				if(this.get_cull() != null && this.get_cull()) lime_graphics_opengl_GL.context.enable(2884); else lime_graphics_opengl_GL.context.disable(2884);
				this._isCullDirty = false;
			}
			if(this._isCullFaceDirty) {
				lime_graphics_opengl_GL.cullFace(this.get_cullFace());
				this._isCullFaceDirty = false;
			}
			if(this._isDepthMaskDirty) {
				lime_graphics_opengl_GL.depthMask(this.get_depthMask());
				this._isDepthMaskDirty = false;
			}
			if(this._isDepthTestDirty) {
				if(this.get_depthTest()) lime_graphics_opengl_GL.context.enable(2929); else lime_graphics_opengl_GL.context.disable(2929);
				this._isDepthTestDirty = false;
			}
			if(this._isDepthFuncDirty) {
				lime_graphics_opengl_GL.depthFunc(this.get_depthFunc());
				this._isDepthFuncDirty = false;
			}
			if(this._isZOffsetDirty) {
				if(this.get_zOffset() != 0) {
					lime_graphics_opengl_GL.context.enable(32823);
					lime_graphics_opengl_GL.polygonOffset(this.get_zOffset(),0);
				} else lime_graphics_opengl_GL.context.disable(32823);
				this._isZOffsetDirty = false;
			}
		}
	}
	,__class__: com_babylonhx__$DepthCullingState
	,__properties__: {set_depthTest:"set_depthTest",get_depthTest:"get_depthTest",set_depthMask:"set_depthMask",get_depthMask:"get_depthMask",set_depthFunc:"set_depthFunc",get_depthFunc:"get_depthFunc",set_cull:"set_cull",get_cull:"get_cull",set_cullFace:"set_cullFace",get_cullFace:"get_cullFace",set_zOffset:"set_zOffset",get_zOffset:"get_zOffset",get_isDirty:"get_isDirty"}
};
var com_babylonhx_actions_Action = $hx_exports.BABYLON.Action = function(triggerOptions,condition) {
	if(Reflect.getProperty(triggerOptions,"parameter") != null) {
		this.trigger = Reflect.getProperty(triggerOptions,"trigger");
		this._triggerParameter = Reflect.getProperty(triggerOptions,"parameter");
	} else this.trigger = triggerOptions;
	this._nextActiveAction = this;
	this._condition = condition;
};
$hxClasses["com.babylonhx.actions.Action"] = com_babylonhx_actions_Action;
com_babylonhx_actions_Action.__name__ = true;
com_babylonhx_actions_Action.prototype = {
	_prepare: function() {
	}
	,getTriggerParameter: function() {
		return this._triggerParameter;
	}
	,_executeCurrent: function(evt) {
		if(this._nextActiveAction._condition != null) {
			var condition = this._nextActiveAction._condition;
			var currentRenderId = this._actionManager.getScene().getRenderId();
			if(condition._evaluationId == currentRenderId) {
				if(!condition._currentResult) return;
			} else {
				condition._evaluationId = currentRenderId;
				if(!condition.isValid()) {
					condition._currentResult = false;
					return;
				}
				condition._currentResult = true;
			}
		}
		this._nextActiveAction.execute(evt);
		if(this._nextActiveAction._child != null) {
			if(this._nextActiveAction._child._actionManager == null) this._nextActiveAction._child._actionManager = this._actionManager;
			this._nextActiveAction = this._nextActiveAction._child;
		} else this._nextActiveAction = this;
	}
	,execute: function(evt) {
	}
	,then: function(action) {
		this._child = action;
		action._actionManager = this._actionManager;
		action._prepare();
		return action;
	}
	,_getProperty: function(propertyPath) {
		return this._actionManager._getProperty(propertyPath);
	}
	,_getEffectiveTarget: function(target,propertyPath) {
		return this._actionManager._getEffectiveTarget(target,propertyPath);
	}
	,__class__: com_babylonhx_actions_Action
};
var com_babylonhx_actions_ActionEvent = $hx_exports.BABYLON.ActionEvent = function(source,pointerX,pointerY,meshUnderPointer,sourceEvent,additionalData) {
	this.source = source;
	this.pointerX = pointerX;
	this.pointerY = pointerY;
	this.meshUnderPointer = meshUnderPointer;
	this.sourceEvent = sourceEvent;
	this.additionalData = additionalData;
};
$hxClasses["com.babylonhx.actions.ActionEvent"] = com_babylonhx_actions_ActionEvent;
com_babylonhx_actions_ActionEvent.__name__ = true;
com_babylonhx_actions_ActionEvent.CreateNew = function(source) {
	var scene = source._scene;
	return new com_babylonhx_actions_ActionEvent(source,scene.get_pointerX(),scene.get_pointerY(),scene.get_meshUnderPointer());
};
com_babylonhx_actions_ActionEvent.CreateNewFromSprite = function(source,scene,evt,additionalData) {
	return new com_babylonhx_actions_ActionEvent(source,scene.get_pointerX(),scene.get_pointerY(),scene.get_meshUnderPointer(),evt,additionalData);
};
com_babylonhx_actions_ActionEvent.CreateNewFromScene = function(scene,evt) {
	return new com_babylonhx_actions_ActionEvent(null,scene.get_pointerX(),scene.get_pointerY(),scene.get_meshUnderPointer(),evt);
};
com_babylonhx_actions_ActionEvent.prototype = {
	__class__: com_babylonhx_actions_ActionEvent
};
var com_babylonhx_actions_ActionManager = $hx_exports.BABYLON.ActionManager = function(scene) {
	this.actions = [];
	this._scene = scene;
	scene._actionManagers.push(this);
};
$hxClasses["com.babylonhx.actions.ActionManager"] = com_babylonhx_actions_ActionManager;
com_babylonhx_actions_ActionManager.__name__ = true;
com_babylonhx_actions_ActionManager.prototype = {
	dispose: function() {
		var index = HxOverrides.indexOf(this._scene._actionManagers,this,0);
		if(index > -1) this._scene._actionManagers.splice(index,1);
	}
	,getScene: function() {
		return this._scene;
	}
	,hasSpecificTriggers: function(triggers) {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(HxOverrides.indexOf(triggers,action.trigger,0) > -1) return true;
		}
		return false;
	}
	,hasSpecificTrigger: function(trigger) {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger == trigger) return true;
		}
		return false;
	}
	,get_hasPointerTriggers: function() {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger >= com_babylonhx_actions_ActionManager.OnPickTrigger && action.trigger <= com_babylonhx_actions_ActionManager.OnPointerOutTrigger) return true;
		}
		return false;
	}
	,get_hasPickTriggers: function() {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger >= com_babylonhx_actions_ActionManager.OnPickTrigger && action.trigger <= com_babylonhx_actions_ActionManager.OnCenterPickTrigger) return true;
			if(action.trigger == com_babylonhx_actions_ActionManager.OnPickUpTrigger) return true;
		}
		return false;
	}
	,registerAction: function(action) {
		if(action.trigger == com_babylonhx_actions_ActionManager.OnEveryFrameTrigger) {
			if(this.getScene().actionManager != this) {
				haxe_Log.trace("OnEveryFrameTrigger can only be used with scene.actionManager",{ fileName : "ActionManager.hx", lineNumber : 117, className : "com.babylonhx.actions.ActionManager", methodName : "registerAction"});
				return null;
			}
		}
		this.actions.push(action);
		action._actionManager = this;
		action._prepare();
		return action;
	}
	,processTrigger: function(trigger,evt) {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger == trigger) {
				if(trigger == com_babylonhx_actions_ActionManager.OnKeyUpTrigger || trigger == com_babylonhx_actions_ActionManager.OnKeyDownTrigger) {
					var parameter = action.getTriggerParameter();
					if(parameter != null) {
						if(evt.sourceEvent.key != parameter) continue;
					}
				}
				action._executeCurrent(evt);
			}
		}
	}
	,_getEffectiveTarget: function(target,propertyPath) {
		var properties = propertyPath.split(".");
		var _g1 = 0;
		var _g = properties.length - 1;
		while(_g1 < _g) {
			var index = _g1++;
			target = Reflect.getProperty(target,properties[index]);
		}
		return target;
	}
	,_getProperty: function(propertyPath) {
		var properties = propertyPath.split(".");
		return properties[properties.length - 1];
	}
	,__class__: com_babylonhx_actions_ActionManager
	,__properties__: {get_hasPickTriggers:"get_hasPickTriggers",get_hasPointerTriggers:"get_hasPointerTriggers"}
};
var com_babylonhx_actions_Condition = $hx_exports.BABYLON.Condition = function(actionManager) {
	this._actionManager = actionManager;
};
$hxClasses["com.babylonhx.actions.Condition"] = com_babylonhx_actions_Condition;
com_babylonhx_actions_Condition.__name__ = true;
com_babylonhx_actions_Condition.prototype = {
	isValid: function() {
		return true;
	}
	,_getProperty: function(propertyPath) {
		return this._actionManager._getProperty(propertyPath);
	}
	,_getEffectiveTarget: function(target,propertyPath) {
		return this._actionManager._getEffectiveTarget(target,propertyPath);
	}
	,__class__: com_babylonhx_actions_Condition
};
var com_babylonhx_animations_Animatable = $hx_exports.BABYLON.Animatable = function(scene,target,fromFrame,toFrame,loopAnimation,speedRatio,onAnimationEnd,animations) {
	if(speedRatio == null) speedRatio = 1.0;
	if(loopAnimation == null) loopAnimation = false;
	if(toFrame == null) toFrame = 100;
	if(fromFrame == null) fromFrame = 0;
	this.animationStarted = false;
	this._paused = false;
	this._animations = [];
	this._pausedDelay = -1;
	this._localDelayOffset = -1;
	this.target = target;
	this.fromFrame = fromFrame;
	this.toFrame = toFrame;
	this.loopAnimation = loopAnimation;
	this.speedRatio = speedRatio;
	this.onAnimationEnd = onAnimationEnd;
	if(animations != null) this.appendAnimations(target,animations);
	this._scene = scene;
	scene._activeAnimatables.push(this);
};
$hxClasses["com.babylonhx.animations.Animatable"] = com_babylonhx_animations_Animatable;
com_babylonhx_animations_Animatable.__name__ = true;
com_babylonhx_animations_Animatable.prototype = {
	getAnimations: function() {
		return this._animations;
	}
	,appendAnimations: function(target,animations) {
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			var animation = animations[index];
			animation._target = target;
			this._animations.push(animation);
		}
	}
	,getAnimationByTargetProperty: function(property) {
		var animations = this._animations;
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(animations[index].targetProperty == property) return animations[index];
		}
		return null;
	}
	,reset: function() {
		var animations = this._animations;
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			animations[index].reset();
		}
		this._localDelayOffset = -1;
		this._pausedDelay = -1;
	}
	,goToFrame: function(frame) {
		var animations = this._animations;
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			animations[index].goToFrame(frame);
		}
	}
	,pause: function() {
		this._paused = true;
	}
	,restart: function() {
		this._paused = false;
	}
	,stop: function() {
		var index = HxOverrides.indexOf(this._scene._activeAnimatables,this,0);
		if(index > -1) this._scene._activeAnimatables.splice(index,1);
		if(this.onAnimationEnd != null) this.onAnimationEnd();
	}
	,_animate: function(delay) {
		if(this._paused) {
			this.animationStarted = false;
			if(this._pausedDelay == -1) this._pausedDelay = delay;
			return true;
		}
		if(this._localDelayOffset == -1) this._localDelayOffset = delay; else if(this._pausedDelay != -1) {
			this._localDelayOffset += delay - this._pausedDelay;
			this._pausedDelay = -1;
		}
		var running = false;
		var animations = this._animations;
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			var animation = animations[index];
			var isRunning = animation.animate(delay - this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this.speedRatio);
			running = running || isRunning;
		}
		this.animationStarted = running;
		if(!running) {
			var index1 = HxOverrides.indexOf(this._scene._activeAnimatables,this,0);
			this._scene._activeAnimatables.splice(index1,1);
		}
		if(!running && this.onAnimationEnd != null) this.onAnimationEnd();
		return running;
	}
	,__class__: com_babylonhx_animations_Animatable
};
var com_babylonhx_math_Quaternion = $hx_exports.BABYLON.Quaternion = function(x,y,z,w) {
	if(w == null) w = 1;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["com.babylonhx.math.Quaternion"] = com_babylonhx_math_Quaternion;
com_babylonhx_math_Quaternion.__name__ = true;
com_babylonhx_math_Quaternion.FromRotationMatrix = function(matrix) {
	var result = new com_babylonhx_math_Quaternion();
	com_babylonhx_math_Quaternion.FromRotationMatrixToRef(matrix,result);
	return result;
};
com_babylonhx_math_Quaternion.FromRotationMatrixToRef = function(matrix,result) {
	var data = matrix.m;
	var m11 = data[0];
	var m12 = data[4];
	var m13 = data[8];
	var m21 = data[1];
	var m22 = data[5];
	var m23 = data[9];
	var m31 = data[2];
	var m32 = data[6];
	var m33 = data[10];
	var _trace = m11 + m22 + m33;
	var s = 0;
	if(_trace > 0) {
		s = 0.5 / Math.sqrt(_trace + 1.0);
		result.w = 0.25 / s;
		result.x = (m32 - m23) * s;
		result.y = (m13 - m31) * s;
		result.z = (m21 - m12) * s;
	} else if(m11 > m22 && m11 > m33) {
		s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
		result.w = (m32 - m23) / s;
		result.x = 0.25 * s;
		result.y = (m12 + m21) / s;
		result.z = (m13 + m31) / s;
	} else if(m22 > m33) {
		s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
		result.w = (m13 - m31) / s;
		result.x = (m12 + m21) / s;
		result.y = 0.25 * s;
		result.z = (m23 + m32) / s;
	} else {
		s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
		result.w = (m21 - m12) / s;
		result.x = (m13 + m31) / s;
		result.y = (m23 + m32) / s;
		result.z = 0.25 * s;
	}
};
com_babylonhx_math_Quaternion.Inverse = function(q) {
	return new com_babylonhx_math_Quaternion(-q.x,-q.y,-q.z,q.w);
};
com_babylonhx_math_Quaternion.Identity = function() {
	return new com_babylonhx_math_Quaternion(0,0,0,1);
};
com_babylonhx_math_Quaternion.RotationAxis = function(axis,angle) {
	var result = new com_babylonhx_math_Quaternion();
	var sin = Math.sin(angle / 2);
	axis.normalize();
	result.w = Math.cos(angle / 2);
	result.x = axis.x * sin;
	result.y = axis.y * sin;
	result.z = axis.z * sin;
	return result;
};
com_babylonhx_math_Quaternion.LookRotation = function(forward,up) {
	if(up == null) up = new com_babylonhx_math_Vector3(0,1.0,0);
	forward.normalize();
	var vector = com_babylonhx_math_Vector3.Normalize(forward);
	var vector2 = com_babylonhx_math_Vector3.Normalize(com_babylonhx_math_Vector3.Cross(up,vector));
	var vector3 = com_babylonhx_math_Vector3.Cross(vector,vector2);
	var m00 = vector2.x;
	var m01 = vector2.y;
	var m02 = vector2.z;
	var m10 = vector3.x;
	var m11 = vector3.y;
	var m12 = vector3.z;
	var m20 = vector.x;
	var m21 = vector.y;
	var m22 = vector.z;
	var num8 = m00 + m11 + m22;
	var quaternion = new com_babylonhx_math_Quaternion();
	if(num8 > 0) {
		var num = Math.sqrt(num8 + 1);
		quaternion.w = num * 0.5;
		num = 0.5 / num;
		quaternion.x = (m12 - m21) * num;
		quaternion.y = (m20 - m02) * num;
		quaternion.z = (m01 - m10) * num;
		return quaternion;
	}
	if(m00 >= m11 && m00 >= m22) {
		var num7 = Math.sqrt(1 + m00 - m11 - m22);
		var num4 = 0.5 / num7;
		quaternion.x = 0.5 * num7;
		quaternion.y = (m01 + m10) * num4;
		quaternion.z = (m02 + m20) * num4;
		quaternion.w = (m12 - m21) * num4;
		return quaternion;
	}
	if(m11 > m22) {
		var num6 = Math.sqrt(1 + m11 - m00 - m22);
		var num3 = 0.5 / num6;
		quaternion.x = (m10 + m01) * num3;
		quaternion.y = 0.5 * num6;
		quaternion.z = (m21 + m12) * num3;
		quaternion.w = (m20 - m02) * num3;
		return quaternion;
	}
	var num5 = Math.sqrt(1 + m22 - m00 - m11);
	var num2 = 0.5 / num5;
	quaternion.x = (m20 + m02) * num2;
	quaternion.y = (m21 + m12) * num2;
	quaternion.z = 0.5 * num5;
	quaternion.w = (m01 - m10) * num2;
	return quaternion;
};
com_babylonhx_math_Quaternion.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Quaternion(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);
};
com_babylonhx_math_Quaternion.RotationYawPitchRoll = function(yaw,pitch,roll) {
	var result = new com_babylonhx_math_Quaternion();
	com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(yaw,pitch,roll,result);
	return result;
};
com_babylonhx_math_Quaternion.RotationYawPitchRollToRef = function(yaw,pitch,roll,result) {
	var halfRoll = roll * 0.5;
	var halfPitch = pitch * 0.5;
	var halfYaw = yaw * 0.5;
	var sinRoll = Math.sin(halfRoll);
	var cosRoll = Math.cos(halfRoll);
	var sinPitch = Math.sin(halfPitch);
	var cosPitch = Math.cos(halfPitch);
	var sinYaw = Math.sin(halfYaw);
	var cosYaw = Math.cos(halfYaw);
	result.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;
	result.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;
	result.z = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;
	result.w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;
};
com_babylonhx_math_Quaternion.Slerp = function(left,right,amount) {
	var num2 = 0.0;
	var num3 = 0.0;
	var num = amount;
	var num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
	var flag = false;
	if(num4 < 0) {
		flag = true;
		num4 = -num4;
	}
	if(num4 > 0.999999) {
		num3 = 1 - num;
		if(flag) num2 = -num; else num2 = num;
	} else {
		var num5 = Math.acos(num4);
		var num6 = 1.0 / Math.sin(num5);
		num3 = Math.sin((1.0 - num) * num5) * num6;
		if(flag) num2 = -Math.sin(num * num5) * num6; else num2 = Math.sin(num * num5) * num6;
	}
	return new com_babylonhx_math_Quaternion(num3 * left.x + num2 * right.x,num3 * left.y + num2 * right.y,num3 * left.z + num2 * right.z,num3 * left.w + num2 * right.w);
};
com_babylonhx_math_Quaternion.prototype = {
	toString: function() {
		return "{X:" + this.x + " Y:" + this.y + " Z:" + this.z + " W:" + this.w + "}";
	}
	,asArray: function() {
		return [this.x,this.y,this.z,this.w];
	}
	,set: function(x,y,z,w) {
		if(w == null) w = 1;
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,equals: function(otherQuaternion) {
		return otherQuaternion != null && this.x == otherQuaternion.x && this.y == otherQuaternion.y && this.z == otherQuaternion.z && this.w == otherQuaternion.w;
	}
	,clone: function() {
		return new com_babylonhx_math_Quaternion(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(other) {
		this.x = other.x;
		this.y = other.y;
		this.z = other.z;
		this.w = other.w;
		return this;
	}
	,copyFromFloats: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,add: function(other) {
		return new com_babylonhx_math_Quaternion(this.x + other.x,this.y + other.y,this.z + other.z,this.w + other.w);
	}
	,subtract: function(other) {
		return new com_babylonhx_math_Quaternion(this.x - other.x,this.y - other.y,this.z - other.z,this.w - other.w);
	}
	,scale: function(value) {
		return new com_babylonhx_math_Quaternion(this.x * value,this.y * value,this.z * value,this.w * value);
	}
	,multiply: function(q1) {
		var result = new com_babylonhx_math_Quaternion(0,0,0,1.0);
		result.x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;
		result.y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;
		result.z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;
		result.w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;
		return result;
	}
	,multiplyToRef: function(q1,result) {
		result.x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;
		result.y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;
		result.z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;
		result.w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,normalize: function() {
		var length = 1.0 / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		this.x *= length;
		this.y *= length;
		this.z *= length;
		this.w *= length;
		return this;
	}
	,toEulerAngles: function() {
		var result = new com_babylonhx_math_Vector3(0,0,0);
		this.toEulerAnglesToRef(result);
		return result;
	}
	,toEulerAnglesToRef: function(result) {
		var qx = this.x;
		var qy = this.y;
		var qz = this.z;
		var qw = this.w;
		var qxy = qx * qy;
		var qxz = qx * qz;
		var qwy = qw * qy;
		var qwz = qw * qz;
		var qwx = qw * qx;
		var qyz = qy * qz;
		var sqx = qx * qx;
		var sqy = qy * qy;
		var determinant = sqx + sqy;
		if(determinant != 0.000 && determinant != 1.000) {
			result.x = Math.atan2(qxz + qwy,qwx - qyz);
			result.y = Math.acos(1 - 2 * determinant);
			result.z = Math.atan2(qxz - qwy,qwx + qyz);
		} else if(determinant == 0.000) {
			result.x = 0.0;
			result.y = 0.0;
			result.z = Math.atan2(qxy - qwz,0.5 - sqy - qz * qz);
		} else {
			result.x = Math.atan2(qxy - qwz,0.5 - sqy - qz * qz);
			result.y = Math.PI;
			result.z = 0.0;
		}
	}
	,toRotationMatrix: function(result) {
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var xy = this.x * this.y;
		var zw = this.z * this.w;
		var zx = this.z * this.x;
		var yw = this.y * this.w;
		var yz = this.y * this.z;
		var xw = this.x * this.w;
		result.m[0] = 1.0 - 2.0 * (yy + zz);
		result.m[1] = 2.0 * (xy + zw);
		result.m[2] = 2.0 * (zx - yw);
		result.m[3] = 0;
		result.m[4] = 2.0 * (xy - zw);
		result.m[5] = 1.0 - 2.0 * (zz + xx);
		result.m[6] = 2.0 * (yz + xw);
		result.m[7] = 0;
		result.m[8] = 2.0 * (zx + yw);
		result.m[9] = 2.0 * (yz - xw);
		result.m[10] = 1.0 - 2.0 * (yy + xx);
		result.m[11] = 0;
		result.m[12] = 0;
		result.m[13] = 0;
		result.m[14] = 0;
		result.m[15] = 1.0;
	}
	,multVector: function(vec) {
		var num = this.x * 2;
		var num2 = this.y * 2;
		var num3 = this.z * 2;
		var num4 = this.x * num;
		var num5 = this.y * num2;
		var num6 = this.z * num3;
		var num7 = this.x * num2;
		var num8 = this.x * num3;
		var num9 = this.y * num3;
		var num10 = this.w * num;
		var num11 = this.w * num2;
		var num12 = this.w * num3;
		var result = new com_babylonhx_math_Vector3();
		result.x = (1 - (num5 + num6)) * vec.x + (num7 - num12) * vec.y + (num8 + num11) * vec.z;
		result.y = (num7 + num12) * vec.x + (1 - (num4 + num6)) * vec.y + (num9 - num10) * vec.z;
		result.z = (num8 - num11) * vec.x + (num9 + num10) * vec.y + (1 - (num4 + num5)) * vec.z;
		return result;
	}
	,fromRotationMatrix: function(matrix) {
		com_babylonhx_math_Quaternion.FromRotationMatrixToRef(matrix,this);
		return this;
	}
	,__class__: com_babylonhx_math_Quaternion
};
var com_babylonhx_math_Vector3 = $hx_exports.BABYLON.Vector3 = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["com.babylonhx.math.Vector3"] = com_babylonhx_math_Vector3;
com_babylonhx_math_Vector3.__name__ = true;
com_babylonhx_math_Vector3.GetClipFactor = function(vector0,vector1,axis,size) {
	var d0 = vector0.x * axis.x + vector0.y * axis.y + vector0.z * axis.z - size;
	var d1 = vector1.x * axis.x + vector1.y * axis.y + vector1.z * axis.z - size;
	var s = d0 / (d0 - d1);
	return s;
};
com_babylonhx_math_Vector3.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector3(array[offset],array[offset + 1],array[offset + 2]);
};
com_babylonhx_math_Vector3.FromFloatArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector3(array[offset],array[offset + 1],array[offset + 2]);
};
com_babylonhx_math_Vector3.FromArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
};
com_babylonhx_math_Vector3.FromFloatArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
};
com_babylonhx_math_Vector3.FromFloatsToRef = function(x,y,z,result) {
	result.x = x;
	result.y = y;
	result.z = z;
};
com_babylonhx_math_Vector3.Zero = function() {
	return new com_babylonhx_math_Vector3(0,0,0);
};
com_babylonhx_math_Vector3.One = function() {
	return new com_babylonhx_math_Vector3(1,1,1);
};
com_babylonhx_math_Vector3.Up = function() {
	return new com_babylonhx_math_Vector3(0,1.0,0);
};
com_babylonhx_math_Vector3.Down = function() {
	return new com_babylonhx_math_Vector3(0,-1.0,0);
};
com_babylonhx_math_Vector3.Forward = function() {
	return new com_babylonhx_math_Vector3(0,0,1.0);
};
com_babylonhx_math_Vector3.Back = function() {
	return new com_babylonhx_math_Vector3(0,0,-1.0);
};
com_babylonhx_math_Vector3.Right = function() {
	return new com_babylonhx_math_Vector3(1.0,0,0);
};
com_babylonhx_math_Vector3.Left = function() {
	return new com_babylonhx_math_Vector3(-1.0,0,0);
};
com_babylonhx_math_Vector3.TransformCoordinates = function(vector,transformation) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_math_Vector3.TransformCoordinatesToRef(vector,transformation,result);
	return result;
};
com_babylonhx_math_Vector3.TransformCoordinatesToRef = function(vector,transformation,result) {
	var x = vector.x * transformation.m[0] + vector.y * transformation.m[4] + vector.z * transformation.m[8] + transformation.m[12];
	var y = vector.x * transformation.m[1] + vector.y * transformation.m[5] + vector.z * transformation.m[9] + transformation.m[13];
	var z = vector.x * transformation.m[2] + vector.y * transformation.m[6] + vector.z * transformation.m[10] + transformation.m[14];
	var w = vector.x * transformation.m[3] + vector.y * transformation.m[7] + vector.z * transformation.m[11] + transformation.m[15];
	result.x = x / w;
	result.y = y / w;
	result.z = z / w;
};
com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef = function(x,y,z,transformation,result) {
	var rx = x * transformation.m[0] + y * transformation.m[4] + z * transformation.m[8] + transformation.m[12];
	var ry = x * transformation.m[1] + y * transformation.m[5] + z * transformation.m[9] + transformation.m[13];
	var rz = x * transformation.m[2] + y * transformation.m[6] + z * transformation.m[10] + transformation.m[14];
	var rw = x * transformation.m[3] + y * transformation.m[7] + z * transformation.m[11] + transformation.m[15];
	result.x = rx / rw;
	result.y = ry / rw;
	result.z = rz / rw;
};
com_babylonhx_math_Vector3.TransformNormal = function(vector,transformation) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	result.x = vector.x * transformation.m[0] + vector.y * transformation.m[4] + vector.z * transformation.m[8];
	result.y = vector.x * transformation.m[1] + vector.y * transformation.m[5] + vector.z * transformation.m[9];
	result.z = vector.x * transformation.m[2] + vector.y * transformation.m[6] + vector.z * transformation.m[10];
	return result;
};
com_babylonhx_math_Vector3.TransformNormalToRef = function(vector,transformation,result) {
	result.x = vector.x * transformation.m[0] + vector.y * transformation.m[4] + vector.z * transformation.m[8];
	result.y = vector.x * transformation.m[1] + vector.y * transformation.m[5] + vector.z * transformation.m[9];
	result.z = vector.x * transformation.m[2] + vector.y * transformation.m[6] + vector.z * transformation.m[10];
};
com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef = function(x,y,z,transformation,result) {
	result.x = x * transformation.m[0] + y * transformation.m[4] + z * transformation.m[8];
	result.y = x * transformation.m[1] + y * transformation.m[5] + z * transformation.m[9];
	result.z = x * transformation.m[2] + y * transformation.m[6] + z * transformation.m[10];
};
com_babylonhx_math_Vector3.CatmullRom = function(value1,value2,value3,value4,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);
	var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);
	var z = 0.5 * (2.0 * value2.z + (-value1.z + value3.z) * amount + (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) * squared + (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Clamp = function(value,min,max) {
	var x = value.x;
	if(x > max.x) x = max.x; else x = x;
	if(x < min.x) x = min.x; else x = x;
	var y = value.y;
	if(y > max.y) y = max.y; else y = y;
	if(y < min.y) y = min.y; else y = y;
	var z = value.z;
	if(z > max.z) z = max.z; else z = z;
	if(z < min.z) z = min.z; else z = z;
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Hermite = function(value1,tangent1,value2,tangent2,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var part1 = 2.0 * cubed - 3.0 * squared + 1.0;
	var part2 = -2. * cubed + 3.0 * squared;
	var part3 = cubed - 2.0 * squared + amount;
	var part4 = cubed - squared;
	var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;
	var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;
	var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Lerp = function(start,end,amount) {
	var x = start.x + (end.x - start.x) * amount;
	var y = start.y + (end.y - start.y) * amount;
	var z = start.z + (end.z - start.z) * amount;
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Dot = function(left,right) {
	return left.x * right.x + left.y * right.y + left.z * right.z;
};
com_babylonhx_math_Vector3.Cross = function(left,right) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	result.x = left.y * right.z - left.z * right.y;
	result.y = left.z * right.x - left.x * right.z;
	result.z = left.x * right.y - left.y * right.x;
	return result;
};
com_babylonhx_math_Vector3.CrossToRef = function(left,right,result) {
	result.x = left.y * right.z - left.z * right.y;
	result.y = left.z * right.x - left.x * right.z;
	result.z = left.x * right.y - left.y * right.x;
};
com_babylonhx_math_Vector3.Normalize = function(vector) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.normalize();
	return result;
};
com_babylonhx_math_Vector3.NormalizeToRef = function(vector,result) {
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.normalize();
};
com_babylonhx_math_Vector3.Project = function(vector,world,transform,viewport) {
	var cw = viewport.width;
	var ch = viewport.height;
	var cx = viewport.x;
	var cy = viewport.y;
	var viewportMatrix = com_babylonhx_math_Matrix.FromValues(cw / 2.0,0,0,0,0,-ch / 2.0,0,0,0,0,1,0,cx + cw / 2.0,ch / 2.0 + cy,0,1);
	var finalMatrix = world.multiply(transform).multiply(viewportMatrix);
	return com_babylonhx_math_Vector3.TransformCoordinates(vector,finalMatrix);
};
com_babylonhx_math_Vector3.UnprojectFromTransform = function(source,viewportWidth,viewportHeight,world,transform) {
	var matrix = world.multiply(transform);
	matrix.invertToRef(matrix);
	matrix;
	source.x = source.x / viewportWidth * 2 - 1;
	source.y = -(source.y / viewportHeight * 2 - 1);
	var vector = com_babylonhx_math_Vector3.TransformCoordinates(source,matrix);
	var num = source.x * matrix.m[3] + source.y * matrix.m[7] + source.z * matrix.m[11] + matrix.m[15];
	if(com_babylonhx_tools_Tools.WithinEpsilon(num,1.0,null)) vector = vector.scale(1.0 / num);
	return vector;
};
com_babylonhx_math_Vector3.Unproject = function(source,viewportWidth,viewportHeight,world,view,projection) {
	var matrix = world.multiply(view).multiply(projection);
	matrix.invertToRef(matrix);
	matrix;
	var screenSource = new com_babylonhx_math_Vector3(source.x / viewportWidth * 2 - 1,-(source.y / viewportHeight * 2 - 1),source.z);
	var vector = com_babylonhx_math_Vector3.TransformCoordinates(screenSource,matrix);
	var num = screenSource.x * matrix.m[3] + screenSource.y * matrix.m[7] + screenSource.z * matrix.m[11] + matrix.m[15];
	if(com_babylonhx_tools_Tools.WithinEpsilon(num,1.0,null)) vector = vector.scale(1.0 / num);
	return vector;
};
com_babylonhx_math_Vector3.Minimize = function(left,right) {
	var min = new com_babylonhx_math_Vector3(left.x,left.y,left.z);
	if(right.x < min.x) min.x = right.x;
	if(right.y < min.y) min.y = right.y;
	if(right.z < min.z) min.z = right.z;
	return min;
};
com_babylonhx_math_Vector3.Maximize = function(left,right) {
	var max = new com_babylonhx_math_Vector3(left.x,left.y,left.z);
	if(right.x > max.x) max.x = right.x;
	if(right.y > max.y) max.y = right.y;
	if(right.z > max.z) max.z = right.z;
	return max;
};
com_babylonhx_math_Vector3.Distance = function(value1,value2) {
	return Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(value1,value2));
};
com_babylonhx_math_Vector3.DistanceSquared = function(value1,value2) {
	var x = value1.x - value2.x;
	var y = value1.y - value2.y;
	var z = value1.z - value2.z;
	return x * x + y * y + z * z;
};
com_babylonhx_math_Vector3.Center = function(value1,value2) {
	var center = new com_babylonhx_math_Vector3(value1.x + value2.x,value1.y + value2.y,value1.z + value2.z);
	center.x *= 0.5;
	center.y *= 0.5;
	center.z *= 0.5;
	center;
	return center;
};
com_babylonhx_math_Vector3.RotationFromAxis = function(axis1,axis2,axis3) {
	var rotation = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_math_Vector3.RotationFromAxisToRef(axis1,axis2,axis3,rotation);
	return rotation;
};
com_babylonhx_math_Vector3.RotationFromAxisToRef = function(axis1,axis2,axis3,ref) {
	var u = com_babylonhx_math_Vector3.Normalize(axis1);
	var w = com_babylonhx_math_Vector3.Normalize(axis3);
	var X = com_babylonhx_math_Axis.X;
	var Y = com_babylonhx_math_Axis.Y;
	var yaw = 0.0;
	var pitch = 0.0;
	var roll = 0.0;
	var x = 0.0;
	var y = 0.0;
	var z = 0.0;
	var t = 0.0;
	var sign = -1.0;
	var nbRevert = 0;
	var cross;
	var dot = 0.0;
	var u1 = null;
	var v1 = null;
	if(com_babylonhx_tools_Tools.WithinEpsilon(w.z,0,0.001)) z = 1.0; else if(com_babylonhx_tools_Tools.WithinEpsilon(w.x,0,0.001)) x = 1.0; else {
		t = w.z / w.x;
		x = -t * Math.sqrt(1 / (1 + t * t));
		z = Math.sqrt(1 / (1 + t * t));
	}
	u1 = new com_babylonhx_math_Vector3(x,y,z);
	u1.normalize();
	v1 = com_babylonhx_math_Vector3.Cross(w,u1);
	v1.normalize();
	cross = com_babylonhx_math_Vector3.Cross(u,u1);
	cross.normalize();
	if(w.x * cross.x + w.y * cross.y + w.z * cross.z < 0) sign = 1.0;
	dot = u.x * u1.x + u.y * u1.y + u.z * u1.z;
	dot = Math.min(1.0,Math.max(-1.0,dot));
	roll = Math.acos(dot) * sign;
	if(u1.x * X.x + u1.y * X.y + u1.z * X.z < 0) {
		roll = Math.PI + roll;
		u1.x *= -1;
		u1.y *= -1;
		u1.z *= -1;
		u1 = u1;
		v1.x *= -1;
		v1.y *= -1;
		v1.z *= -1;
		v1 = v1;
		nbRevert++;
	}
	var w2 = null;
	var v2 = null;
	x = 0.0;
	y = 0.0;
	z = 0.0;
	sign = -1;
	if(com_babylonhx_tools_Tools.WithinEpsilon(w.z,0,0.001)) x = 1.0; else {
		t = u1.z / u1.x;
		x = -t * Math.sqrt(1 / (1 + t * t));
		z = Math.sqrt(1 / (1 + t * t));
	}
	w2 = new com_babylonhx_math_Vector3(x,y,z);
	w2.normalize();
	v2 = com_babylonhx_math_Vector3.Cross(w2,u1);
	v2.normalize();
	cross = com_babylonhx_math_Vector3.Cross(w,w2);
	cross.normalize();
	if(u1.x * cross.x + u1.y * cross.y + u1.z * cross.z < 0) sign = 1.0;
	dot = w.x * w2.x + w.y * w2.y + w.z * w2.z;
	dot = Math.min(1.0,Math.max(-1.0,dot));
	pitch = Math.acos(dot) * sign;
	if(v2.x * Y.x + v2.y * Y.y + v2.z * Y.z < 0) {
		pitch = Math.PI + pitch;
		v2.x *= -1;
		v2.y *= -1;
		v2.z *= -1;
		v2 = v2;
		w2.x *= -1;
		w2.y *= -1;
		w2.z *= -1;
		w2 = w2;
		nbRevert++;
	}
	sign = -1;
	cross = com_babylonhx_math_Vector3.Cross(X,u1);
	cross.normalize();
	if(cross.x * Y.x + cross.y * Y.y + cross.z * Y.z < 0) sign = 1.0;
	dot = u1.x * X.x + u1.y * X.y + u1.z * X.z;
	dot = Math.min(1.0,Math.max(-1.0,dot));
	yaw = -Math.acos(dot) * sign;
	if(dot < 0 && nbRevert < 2) yaw = Math.PI + yaw;
	ref.x = pitch;
	ref.y = yaw;
	ref.z = roll;
};
com_babylonhx_math_Vector3.prototype = {
	toString: function() {
		return "{X:" + this.x + " Y:" + this.y + " Z:" + this.z + "}";
	}
	,asArray: function() {
		var result = [];
		result[0] = this.x;
		result[1] = this.y;
		result[2] = this.z;
		return result;
	}
	,set: function(x,y,z) {
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.x;
		array[index + 1] = this.y;
		array[index + 2] = this.z;
	}
	,toQuaternion: function() {
		var result = new com_babylonhx_math_Quaternion(0,0,0,1);
		var cosxPlusz = Math.cos((this.x + this.z) * 0.5);
		var sinxPlusz = Math.sin((this.x + this.z) * 0.5);
		var coszMinusx = Math.cos((this.z - this.x) * 0.5);
		var sinzMinusx = Math.sin((this.z - this.x) * 0.5);
		var cosy = Math.cos(this.y * 0.5);
		var siny = Math.sin(this.y * 0.5);
		result.x = coszMinusx * siny;
		result.y = -sinzMinusx * siny;
		result.z = sinxPlusz * cosy;
		result.w = cosxPlusz * cosy;
		return result;
	}
	,addInPlace: function(otherVector) {
		this.x += otherVector.x;
		this.y += otherVector.y;
		this.z += otherVector.z;
		return this;
	}
	,add: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x + otherVector.x,this.y + otherVector.y,this.z + otherVector.z);
	}
	,addToRef: function(otherVector,result) {
		result.x = this.x + otherVector.x;
		result.y = this.y + otherVector.y;
		result.z = this.z + otherVector.z;
	}
	,subtractInPlace: function(otherVector) {
		this.x -= otherVector.x;
		this.y -= otherVector.y;
		this.z -= otherVector.z;
		return this;
	}
	,subtract: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x - otherVector.x,this.y - otherVector.y,this.z - otherVector.z);
	}
	,subtractToRef: function(otherVector,result) {
		result.x = this.x - otherVector.x;
		result.y = this.y - otherVector.y;
		result.z = this.z - otherVector.z;
	}
	,subtractFromFloats: function(x,y,z) {
		return new com_babylonhx_math_Vector3(this.x - x,this.y - y,this.z - z);
	}
	,subtractFromFloatsToRef: function(x,y,z,result) {
		result.x = this.x - x;
		result.y = this.y - y;
		result.z = this.z - z;
	}
	,negate: function() {
		return new com_babylonhx_math_Vector3(-this.x,-this.y,-this.z);
	}
	,scaleInPlace: function(scale) {
		this.x *= scale;
		this.y *= scale;
		this.z *= scale;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Vector3(this.x * scale,this.y * scale,this.z * scale);
	}
	,scaleToRef: function(scale,result) {
		result.x = this.x * scale;
		result.y = this.y * scale;
		result.z = this.z * scale;
	}
	,equals: function(otherVector) {
		return otherVector != null && this.x == otherVector.x && this.y == otherVector.y && this.z == otherVector.z;
	}
	,equalsWithEpsilon: function(otherVector,epsilon) {
		if(epsilon == null) epsilon = 0.001;
		return otherVector != null && com_babylonhx_tools_Tools.WithinEpsilon(this.x,otherVector.x,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.y,otherVector.y,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.z,otherVector.z,epsilon);
	}
	,equalsToFloats: function(x,y,z) {
		return this.x == x && this.y == y && this.z == z;
	}
	,multiplyInPlace: function(otherVector) {
		this.x *= otherVector.x;
		this.y *= otherVector.y;
		this.z *= otherVector.z;
	}
	,multiply: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x * otherVector.x,this.y * otherVector.y,this.z * otherVector.z);
	}
	,multiplyToRef: function(otherVector,result) {
		result.x = this.x * otherVector.x;
		result.y = this.y * otherVector.y;
		result.z = this.z * otherVector.z;
	}
	,multiplyByFloats: function(x,y,z) {
		return new com_babylonhx_math_Vector3(this.x * x,this.y * y,this.z * z);
	}
	,divide: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x / otherVector.x,this.y / otherVector.y,this.z / otherVector.z);
	}
	,divideToRef: function(otherVector,result) {
		result.x = this.x / otherVector.x;
		result.y = this.y / otherVector.y;
		result.z = this.z / otherVector.z;
	}
	,MinimizeInPlace: function(other) {
		if(other.x < this.x) this.x = other.x;
		if(other.y < this.y) this.y = other.y;
		if(other.z < this.z) this.z = other.z;
	}
	,MaximizeInPlace: function(other) {
		if(other.x > this.x) this.x = other.x;
		if(other.y > this.y) this.y = other.y;
		if(other.z > this.z) this.z = other.z;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(len == 0) return this;
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		this.z *= num;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Vector3(this.x,this.y,this.z);
	}
	,copyFrom: function(source) {
		this.x = source.x;
		this.y = source.y;
		this.z = source.z;
	}
	,copyFromFloats: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	,__class__: com_babylonhx_math_Vector3
};
var com_babylonhx_animations_Animation = $hx_exports.BABYLON.Animation = function(name,targetProperty,framePerSecond,dataType,loopMode) {
	if(loopMode == null) loopMode = -1;
	this._ranges = [];
	this.allowMatricesInterpolation = false;
	this._events = [];
	this._stopped = false;
	this._highLimitsCache = [];
	this._offsetsCache = [];
	this.name = name;
	this.targetProperty = targetProperty;
	this.targetPropertyPath = targetProperty.split(".");
	this.framePerSecond = framePerSecond;
	this.dataType = dataType;
	if(loopMode == -1) this.loopMode = 1; else this.loopMode = loopMode;
};
$hxClasses["com.babylonhx.animations.Animation"] = com_babylonhx_animations_Animation;
com_babylonhx_animations_Animation.__name__ = true;
com_babylonhx_animations_Animation._PrepareAnimation = function(name,targetProperty,framePerSecond,totalFrame,from,to,loopMode,easingFunction) {
	var dataType = -1;
	if(typeof(from) == "number") dataType = 0; else if(js_Boot.__instanceof(from,com_babylonhx_math_Quaternion)) dataType = 2; else if(js_Boot.__instanceof(from,com_babylonhx_math_Vector3)) dataType = 1; else if(js_Boot.__instanceof(from,com_babylonhx_math_Vector2)) dataType = 5; else if(js_Boot.__instanceof(from,com_babylonhx_math_Color3)) dataType = 4;
	if(dataType == -1) return null;
	var animation = new com_babylonhx_animations_Animation(name,targetProperty,framePerSecond,dataType,loopMode);
	var keys = [];
	keys.push({ frame : 0, value : from});
	keys.push({ frame : totalFrame, value : to});
	animation.setKeys(keys);
	if(easingFunction != null) animation._easingFunction = easingFunction;
	return animation;
};
com_babylonhx_animations_Animation.CreateAndStartAnimation = function(name,node,targetProperty,framePerSecond,totalFrame,from,to,loopMode,easingFunction,onAnimationEnd) {
	var animation = com_babylonhx_animations_Animation._PrepareAnimation(name,targetProperty,framePerSecond,totalFrame,from,to,loopMode,easingFunction);
	return node._scene.beginDirectAnimation(node,[animation],0,totalFrame,animation.loopMode == 1,1.0,onAnimationEnd);
};
com_babylonhx_animations_Animation.CreateMergeAndStartAnimation = function(name,node,targetProperty,framePerSecond,totalFrame,from,to,loopMode,easingFunction,onAnimationEnd) {
	var animation = com_babylonhx_animations_Animation._PrepareAnimation(name,targetProperty,framePerSecond,totalFrame,from,to,loopMode,easingFunction);
	node.animations.push(animation);
	return node._scene.beginAnimation(node,0,totalFrame,animation.loopMode == 1,1.0,onAnimationEnd);
};
com_babylonhx_animations_Animation.prototype = {
	addEvent: function(event) {
		this._events.push(event);
	}
	,removeEvents: function(frame) {
		var index = 0;
		while(index < this._events.length) {
			if(this._events[index].frame == frame) {
				this._events.splice(index,1);
				index--;
			}
			++index;
		}
	}
	,reset: function() {
		this._offsetsCache = [];
		this._highLimitsCache = [];
		this.currentFrame = 0;
	}
	,createRange: function(name,from,to) {
		this._ranges.push(new com_babylonhx_animations_AnimationRange(name,from,to));
	}
	,deleteRange: function(name) {
		var _g1 = 0;
		var _g = this._ranges.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._ranges[index].name == name) {
				this._ranges.splice(index,1);
				return;
			}
		}
	}
	,getRange: function(name) {
		var _g1 = 0;
		var _g = this._ranges.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._ranges[index].name == name) return this._ranges[index];
		}
		return null;
	}
	,isStopped: function() {
		return this._stopped;
	}
	,getKeys: function() {
		return this._keys;
	}
	,getEasingFunction: function() {
		return this._easingFunction;
	}
	,setEasingFunction: function(easingFunction) {
		this._easingFunction = easingFunction;
	}
	,floatInterpolateFunction: function(startValue,endValue,gradient) {
		return startValue + (endValue - startValue) * gradient;
	}
	,quaternionInterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Quaternion.Slerp(startValue,endValue,gradient);
	}
	,vector3InterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Vector3.Lerp(startValue,endValue,gradient);
	}
	,vector2InterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Vector2.Lerp(startValue,endValue,gradient);
	}
	,color3InterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Color3.Lerp(startValue,endValue,gradient);
	}
	,matrixInterpolateFunction: function(startValue,endValue,gradient) {
		com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale.set(0,0,0);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation.set(null,null,null,null);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation.set(0,0,0);
		startValue.decompose(com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale,com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation,com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale.set(0,0,0);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation.set(null,null,null,null);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation.set(0,0,0);
		endValue.decompose(com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale,com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation,com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation);
		var resultScale = com_babylonhx_math_Vector3.Lerp(com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale,com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale,gradient);
		var resultRotation = com_babylonhx_math_Quaternion.Slerp(com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation,com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation,gradient);
		var resultTranslation = com_babylonhx_math_Vector3.Lerp(com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation,com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation,gradient);
		return com_babylonhx_math_Matrix.Compose(resultScale,resultRotation,resultTranslation);
	}
	,clone: function() {
		var clone = new com_babylonhx_animations_Animation(this.name,this.targetPropertyPath.join("."),this.framePerSecond,this.dataType,this.loopMode);
		clone.setKeys(this._keys);
		return clone;
	}
	,setKeys: function(values) {
		this._keys = values.slice(0);
		this._offsetsCache = [];
		this._highLimitsCache = [];
	}
	,_interpolate: function(currentFrame,repeatCount,loopMode,offsetValue,highLimitValue) {
		if(loopMode == 2 && repeatCount > 0 && highLimitValue != null) if(highLimitValue.clone != null) return highLimitValue.clone(); else return highLimitValue;
		this.currentFrame = currentFrame;
		var startKey = Std["int"](Math.max(0,Math.min(this._keys.length - 1,Math.floor(this._keys.length * (currentFrame - this._keys[0].frame) / (this._keys[this._keys.length - 1].frame - this._keys[0].frame)) - 1)));
		if(this._keys[startKey].frame >= currentFrame) while(startKey - 1 >= 0 && this._keys[startKey].frame >= currentFrame) startKey--;
		var _g1 = startKey;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var key = _g1++;
			if(this._keys[key + 1] != null && this._keys[key + 1].frame >= currentFrame) {
				var startValue = this._keys[key].value;
				var endValue = this._keys[key + 1].value;
				var gradient = (currentFrame - this._keys[key].frame) / (this._keys[key + 1].frame - this._keys[key].frame);
				if(this._easingFunction != null) gradient = this._easingFunction.ease(gradient);
				var _g2 = this.dataType;
				switch(_g2) {
				case 0:
					switch(loopMode) {
					case 1:case 2:
						return this.floatInterpolateFunction(startValue,endValue,gradient);
					case 0:
						return offsetValue * repeatCount + this.floatInterpolateFunction(startValue,endValue,gradient);
					}
					break;
				case 2:
					var quaternion = null;
					switch(loopMode) {
					case 1:case 2:
						quaternion = com_babylonhx_math_Quaternion.Slerp(startValue,endValue,gradient);
						break;
					case 0:
						quaternion = com_babylonhx_math_Quaternion.Slerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
						break;
					}
					return quaternion;
				case 1:
					switch(loopMode) {
					case 1:case 2:
						return com_babylonhx_math_Vector3.Lerp(startValue,endValue,gradient);
					case 0:
						return com_babylonhx_math_Vector3.Lerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
					}
					break;
				case 5:
					switch(loopMode) {
					case 1:case 2:
						return com_babylonhx_math_Vector2.Lerp(startValue,endValue,gradient);
					case 0:
						return com_babylonhx_math_Vector2.Lerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
					}
					break;
				case 4:
					switch(loopMode) {
					case 1:case 2:
						return com_babylonhx_math_Color3.Lerp(startValue,endValue,gradient);
					case 0:
						return com_babylonhx_math_Color3.Lerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
					}
					break;
				case 3:
					switch(loopMode) {
					case 1:case 2:case 0:
						return startValue;
					}
					break;
				default:
				}
			}
		}
		return this._keys[this._keys.length - 1].value;
	}
	,setValue: function(currentValue) {
		if(this.targetPropertyPath.length > 1) {
			var property = null;
			var _g = this.targetPropertyPath[0];
			switch(_g) {
			case "scaling":
				property = this._target.scaling;
				break;
			case "position":
				property = this._target.position;
				break;
			case "rotation":
				property = this._target.rotation;
				break;
			default:
				property = Reflect.getProperty(this._target,this.targetPropertyPath[0]);
			}
			var _g1 = 1;
			var _g2 = this.targetPropertyPath.length - 1;
			while(_g1 < _g2) {
				var index = _g1++;
				property = Reflect.getProperty(property,this.targetPropertyPath[index]);
			}
			var _g3 = this.targetPropertyPath[this.targetPropertyPath.length - 1];
			switch(_g3) {
			case "x":
				property.x = currentValue;
				break;
			case "y":
				property.y = currentValue;
				break;
			case "z":
				property.z = currentValue;
				break;
			default:
				Reflect.setProperty(property,this.targetPropertyPath[this.targetPropertyPath.length - 1],currentValue);
			}
		} else {
			var _g4 = this.targetPropertyPath[0];
			switch(_g4) {
			case "_matrix":
				this._target._matrix = currentValue;
				break;
			case "rotation":
				this._target.rotation = currentValue;
				break;
			case "position":
				this._target.position = currentValue;
				break;
			case "scaling":
				this._target.scaling = currentValue;
				break;
			default:
				Reflect.setProperty(this._target,this.targetPropertyPath[0],currentValue);
			}
		}
		if(this._target.markAsDirty != null) this._target.markAsDirty(this.targetProperty);
	}
	,goToFrame: function(frame) {
		if(frame < this._keys[0].frame) frame = this._keys[0].frame; else if(frame > this._keys[this._keys.length - 1].frame) frame = this._keys[this._keys.length - 1].frame;
		var currentValue = this._interpolate(frame,0,this.loopMode);
		this.setValue(currentValue);
	}
	,animate: function(delay,from,to,loop,speedRatio) {
		if(this.targetPropertyPath == null || this.targetPropertyPath.length < 1) {
			this._stopped = true;
			return false;
		}
		var returnValue = true;
		if(this._keys[0].frame != 0) {
			var newKey = { frame : 0, value : this._keys[0].value};
			this._keys.unshift(newKey);
		}
		if(from < this._keys[0].frame || from > this._keys[this._keys.length - 1].frame) from = this._keys[0].frame;
		if(to < this._keys[0].frame || to > this._keys[this._keys.length - 1].frame) to = this._keys[this._keys.length - 1].frame;
		var range = to - from;
		var offsetValue = null;
		var ratio = delay * (this.framePerSecond * speedRatio) / 1000.0;
		var highLimitValue = null;
		if(ratio > range && !loop) {
			returnValue = false;
			highLimitValue = this._keys[this._keys.length - 1].value;
		} else {
			highLimitValue = 0;
			if(this.loopMode != 1) {
				var keyOffset = to + from;
				if(this._offsetsCache.length > keyOffset) {
					var fromValue = this._interpolate(from,0,1);
					var toValue = this._interpolate(to,0,1);
					var _g = this.dataType;
					switch(_g) {
					case 0:
						this._offsetsCache[keyOffset] = toValue - fromValue;
						break;
					case 2:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Quaternion)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Quaternion));
						break;
					case 1:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Vector3)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Vector3));
						break;
					case 5:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Vector2)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Vector2));
						break;
					case 4:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Color3)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Color3));
						break;
					default:
					}
					this._highLimitsCache[keyOffset] = toValue;
				}
				highLimitValue = this._highLimitsCache[keyOffset];
				offsetValue = this._offsetsCache[keyOffset];
			}
		}
		if(offsetValue == null) {
			var _g1 = this.dataType;
			switch(_g1) {
			case 0:
				offsetValue = 0;
				break;
			case 2:
				offsetValue = new com_babylonhx_math_Quaternion(0,0,0,0);
				break;
			case 1:
				offsetValue = new com_babylonhx_math_Vector3(0,0,0);
				break;
			case 5:
				offsetValue = new com_babylonhx_math_Vector2(0,0);
				break;
			case 4:
				offsetValue = new com_babylonhx_math_Color3(0,0,0);
				break;
			}
		}
		var repeatCount = ratio / range | 0;
		var currentFrame;
		currentFrame = returnValue?from + ratio % range:to;
		var currentValue = this._interpolate(currentFrame,repeatCount,this.loopMode,offsetValue,highLimitValue);
		var index = 0;
		while(index < this._events.length) {
			if(currentFrame >= this._events[index].frame) {
				var event = this._events[index];
				if(!event.isDone) {
					if(event.onlyOnce) {
						this._events.splice(index,1);
						index--;
					}
					event.isDone = true;
					event.action();
				}
			} else if(this._events[index].isDone && !this._events[index].onlyOnce) this._events[index].isDone = false;
			++index;
		}
		this.setValue(currentValue);
		if(!returnValue) this._stopped = true;
		return returnValue;
	}
	,__class__: com_babylonhx_animations_Animation
};
var com_babylonhx_animations_AnimationEvent = function(frame,action,onlyOnce) {
	if(onlyOnce == null) onlyOnce = false;
	this.isDone = false;
	this.frame = frame;
	this.action = action;
	this.onlyOnce = onlyOnce;
};
$hxClasses["com.babylonhx.animations.AnimationEvent"] = com_babylonhx_animations_AnimationEvent;
com_babylonhx_animations_AnimationEvent.__name__ = true;
com_babylonhx_animations_AnimationEvent.prototype = {
	__class__: com_babylonhx_animations_AnimationEvent
};
var com_babylonhx_animations_AnimationRange = function(name,from,to) {
	this.name = name;
	this.from = from;
	this.to = to;
};
$hxClasses["com.babylonhx.animations.AnimationRange"] = com_babylonhx_animations_AnimationRange;
com_babylonhx_animations_AnimationRange.__name__ = true;
com_babylonhx_animations_AnimationRange.prototype = {
	__class__: com_babylonhx_animations_AnimationRange
};
var com_babylonhx_animations_IAnimatable = $hx_exports.BABYLON.IAnimatable = function() { };
$hxClasses["com.babylonhx.animations.IAnimatable"] = com_babylonhx_animations_IAnimatable;
com_babylonhx_animations_IAnimatable.__name__ = true;
com_babylonhx_animations_IAnimatable.prototype = {
	__class__: com_babylonhx_animations_IAnimatable
};
var com_babylonhx_animations_easing_IEasingFunction = $hx_exports.BABYLON.IEasingFunction = function() { };
$hxClasses["com.babylonhx.animations.easing.IEasingFunction"] = com_babylonhx_animations_easing_IEasingFunction;
com_babylonhx_animations_easing_IEasingFunction.__name__ = true;
com_babylonhx_animations_easing_IEasingFunction.prototype = {
	__class__: com_babylonhx_animations_easing_IEasingFunction
};
var com_babylonhx_animations_easing_EasingFunction = $hx_exports.BABYLON.EasingFunction = function() {
	this._easingMode = com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEIN;
};
$hxClasses["com.babylonhx.animations.easing.EasingFunction"] = com_babylonhx_animations_easing_EasingFunction;
com_babylonhx_animations_easing_EasingFunction.__name__ = true;
com_babylonhx_animations_easing_EasingFunction.__interfaces__ = [com_babylonhx_animations_easing_IEasingFunction];
com_babylonhx_animations_easing_EasingFunction.prototype = {
	setEasingMode: function(easingMode) {
		var n = Math.min(Math.max(easingMode,0),2);
		this._easingMode = n;
	}
	,getEasingMode: function() {
		return this._easingMode;
	}
	,easeInCore: function(gradient) {
		throw new js__$Boot_HaxeError("You must implement this method");
	}
	,ease: function(gradient) {
		var _g = this._easingMode;
		switch(_g) {
		case 0:
			return this.easeInCore(gradient);
		case 1:
			return 1 - this.easeInCore(1 - gradient);
		}
		if(gradient >= 0.5) return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;
		return this.easeInCore(gradient * 2) * 0.5;
	}
	,__class__: com_babylonhx_animations_easing_EasingFunction
};
var com_babylonhx_bones_Bone = $hx_exports.BABYLON.Bone = function(name,skeleton,parentBone,matrix) {
	this._invertedAbsoluteTransform = new com_babylonhx_math_Matrix();
	this._absoluteTransform = new com_babylonhx_math_Matrix();
	this._worldTransform = new com_babylonhx_math_Matrix();
	this.children = [];
	com_babylonhx_Node.call(this,name,skeleton.getScene());
	this._skeleton = skeleton;
	this._matrix = matrix;
	this._baseMatrix = matrix;
	skeleton.bones.push(this);
	if(parentBone != null) {
		this._parent = parentBone;
		parentBone.children.push(this);
	} else this._parent = null;
	this._updateDifferenceMatrix();
};
$hxClasses["com.babylonhx.bones.Bone"] = com_babylonhx_bones_Bone;
com_babylonhx_bones_Bone.__name__ = true;
com_babylonhx_bones_Bone.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_bones_Bone.__super__ = com_babylonhx_Node;
com_babylonhx_bones_Bone.prototype = $extend(com_babylonhx_Node.prototype,{
	getParent: function() {
		return this._parent;
	}
	,getLocalMatrix: function() {
		return this._matrix;
	}
	,getBaseMatrix: function() {
		return this._baseMatrix;
	}
	,getWorldMatrix: function() {
		return this._worldTransform;
	}
	,getInvertedAbsoluteTransform: function() {
		return this._invertedAbsoluteTransform;
	}
	,getAbsoluteMatrix: function() {
		var matrix = this._matrix.clone();
		var parent = this._parent;
		while(parent != null) {
			matrix = matrix.multiply(parent._matrix);
			parent = parent._parent;
		}
		return matrix;
	}
	,updateMatrix: function(matrix) {
		this._matrix = matrix;
		this._skeleton._isDirty = true;
		this._updateDifferenceMatrix();
	}
	,_updateDifferenceMatrix: function() {
		if(this._parent != null) this._matrix.multiplyToRef(this._parent._absoluteTransform,this._absoluteTransform); else this._absoluteTransform.copyFrom(this._matrix);
		this._absoluteTransform.invertToRef(this._invertedAbsoluteTransform);
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var index = _g1++;
			this.children[index]._updateDifferenceMatrix();
		}
	}
	,markAsDirty: function() {
		this._currentRenderId++;
		this._skeleton._isDirty = true;
	}
	,__class__: com_babylonhx_bones_Bone
});
var com_babylonhx_bones_Skeleton = $hx_exports.BABYLON.Skeleton = function(name,id,scene) {
	this._identity = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	this._isDirty = true;
	this.name = name;
	this.id = id;
	this.bones = [];
	this._scene = scene;
	scene.skeletons.push(this);
	this.prepare();
	this._isDirty = true;
};
$hxClasses["com.babylonhx.bones.Skeleton"] = com_babylonhx_bones_Skeleton;
com_babylonhx_bones_Skeleton.__name__ = true;
com_babylonhx_bones_Skeleton.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_bones_Skeleton.prototype = {
	getTransformMatrices: function() {
		return this._transformMatrices;
	}
	,getScene: function() {
		return this._scene;
	}
	,_markAsDirty: function() {
		this._isDirty = true;
	}
	,prepare: function() {
		if(!this._isDirty) return;
		if(this._transformMatrices == null || this._transformMatrices.length != 16 * (this.bones.length + 1)) {
			var elements = 16 * (this.bones.length + 1);
			var this1;
			if(elements != null) this1 = new Float32Array(elements); else this1 = null;
			this._transformMatrices = this1;
		}
		var _g1 = 0;
		var _g = this.bones.length;
		while(_g1 < _g) {
			var index = _g1++;
			var bone = this.bones[index];
			var parentBone = bone._parent;
			if(parentBone != null) bone._matrix.multiplyToRef(parentBone.getWorldMatrix(),bone.getWorldMatrix()); else bone.getWorldMatrix().copyFrom(bone._matrix);
			bone._invertedAbsoluteTransform.multiplyToArray(bone.getWorldMatrix(),this._transformMatrices,index * 16);
		}
		this._identity.copyToArray(this._transformMatrices,this.bones.length * 16);
		this._isDirty = false;
	}
	,getAnimatables: function() {
		if(this._animatables == null || this._animatables.length != this.bones.length) {
			this._animatables = [];
			var _g1 = 0;
			var _g = this.bones.length;
			while(_g1 < _g) {
				var index = _g1++;
				this._animatables.push(this.bones[index]);
			}
		}
		return this._animatables;
	}
	,clone: function(name,id) {
		var result = new com_babylonhx_bones_Skeleton(name,id != null?id:name,this._scene);
		var _g1 = 0;
		var _g = this.bones.length;
		while(_g1 < _g) {
			var index = _g1++;
			var source = this.bones[index];
			var parentBone = null;
			if(source._parent != null) {
				var parentIndex = HxOverrides.indexOf(this.bones,source._parent,0);
				parentBone = result.bones[parentIndex];
			}
			var bone = new com_babylonhx_bones_Bone(source.name,result,parentBone,source._baseMatrix);
			var _g2 = 0;
			var _g3 = source.animations;
			while(_g2 < _g3.length) {
				var anim = _g3[_g2];
				++_g2;
				bone.animations.push(anim.clone());
			}
		}
		return result;
	}
	,dispose: function() {
		this.getScene().stopAnimation(this);
		this.getScene().removeSkeleton(this);
	}
	,__class__: com_babylonhx_bones_Skeleton
};
var com_babylonhx_cameras_Camera = $hx_exports.BABYLON.Camera = function(name,position,scene) {
	this._globalPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._activeMeshes = new com_babylonhx_tools_SmartArray(256);
	this._postProcessesTakenIndices = [];
	this._postProcesses = [];
	this._projectionMatrix = new com_babylonhx_math_Matrix();
	this._computedViewMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	this._rigCameras = [];
	this.cameraRigMode = 0;
	this.fovMode = 0;
	this.layerMask = -1;
	this.subCameras = [];
	this.viewport = new com_babylonhx_math_Viewport(0,0,1,1);
	this.isIntermediate = false;
	this.mode = 0;
	this.inertia = 0.9;
	this.maxZ = 10000.0;
	this.minZ = 1.0;
	this.fov = 0.8;
	this.orthoTop = null;
	this.orthoBottom = null;
	this.orthoRight = null;
	this.orthoLeft = null;
	this.upVector = new com_babylonhx_math_Vector3(0,1.0,0);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_Node.call(this,name,scene);
	this.position = position;
	scene.addCamera(this);
	if(scene.activeCamera == null) scene.activeCamera = this;
	this.getProjectionMatrix = $bind(this,this.getProjectionMatrix_default);
	this._getViewMatrix = $bind(this,this._getViewMatrix_default);
};
$hxClasses["com.babylonhx.cameras.Camera"] = com_babylonhx_cameras_Camera;
com_babylonhx_cameras_Camera.__name__ = true;
com_babylonhx_cameras_Camera.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_cameras_Camera.__super__ = com_babylonhx_Node;
com_babylonhx_cameras_Camera.prototype = $extend(com_babylonhx_Node.prototype,{
	get_globalPosition: function() {
		return this._globalPosition;
	}
	,getActiveMeshes: function() {
		return this._activeMeshes;
	}
	,isActiveMesh: function(mesh) {
		return this._activeMeshes.indexOf(mesh) != -1;
	}
	,_initCache: function() {
		com_babylonhx_Node.prototype._initCache.call(this);
		this._cache.position = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.upVector = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.mode = null;
		this._cache.minZ = null;
		this._cache.maxZ = null;
		this._cache.fov = null;
		this._cache.aspectRatio = null;
		this._cache.orthoLeft = null;
		this._cache.orthoRight = null;
		this._cache.orthoBottom = null;
		this._cache.orthoTop = null;
		this._cache.renderWidth = null;
		this._cache.renderHeight = null;
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
		if(!ignoreParentClass) com_babylonhx_Node.prototype._updateCache.call(this);
		var engine = this._scene._engine;
		this._cache.position.copyFrom(this.position);
		this._cache.upVector.copyFrom(this.upVector);
		this._cache.mode = this.mode;
		this._cache.minZ = this.minZ;
		this._cache.maxZ = this.maxZ;
		this._cache.fov = this.fov;
		this._cache.aspectRatio = engine.getAspectRatio(this);
		this._cache.orthoLeft = this.orthoLeft;
		this._cache.orthoRight = this.orthoRight;
		this._cache.orthoBottom = this.orthoBottom;
		this._cache.orthoTop = this.orthoTop;
		this._cache.renderWidth = engine.getRenderWidth();
		this._cache.renderHeight = engine.getRenderHeight();
	}
	,_updateFromScene: function() {
		this.updateCache();
		this._update();
	}
	,_isSynchronized: function() {
		return this._isSynchronizedViewMatrix() && this._isSynchronizedProjectionMatrix();
	}
	,_isSynchronizedViewMatrix: function() {
		if(!com_babylonhx_Node.prototype._isSynchronized.call(this)) return false;
		return this._cache.position.equals(this.position) && this._cache.upVector.equals(this.upVector) && this.isSynchronizedWithParent();
	}
	,_isSynchronizedProjectionMatrix: function() {
		var check = this._cache.mode == this.mode && this._cache.minZ == this.minZ && this._cache.maxZ == this.maxZ;
		if(!check) return false;
		var engine = this._scene._engine;
		if(this.mode == 0) check = this._cache.fov == this.fov && this._cache.aspectRatio == engine.getAspectRatio(this); else check = this._cache.orthoLeft == this.orthoLeft && this._cache.orthoRight == this.orthoRight && this._cache.orthoBottom == this.orthoBottom && this._cache.orthoTop == this.orthoTop && this._cache.renderWidth == engine.getRenderWidth() && this._cache.renderHeight == engine.getRenderHeight();
		return check;
	}
	,attachControl: function(element,noPreventDefault,useCtrlForPanning) {
		if(useCtrlForPanning == null) useCtrlForPanning = true;
		if(noPreventDefault == null) noPreventDefault = false;
	}
	,detachControl: function(element) {
	}
	,_update: function() {
		if(this.cameraRigMode != 0) this._updateRigCameras();
		this._checkInputs();
	}
	,_checkInputs: function() {
	}
	,attachPostProcess: function(postProcess,insertAt) {
		if(!postProcess.isReusable() && HxOverrides.indexOf(this._postProcesses,postProcess,0) > -1) {
			haxe_Log.trace("You're trying to reuse a post process not defined as reusable.",{ fileName : "Camera.hx", lineNumber : 228, className : "com.babylonhx.cameras.Camera", methodName : "attachPostProcess"});
			return 0;
		}
		if(insertAt == null || insertAt < 0) {
			this._postProcesses.push(postProcess);
			this._postProcessesTakenIndices.push(this._postProcesses.length - 1);
			return this._postProcesses.length - 1;
		}
		var add = 0;
		if(this._postProcesses[insertAt] != null) {
			var start = this._postProcesses.length - 1;
			var i = start;
			while(i >= insertAt + 1) {
				this._postProcesses[i + 1] = this._postProcesses[i];
				--i;
			}
			add = 1;
		}
		var _g1 = 0;
		var _g = this._postProcessesTakenIndices.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(this._postProcessesTakenIndices[i1] < insertAt) continue;
			var start1 = this._postProcessesTakenIndices.length - 1;
			var j = start1;
			while(j >= i1) {
				this._postProcessesTakenIndices[j + 1] = this._postProcessesTakenIndices[j] + add;
				--j;
			}
			this._postProcessesTakenIndices[i1] = insertAt;
			break;
		}
		if(add == 0 && HxOverrides.indexOf(this._postProcessesTakenIndices,insertAt,0) == -1) this._postProcessesTakenIndices.push(insertAt);
		var result = insertAt + add;
		this._postProcesses[result] = postProcess;
		return result;
	}
	,detachPostProcess: function(postProcess,atIndices) {
		var result = [];
		if(atIndices == null) {
			var _g1 = 0;
			var _g = this._postProcesses.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this._postProcesses[i] != postProcess) continue;
				this._postProcesses.splice(i,1);
				var index = HxOverrides.indexOf(this._postProcessesTakenIndices,i,0);
				this._postProcessesTakenIndices.splice(index,1);
			}
		} else {
			if((atIndices instanceof Array) && atIndices.__enum__ == null) atIndices = atIndices; else atIndices = [atIndices];
			var _g11 = 0;
			var _g2 = atIndices.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var foundPostProcess = this._postProcesses[atIndices[i1]];
				if(foundPostProcess != postProcess) {
					result.push(i1);
					continue;
				}
				this._postProcesses.splice(atIndices[i1],1);
				var index1 = HxOverrides.indexOf(this._postProcessesTakenIndices,atIndices[i1],0);
				this._postProcessesTakenIndices.splice(index1,1);
			}
		}
		return result;
	}
	,getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		var viewMatrix = this.getViewMatrix();
		viewMatrix.invertToRef(this._worldMatrix);
		return this._worldMatrix;
	}
	,_getViewMatrix_default: function() {
		return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,getViewMatrix: function(force) {
		if(force == null) force = false;
		this._computedViewMatrix = this._computeViewMatrix(force);
		if(!force && this._isSynchronizedViewMatrix()) return this._computedViewMatrix;
		if(this.parent == null || ($_=this.parent,$bind($_,$_.getWorldMatrix)) == null) this._globalPosition.copyFrom(this.position); else {
			if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
			this._computedViewMatrix.invertToRef(this._worldMatrix);
			this._worldMatrix.multiplyToRef(this.parent.getWorldMatrix(),this._computedViewMatrix);
			this._globalPosition.copyFromFloats(this._computedViewMatrix.m[12],this._computedViewMatrix.m[13],this._computedViewMatrix.m[14]);
			this._computedViewMatrix.invert();
			this._parentRenderId = this.parent._currentRenderId;
		}
		this._currentRenderId = this._scene._renderId;
		return this._computedViewMatrix;
	}
	,_computeViewMatrix: function(force) {
		if(force == null) force = false;
		if(!force && this._isSynchronizedViewMatrix()) return this._computedViewMatrix;
		this._computedViewMatrix = this._getViewMatrix();
		this._currentRenderId = this._scene._renderId;
		return this._computedViewMatrix;
	}
	,getProjectionMatrix_default: function(force) {
		if(force == null) force = false;
		if(!force && this._isSynchronizedProjectionMatrix()) return this._projectionMatrix;
		var engine = this._scene._engine;
		if(this.mode == 0) {
			if(this.minZ <= 0) this.minZ = 0.1;
			com_babylonhx_math_Matrix.PerspectiveFovLHToRef(this.fov,engine.getAspectRatio(this),this.minZ,this.maxZ,this._projectionMatrix,this.fovMode);
			return this._projectionMatrix;
		}
		var halfWidth = engine.getRenderWidth() / 2.0;
		var halfHeight = engine.getRenderHeight() / 2.0;
		com_babylonhx_math_Matrix.OrthoOffCenterLHToRef(this.orthoLeft == null?-halfWidth:this.orthoLeft,this.orthoRight == null?halfWidth:this.orthoRight,this.orthoBottom == null?-halfHeight:this.orthoBottom,this.orthoTop == null?halfHeight:this.orthoTop,this.minZ,this.maxZ,this._projectionMatrix);
		return this._projectionMatrix;
	}
	,dispose: function() {
		this._scene.stopAnimation(this);
		this._scene.removeCamera(this);
		while(this._rigCameras.length > 0) this._rigCameras.pop().dispose();
		var _g1 = 0;
		var _g = this._postProcessesTakenIndices.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._postProcesses[this._postProcessesTakenIndices[i]].dispose(this);
		}
	}
	,setCameraRigMode: function(mode,rigParams) {
		while(this._rigCameras.length > 0) this._rigCameras.pop().dispose();
		this.cameraRigMode = mode;
		this._cameraRigParams = { };
		var _g = this.cameraRigMode;
		switch(_g) {
		case 10:case 11:case 12:case 13:
			if(rigParams.interaxialDistance != null) this._cameraRigParams.interaxialDistance = rigParams.interaxialDistance; else this._cameraRigParams.interaxialDistance = 0.0637;
			this._cameraRigParams.stereoHalfAngle = this._cameraRigParams.interaxialDistance / 0.0637 * Math.PI / 180;
			this._rigCameras.push(this.createRigCamera(this.name + "_L",0));
			this._rigCameras.push(this.createRigCamera(this.name + "_R",1));
			break;
		}
		var postProcesses = [];
		var _g1 = this.cameraRigMode;
		switch(_g1) {
		case 10:
			postProcesses.push(new com_babylonhx_postprocess_PassPostProcess(this.name + "_passthru",1.0,this._rigCameras[0]));
			this._rigCameras[0].isIntermediate = true;
			postProcesses.push(new com_babylonhx_postprocess_AnaglyphPostProcess(this.name + "_anaglyph",1.0,this._rigCameras[1]));
			postProcesses[1].onApply = function(effect) {
				effect._engine.setTextureFromPostProcess(HxOverrides.indexOf(effect._samplers,"leftSampler",0),postProcesses[0]);
			};
			break;
		case 11:case 12:case 13:
			var isStereoscopicHoriz = this.cameraRigMode == 11 || this.cameraRigMode == 12;
			var firstCamIndex;
			if(this.cameraRigMode == 12) firstCamIndex = 1; else firstCamIndex = 0;
			var secondCamIndex = 1 - firstCamIndex;
			postProcesses.push(new com_babylonhx_postprocess_PassPostProcess(this.name + "_passthru",1.0,this._rigCameras[firstCamIndex]));
			this._rigCameras[firstCamIndex].isIntermediate = true;
			postProcesses.push(new com_babylonhx_postprocess_StereoscopicInterlacePostProcess(this.name + "_stereoInterlace",this._rigCameras[secondCamIndex],postProcesses[0],isStereoscopicHoriz));
			break;
		case 20:
			this._rigCameras.push(this.createRigCamera(this.name + "_L",0));
			this._rigCameras.push(this.createRigCamera(this.name + "_R",1));
			var metrics;
			if(rigParams.vrCameraMetrics != null) metrics = rigParams.vrCameraMetrics; else metrics = com_babylonhx_cameras_VRCameraMetrics.GetDefault();
			this._rigCameras[0]._cameraRigParams.vrMetrics = metrics;
			this._rigCameras[0].viewport = new com_babylonhx_math_Viewport(0,0,0.5,1.0);
			this._rigCameras[0]._cameraRigParams.vrWorkMatrix = new com_babylonhx_math_Matrix();
			this._rigCameras[0]._cameraRigParams.vrHMatrix = metrics.get_leftHMatrix();
			this._rigCameras[0]._cameraRigParams.vrPreViewMatrix = metrics.get_leftPreViewMatrix();
			this._rigCameras[0].getProjectionMatrix = ($_=this._rigCameras[0],$bind($_,$_._getVRProjectionMatrix));
			if(metrics.compensateDistortion) postProcesses.push(new com_babylonhx_postprocess_VRDistortionCorrectionPostProcess("VR_Distort_Compensation_Left",this._rigCameras[0],false,metrics));
			this._rigCameras[1]._cameraRigParams.vrMetrics = this._rigCameras[0]._cameraRigParams.vrMetrics;
			this._rigCameras[1].viewport = new com_babylonhx_math_Viewport(0.5,0,0.5,1.0);
			this._rigCameras[1]._cameraRigParams.vrWorkMatrix = new com_babylonhx_math_Matrix();
			this._rigCameras[1]._cameraRigParams.vrHMatrix = metrics.get_rightHMatrix();
			this._rigCameras[1]._cameraRigParams.vrPreViewMatrix = metrics.get_rightPreViewMatrix();
			this._rigCameras[1].getProjectionMatrix = ($_=this._rigCameras[1],$bind($_,$_._getVRProjectionMatrix));
			if(metrics.compensateDistortion) postProcesses.push(new com_babylonhx_postprocess_VRDistortionCorrectionPostProcess("VR_Distort_Compensation_Right",this._rigCameras[1],true,metrics));
			break;
		}
		this._update();
	}
	,_getVRProjectionMatrix: function(force) {
		if(force == null) force = false;
		com_babylonhx_math_Matrix.PerspectiveFovLHToRef(this._cameraRigParams.vrMetrics.aspectRatioFov,this._cameraRigParams.vrMetrics.aspectRatio,this.minZ,this.maxZ,this._cameraRigParams.vrWorkMatrix);
		this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrHMatrix,this._projectionMatrix);
		return this._projectionMatrix;
	}
	,setCameraRigParameter: function(name,value) {
		if(name == "interaxialDistance") this._cameraRigParams.stereoHalfAngle = value / 0.0637 * Math.PI / 180;
	}
	,createRigCamera: function(name,cameraIndex) {
		return null;
	}
	,_updateRigCameras: function() {
		var _g1 = 0;
		var _g = this._rigCameras.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._rigCameras[i].minZ = this.minZ;
			this._rigCameras[i].maxZ = this.maxZ;
			this._rigCameras[i].fov = this.fov;
		}
		if(this.cameraRigMode == 10) this._rigCameras[0].viewport = this._rigCameras[1].viewport = this.viewport;
	}
	,__class__: com_babylonhx_cameras_Camera
	,__properties__: {get_globalPosition:"get_globalPosition"}
});
var com_babylonhx_cameras_TargetCamera = $hx_exports.BABYLON.TargetCamera = function(name,position,scene) {
	this._tempMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._lookAtTemp = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformedReferencePoint = new com_babylonhx_math_Vector3(0,0,0);
	this._referencePoint = new com_babylonhx_math_Vector3(0,0,1);
	this._cameraRotationMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._cameraTransformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._camMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._currentTarget = new com_babylonhx_math_Vector3(0,0,0);
	this.lockedTarget = null;
	this.noRotationConstraint = false;
	this.speed = 2.0;
	this.rotation = new com_babylonhx_math_Vector3(0,0,0);
	this.cameraRotation = new com_babylonhx_math_Vector2(0,0);
	this.cameraDirection = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_cameras_Camera.call(this,name,position,scene);
};
$hxClasses["com.babylonhx.cameras.TargetCamera"] = com_babylonhx_cameras_TargetCamera;
com_babylonhx_cameras_TargetCamera.__name__ = true;
com_babylonhx_cameras_TargetCamera.__super__ = com_babylonhx_cameras_Camera;
com_babylonhx_cameras_TargetCamera.prototype = $extend(com_babylonhx_cameras_Camera.prototype,{
	getFrontPosition: function(distance) {
		var direction = this.getTarget().subtract(this.position);
		direction.normalize();
		direction.x *= distance;
		direction.y *= distance;
		direction.z *= distance;
		direction;
		return this.get_globalPosition().add(direction);
	}
	,_getLockedTargetPosition: function() {
		if(this.lockedTarget == null) return null;
		if(this.lockedTarget.position != null) return this.lockedTarget.position; else return this.lockedTarget;
	}
	,_initCache: function() {
		com_babylonhx_cameras_Camera.prototype._initCache.call(this);
		this._cache.lockedTarget = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.rotation = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
		if(!ignoreParentClass) com_babylonhx_cameras_Camera.prototype._updateCache.call(this);
		var lockedTargetPosition = this._getLockedTargetPosition();
		if(lockedTargetPosition == null) this._cache.lockedTarget = null; else if(this._cache.lockedTarget == null) this._cache.lockedTarget = new com_babylonhx_math_Vector3(lockedTargetPosition.x,lockedTargetPosition.y,lockedTargetPosition.z); else this._cache.lockedTarget.copyFrom(lockedTargetPosition);
		this._cache.rotation.copyFrom(this.rotation);
	}
	,_isSynchronizedViewMatrix: function() {
		if(!com_babylonhx_cameras_Camera.prototype._isSynchronizedViewMatrix.call(this)) return false;
		var lockedTargetPosition = this._getLockedTargetPosition();
		return (this._cache.lockedTarget != null?this._cache.lockedTarget.equals(lockedTargetPosition):lockedTargetPosition == null) && this._cache.rotation.equals(this.rotation);
	}
	,_computeLocalCameraSpeed: function() {
		var engine = this._scene._engine;
		return this.speed * (engine.deltaTime / (engine.fps * 10.0));
	}
	,setTarget: function(target) {
		this.upVector.normalize();
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,target,this.upVector,this._camMatrix);
		this._camMatrix.invert();
		this.rotation.x = Math.atan(this._camMatrix.m[6] / this._camMatrix.m[10]);
		com_babylonhx_cameras_TargetCamera.vDir = target.subtract(this.position);
		if(com_babylonhx_cameras_TargetCamera.vDir.x >= 0.0) this.rotation.y = -Math.atan(com_babylonhx_cameras_TargetCamera.vDir.z / com_babylonhx_cameras_TargetCamera.vDir.x) + Math.PI / 2.0; else this.rotation.y = -Math.atan(com_babylonhx_cameras_TargetCamera.vDir.z / com_babylonhx_cameras_TargetCamera.vDir.x) - Math.PI / 2.0;
		this.rotation.z = -Math.acos(com_babylonhx_math_Vector3.Dot(com_babylonhx_cameras_TargetCamera.zUpVector,this.upVector));
	}
	,getTarget: function() {
		return this._currentTarget;
	}
	,_decideIfNeedsToMove: function() {
		return Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;
	}
	,_updatePosition: function() {
		this.position.addInPlace(this.cameraDirection);
	}
	,_checkInputs: function() {
		var needToMove = this._decideIfNeedsToMove();
		var needToRotate = Math.abs(this.cameraRotation.x) > 0 || Math.abs(this.cameraRotation.y) > 0;
		if(needToMove) this._updatePosition();
		if(needToRotate) {
			this.rotation.x += this.cameraRotation.x;
			this.rotation.y += this.cameraRotation.y;
			if(!this.noRotationConstraint) {
				var limit = Math.PI / 2 * 0.95;
				if(this.rotation.x > limit) this.rotation.x = limit;
				if(this.rotation.x < -limit) this.rotation.x = -limit;
			}
		}
		if(needToMove) {
			if(Math.abs(this.cameraDirection.x) < 0.001) this.cameraDirection.x = 0;
			if(Math.abs(this.cameraDirection.y) < 0.001) this.cameraDirection.y = 0;
			if(Math.abs(this.cameraDirection.z) < 0.001) this.cameraDirection.z = 0;
			this.cameraDirection.scaleInPlace(this.inertia);
		}
		if(needToRotate) {
			if(Math.abs(this.cameraRotation.x) < 0.001) this.cameraRotation.x = 0;
			if(Math.abs(this.cameraRotation.y) < 0.001) this.cameraRotation.y = 0;
			this.cameraRotation.scaleInPlace(this.inertia);
		}
		com_babylonhx_cameras_Camera.prototype._checkInputs.call(this);
	}
	,_getViewMatrix_default: function() {
		if(this.lockedTarget == null) {
			if(this.upVector.x != 0 || this.upVector.y != 1.0 || this.upVector.z != 0) {
				com_babylonhx_math_Matrix.LookAtLHToRef(new com_babylonhx_math_Vector3(0,0,0),this._referencePoint,this.upVector,this._lookAtTemp);
				com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
				com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._cameraRotationMatrix);
				this._lookAtTemp.multiplyToRef(this._cameraRotationMatrix,this._tempMatrix);
				this._lookAtTemp.invert();
				this._tempMatrix.multiplyToRef(this._lookAtTemp,this._cameraRotationMatrix);
			} else {
				com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
				com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._cameraRotationMatrix);
			}
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this._referencePoint,this._cameraRotationMatrix,this._transformedReferencePoint);
			this.position.addToRef(this._transformedReferencePoint,this._currentTarget);
		} else this._currentTarget.copyFrom(this._getLockedTargetPosition());
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,this._currentTarget,this.upVector,this._viewMatrix);
		return this._viewMatrix;
	}
	,_getVRViewMatrix: function() {
		com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
		com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._cameraRotationMatrix);
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this._referencePoint,this._cameraRotationMatrix,this._transformedReferencePoint);
		com_babylonhx_math_Vector3.TransformNormalToRef(this.upVector,this._cameraRotationMatrix,this._cameraRigParams.vrActualUp);
		this.position.addToRef(this._transformedReferencePoint,this._currentTarget);
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,this._currentTarget,this._cameraRigParams.vrActualUp,this._cameraRigParams.vrWorkMatrix);
		this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrPreViewMatrix,this._viewMatrix);
		return this._viewMatrix;
	}
	,createRigCamera: function(name,cameraIndex) {
		if(this.cameraRigMode != 0) {
			var rigCamera = new com_babylonhx_cameras_TargetCamera(name,this.position.clone(),this._scene);
			if(this.cameraRigMode == 20) {
				rigCamera._cameraRigParams = { };
				rigCamera._cameraRigParams.vrActualUp = new com_babylonhx_math_Vector3(0,0,0);
				rigCamera._getViewMatrix = $bind(rigCamera,rigCamera._getVRViewMatrix);
			}
			return rigCamera;
		}
		return null;
	}
	,_updateRigCameras: function() {
		var _g = this.cameraRigMode;
		switch(_g) {
		case 10:case 11:case 12:case 13:case 20:
			var camLeft = this._rigCameras[0];
			var camRight = this._rigCameras[1];
			if(this.cameraRigMode == 20) {
				camLeft.rotation.x = camRight.rotation.x = this.rotation.x;
				camLeft.rotation.y = camRight.rotation.y = this.rotation.y;
				camLeft.rotation.z = camRight.rotation.z = this.rotation.z;
				camLeft.position.copyFrom(this.position);
				camRight.position.copyFrom(this.position);
			} else {
				this._getRigCamPosition(-this._cameraRigParams.stereoHalfAngle,camLeft.position);
				this._getRigCamPosition(this._cameraRigParams.stereoHalfAngle,camRight.position);
				camLeft.setTarget(this.getTarget());
				camRight.setTarget(this.getTarget());
			}
			break;
		}
		com_babylonhx_cameras_Camera.prototype._updateRigCameras.call(this);
	}
	,_getRigCamPosition: function(halfSpace,result) {
		if(this._rigCamTransformMatrix == null) this._rigCamTransformMatrix = new com_babylonhx_math_Matrix();
		var target = this.getTarget();
		com_babylonhx_math_Matrix.Translation(-target.x,-target.y,-target.z).multiplyToRef(com_babylonhx_math_Matrix.RotationY(halfSpace),this._rigCamTransformMatrix);
		this._rigCamTransformMatrix = this._rigCamTransformMatrix.multiply(com_babylonhx_math_Matrix.Translation(target.x,target.y,target.z));
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this._rigCamTransformMatrix,result);
	}
	,__class__: com_babylonhx_cameras_TargetCamera
});
var com_babylonhx_cameras_FreeCamera = $hx_exports.BABYLON.FreeCamera = function(name,position,scene) {
	this._newPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._diffPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._oldPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._needMoveForGravity = true;
	this._collider = new com_babylonhx_collisions_Collider();
	this._keys = [];
	this.angularSensibility = 2000.0;
	this.applyGravity = false;
	this.checkCollisions = false;
	this.keysRight = [com_babylonhx_utils_Keycodes.right,com_babylonhx_utils_Keycodes.key_d];
	this.keysLeft = [com_babylonhx_utils_Keycodes.left,com_babylonhx_utils_Keycodes.key_a];
	this.keysDown = [com_babylonhx_utils_Keycodes.down,com_babylonhx_utils_Keycodes.key_s];
	this.keysUp = [com_babylonhx_utils_Keycodes.up,com_babylonhx_utils_Keycodes.key_w];
	this.ellipsoid = new com_babylonhx_math_Vector3(0.5,1,0.5);
	com_babylonhx_cameras_TargetCamera.call(this,name,position,scene);
};
$hxClasses["com.babylonhx.cameras.FreeCamera"] = com_babylonhx_cameras_FreeCamera;
com_babylonhx_cameras_FreeCamera.__name__ = true;
com_babylonhx_cameras_FreeCamera.__super__ = com_babylonhx_cameras_TargetCamera;
com_babylonhx_cameras_FreeCamera.prototype = $extend(com_babylonhx_cameras_TargetCamera.prototype,{
	attachControl: function(element,noPreventDefault,useCtrlForPanning) {
		if(useCtrlForPanning == null) useCtrlForPanning = true;
		if(noPreventDefault == null) noPreventDefault = false;
		var _g = this;
		var previousPosition = null;
		var engine = this._scene._engine;
		this._attachedElement = element;
		if(this._onMouseDown == null) {
			this._onMouseDown = function(x,y,button) {
				previousPosition = { x : x, y : y};
			};
			this._onMouseUp = function(x1,y1,button1) {
				previousPosition = null;
			};
			this._onMouseOut = function() {
				previousPosition = null;
				_g._keys = [];
			};
			this._onMouseMove = function(x2,y2) {
				if(previousPosition == null && !engine.isPointerLock) return;
				var offsetX = 0;
				var offsetY = 0;
				if(!engine.isPointerLock) {
					offsetX = x2 - previousPosition.x;
					offsetY = y2 - previousPosition.y;
				}
				_g.cameraRotation.y += offsetX / _g.angularSensibility;
				_g.cameraRotation.x += offsetY / _g.angularSensibility;
				previousPosition = { x : x2, y : y2};
			};
			this._onKeyDown = function(keyCode) {
				if(HxOverrides.indexOf(_g.keysUp,keyCode,0) != -1 || HxOverrides.indexOf(_g.keysDown,keyCode,0) != -1 || HxOverrides.indexOf(_g.keysLeft,keyCode,0) != -1 || HxOverrides.indexOf(_g.keysRight,keyCode,0) != -1) {
					var index = HxOverrides.indexOf(_g._keys,keyCode,0);
					if(index == -1) _g._keys.push(keyCode);
				}
			};
			this._onKeyUp = function(keyCode1) {
				if(HxOverrides.indexOf(_g.keysUp,keyCode1,0) != -1 || HxOverrides.indexOf(_g.keysDown,keyCode1,0) != -1 || HxOverrides.indexOf(_g.keysLeft,keyCode1,0) != -1 || HxOverrides.indexOf(_g.keysRight,keyCode1,0) != -1) {
					var index1 = HxOverrides.indexOf(_g._keys,keyCode1,0);
					if(index1 >= 0) _g._keys.splice(index1,1);
				}
			};
			this._onLostFocus = function() {
				_g._keys = [];
			};
			this._reset = function() {
				_g._keys = [];
				previousPosition = null;
				_g.cameraDirection = new com_babylonhx_math_Vector3(0,0,0);
				_g.cameraRotation = new com_babylonhx_math_Vector2(0,0);
			};
		}
		com_babylonhx_Engine.keyDown.push(this._onKeyDown);
		com_babylonhx_Engine.keyUp.push(this._onKeyUp);
		com_babylonhx_Engine.mouseDown.push(this._onMouseDown);
		com_babylonhx_Engine.mouseUp.push(this._onMouseUp);
		com_babylonhx_Engine.mouseMove.push(this._onMouseMove);
	}
	,detachControl: function(element) {
		var x = this._onKeyDown;
		HxOverrides.remove(com_babylonhx_Engine.keyDown,x);
		var x1 = this._onKeyUp;
		HxOverrides.remove(com_babylonhx_Engine.keyUp,x1);
		var x2 = this._onMouseDown;
		HxOverrides.remove(com_babylonhx_Engine.mouseDown,x2);
		var x3 = this._onMouseUp;
		HxOverrides.remove(com_babylonhx_Engine.mouseUp,x3);
		var x4 = this._onMouseMove;
		HxOverrides.remove(com_babylonhx_Engine.mouseMove,x4);
		if(this._reset != null) this._reset();
	}
	,_collideWithWorld: function(velocity) {
		var globalPosition = null;
		if(this.parent != null) globalPosition = com_babylonhx_math_Vector3.TransformCoordinates(this.position,this.parent.getWorldMatrix()); else globalPosition = this.position;
		globalPosition.subtractFromFloatsToRef(0,this.ellipsoid.y,0,this._oldPosition);
		this._collider.radius = this.ellipsoid;
		var actualVelocity = velocity;
		if(this.applyGravity) actualVelocity = velocity.add(this._scene.gravity);
		this._scene.collisionCoordinator.getNewPosition(this._oldPosition,actualVelocity,this._collider,3,null,$bind(this,this._onCollisionPositionChange),this.uniqueId);
	}
	,_onCollisionPositionChange: function(collisionId,newPosition,collidedMesh) {
		var _g = this;
		if(this._scene.get_workerCollisions()) newPosition.multiplyInPlace(this._collider.radius);
		var updatePosition = function(newPos) {
			_g._newPosition.copyFrom(newPos);
			_g._newPosition.subtractToRef(_g._oldPosition,_g._diffPosition);
			var oldPosition = _g.position.clone();
			if(_g._diffPosition.length() > com_babylonhx_Engine.CollisionsEpsilon) {
				_g.position.addInPlace(_g._diffPosition);
				if(_g.onCollide != null && collidedMesh != null) _g.onCollide(collidedMesh);
			}
		};
		updatePosition(newPosition);
	}
	,_checkInputs: function() {
		if(this._localDirection == null) {
			this._localDirection = new com_babylonhx_math_Vector3(0,0,0);
			this._transformedDirection = new com_babylonhx_math_Vector3(0,0,0);
		}
		var _g1 = 0;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var index = _g1++;
			var keyCode = this._keys[index];
			var speed = this._computeLocalCameraSpeed();
			if(HxOverrides.indexOf(this.keysLeft,keyCode,0) != -1) this._localDirection.copyFromFloats(-speed,0,0); else if(HxOverrides.indexOf(this.keysUp,keyCode,0) != -1) this._localDirection.copyFromFloats(0,0,speed); else if(HxOverrides.indexOf(this.keysRight,keyCode,0) != -1) this._localDirection.copyFromFloats(speed,0,0); else if(HxOverrides.indexOf(this.keysDown,keyCode,0) != -1) this._localDirection.copyFromFloats(0,0,-speed);
			this.getViewMatrix().invertToRef(this._cameraTransformMatrix);
			com_babylonhx_math_Vector3.TransformNormalToRef(this._localDirection,this._cameraTransformMatrix,this._transformedDirection);
			this.cameraDirection.addInPlace(this._transformedDirection);
		}
		com_babylonhx_cameras_TargetCamera.prototype._checkInputs.call(this);
	}
	,_decideIfNeedsToMove: function() {
		return this._needMoveForGravity || Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;
	}
	,_updatePosition: function() {
		if(this.checkCollisions && this._scene.collisionsEnabled) this._collideWithWorld(this.cameraDirection); else this.position.addInPlace(this.cameraDirection);
	}
	,__class__: com_babylonhx_cameras_FreeCamera
});
var com_babylonhx_cameras_VRCameraMetrics = $hx_exports.BABYLON.VRCameraMetrics = function() {
	this.compensateDistortion = true;
};
$hxClasses["com.babylonhx.cameras.VRCameraMetrics"] = com_babylonhx_cameras_VRCameraMetrics;
com_babylonhx_cameras_VRCameraMetrics.__name__ = true;
com_babylonhx_cameras_VRCameraMetrics.GetDefault = function() {
	var result = new com_babylonhx_cameras_VRCameraMetrics();
	result.hResolution = 1280;
	result.vResolution = 800;
	result.hScreenSize = 0.149759993;
	result.vScreenSize = 0.0935999975;
	result.vScreenCenter = 0.0467999987;
	result.eyeToScreenDistance = 0.0410000011;
	result.lensSeparationDistance = 0.0635000020;
	result.interpupillaryDistance = 0.0640000030;
	result.distortionK = [1.0,0.219999999,0.239999995,0.0];
	result.chromaAbCorrection = [0.995999992,-0.00400000019,1.01400006,0.0];
	result.postProcessScaleFactor = 1.714605507808412;
	result.lensCenterOffset = 0.151976421;
	return result;
};
com_babylonhx_cameras_VRCameraMetrics.prototype = {
	get_aspectRatio: function() {
		return this.hResolution / (2 * this.vResolution);
	}
	,get_aspectRatioFov: function() {
		return 2 * Math.atan(this.postProcessScaleFactor * this.vScreenSize / (2 * this.eyeToScreenDistance));
	}
	,get_leftHMatrix: function() {
		var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;
		var h = 4 * meters / this.hScreenSize;
		return com_babylonhx_math_Matrix.Translation(h,0,0);
	}
	,get_rightHMatrix: function() {
		var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;
		var h = 4 * meters / this.hScreenSize;
		return com_babylonhx_math_Matrix.Translation(-h,0,0);
	}
	,get_leftPreViewMatrix: function() {
		return com_babylonhx_math_Matrix.Translation(0.5 * this.interpupillaryDistance,0,0);
	}
	,get_rightPreViewMatrix: function() {
		return com_babylonhx_math_Matrix.Translation(-0.5 * this.interpupillaryDistance,0,0);
	}
	,__class__: com_babylonhx_cameras_VRCameraMetrics
	,__properties__: {get_rightPreViewMatrix:"get_rightPreViewMatrix",get_leftPreViewMatrix:"get_leftPreViewMatrix",get_rightHMatrix:"get_rightHMatrix",get_leftHMatrix:"get_leftHMatrix",get_aspectRatioFov:"get_aspectRatioFov",get_aspectRatio:"get_aspectRatio"}
};
var com_babylonhx_collisions_Collider = $hx_exports.BABYLON.Collider = function() {
	this._displacementVector = new com_babylonhx_math_Vector3(0,0,0);
	this._slidePlaneNormal = new com_babylonhx_math_Vector3(0,0,0);
	this._destinationPoint = new com_babylonhx_math_Vector3(0,0,0);
	this._baseToVertex = new com_babylonhx_math_Vector3(0,0,0);
	this._edge = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector4 = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector3 = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector2 = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector = new com_babylonhx_math_Vector3(0,0,0);
	this._planeIntersectionPoint = new com_babylonhx_math_Vector3(0,0,0);
	this._collisionPoint = new com_babylonhx_math_Vector3(0,0,0);
	this.normalizedVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this.velocityWorld = new com_babylonhx_math_Vector3(0,0,0);
	this.basePointWorld = new com_babylonhx_math_Vector3(0,0,0);
	this.retry = 0;
	this.radius = new com_babylonhx_math_Vector3(1,1,1);
};
$hxClasses["com.babylonhx.collisions.Collider"] = com_babylonhx_collisions_Collider;
com_babylonhx_collisions_Collider.__name__ = true;
com_babylonhx_collisions_Collider.intersectBoxAASphere = function(boxMin,boxMax,sphereCenter,sphereRadius) {
	if(boxMin.x > sphereCenter.x + sphereRadius) return false;
	if(sphereCenter.x - sphereRadius > boxMax.x) return false;
	if(boxMin.y > sphereCenter.y + sphereRadius) return false;
	if(sphereCenter.y - sphereRadius > boxMax.y) return false;
	if(boxMin.z > sphereCenter.z + sphereRadius) return false;
	if(sphereCenter.z - sphereRadius > boxMax.z) return false;
	return true;
};
com_babylonhx_collisions_Collider.getLowestRoot = function(a,b,c,maxR) {
	var determinant = b * b - 4.0 * a * c;
	var result = { root : 0, found : false};
	if(determinant < 0) return result;
	var sqrtD = Math.sqrt(determinant);
	var r1 = (-b - sqrtD) / (2.0 * a);
	var r2 = (-b + sqrtD) / (2.0 * a);
	if(r1 > r2) {
		var temp = r2;
		r2 = r1;
		r1 = temp;
	}
	if(r1 > 0 && r1 < maxR) {
		result.root = r1;
		result.found = true;
		return result;
	}
	if(r2 > 0 && r2 < maxR) {
		result.root = r2;
		result.found = true;
		return result;
	}
	return result;
};
com_babylonhx_collisions_Collider.prototype = {
	_initialize: function(source,dir,e) {
		this.velocity = dir;
		com_babylonhx_math_Vector3.NormalizeToRef(dir,this.normalizedVelocity);
		this.basePoint = source;
		source.multiplyToRef(this.radius,this.basePointWorld);
		dir.multiplyToRef(this.radius,this.velocityWorld);
		this.velocityWorldLength = this.velocityWorld.length();
		this.epsilon = e;
		this.collisionFound = false;
	}
	,_checkPointInTriangle: function(point,pa,pb,pc,n) {
		pa.subtractToRef(point,this._tempVector);
		pb.subtractToRef(point,this._tempVector2);
		com_babylonhx_math_Vector3.CrossToRef(this._tempVector,this._tempVector2,this._tempVector4);
		var d = com_babylonhx_math_Vector3.Dot(this._tempVector4,n);
		if(d < 0) return false;
		pc.subtractToRef(point,this._tempVector3);
		com_babylonhx_math_Vector3.CrossToRef(this._tempVector2,this._tempVector3,this._tempVector4);
		d = com_babylonhx_math_Vector3.Dot(this._tempVector4,n);
		if(d < 0) return false;
		com_babylonhx_math_Vector3.CrossToRef(this._tempVector3,this._tempVector,this._tempVector4);
		d = com_babylonhx_math_Vector3.Dot(this._tempVector4,n);
		return d >= 0;
	}
	,_canDoCollision: function(sphereCenter,sphereRadius,vecMin,vecMax) {
		var distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(this.basePointWorld,sphereCenter));
		var max = Math.max(Math.max(this.radius.x,this.radius.y),this.radius.z);
		if(distance > this.velocityWorldLength + max + sphereRadius) return false;
		if(!com_babylonhx_collisions_Collider.intersectBoxAASphere(vecMin,vecMax,this.basePointWorld,this.velocityWorldLength + max)) return false;
		return true;
	}
	,_testTriangle: function(faceIndex,subMesh,p1,p2,p3) {
		var t0 = 0;
		var embeddedInPlane = false;
		if(subMesh._trianglePlanes == null) subMesh._trianglePlanes = [];
		if(subMesh._trianglePlanes[faceIndex] == null) {
			subMesh._trianglePlanes[faceIndex] = new com_babylonhx_math_Plane(0,0,0,0);
			subMesh._trianglePlanes[faceIndex].copyFromPoints(p1,p2,p3);
		}
		var trianglePlane = subMesh._trianglePlanes[faceIndex];
		if(subMesh.getMaterial() == null && !trianglePlane.isFrontFacingTo(this.normalizedVelocity,0)) return;
		var signedDistToTrianglePlane = com_babylonhx_math_Vector3.Dot(this.basePoint,trianglePlane.normal) + trianglePlane.d;
		var normalDotVelocity = com_babylonhx_math_Vector3.Dot(trianglePlane.normal,this.velocity);
		if(normalDotVelocity == 0) {
			if(Math.abs(signedDistToTrianglePlane) >= 1.0) return;
			embeddedInPlane = true;
			t0 = 0;
		} else {
			t0 = (-1. - signedDistToTrianglePlane) / normalDotVelocity;
			var t1 = (1.0 - signedDistToTrianglePlane) / normalDotVelocity;
			if(t0 > t1) {
				var temp = t1;
				t1 = t0;
				t0 = temp;
			}
			if(t0 > 1.0 || t1 < 0.0) return;
			if(t0 < 0) t0 = 0;
			if(t0 > 1.0) t0 = 1.0;
		}
		this._collisionPoint.copyFromFloats(0,0,0);
		var found = false;
		var t = 1.0;
		if(!embeddedInPlane) {
			this.basePoint.subtractToRef(trianglePlane.normal,this._planeIntersectionPoint);
			this.velocity.scaleToRef(t0,this._tempVector);
			this._planeIntersectionPoint.addInPlace(this._tempVector);
			if(this._checkPointInTriangle(this._planeIntersectionPoint,p1,p2,p3,trianglePlane.normal)) {
				found = true;
				t = t0;
				this._collisionPoint.copyFrom(this._planeIntersectionPoint);
			}
		}
		if(!found) {
			var velocitySquaredLength = this.velocity.lengthSquared();
			var a = velocitySquaredLength;
			this.basePoint.subtractToRef(p1,this._tempVector);
			var b = 2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._tempVector);
			var c = this._tempVector.lengthSquared() - 1.0;
			var lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				t = lowestRoot.root;
				found = true;
				this._collisionPoint.copyFrom(p1);
			}
			this.basePoint.subtractToRef(p2,this._tempVector);
			b = 2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._tempVector);
			c = this._tempVector.lengthSquared() - 1.0;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				t = lowestRoot.root;
				found = true;
				this._collisionPoint.copyFrom(p2);
			}
			this.basePoint.subtractToRef(p3,this._tempVector);
			b = 2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._tempVector);
			c = this._tempVector.lengthSquared() - 1.0;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				t = lowestRoot.root;
				found = true;
				this._collisionPoint.copyFrom(p3);
			}
			p2.subtractToRef(p1,this._edge);
			p1.subtractToRef(this.basePoint,this._baseToVertex);
			var edgeSquaredLength = this._edge.lengthSquared();
			var edgeDotVelocity = com_babylonhx_math_Vector3.Dot(this._edge,this.velocity);
			var edgeDotBaseToVertex = com_babylonhx_math_Vector3.Dot(this._edge,this._baseToVertex);
			a = edgeSquaredLength * -velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;
			b = edgeSquaredLength * (2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._baseToVertex)) - 2.0 * edgeDotVelocity * edgeDotBaseToVertex;
			c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				var f = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;
				if(f >= 0.0 && f <= 1.0) {
					t = lowestRoot.root;
					found = true;
					this._edge.scaleInPlace(f);
					p1.addToRef(this._edge,this._collisionPoint);
				}
			}
			p3.subtractToRef(p2,this._edge);
			p2.subtractToRef(this.basePoint,this._baseToVertex);
			edgeSquaredLength = this._edge.lengthSquared();
			edgeDotVelocity = com_babylonhx_math_Vector3.Dot(this._edge,this.velocity);
			edgeDotBaseToVertex = com_babylonhx_math_Vector3.Dot(this._edge,this._baseToVertex);
			a = edgeSquaredLength * -velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;
			b = edgeSquaredLength * (2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._baseToVertex)) - 2.0 * edgeDotVelocity * edgeDotBaseToVertex;
			c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				var f1 = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;
				if(f1 >= 0.0 && f1 <= 1.0) {
					t = lowestRoot.root;
					found = true;
					this._edge.scaleInPlace(f1);
					p2.addToRef(this._edge,this._collisionPoint);
				}
			}
			p1.subtractToRef(p3,this._edge);
			p3.subtractToRef(this.basePoint,this._baseToVertex);
			edgeSquaredLength = this._edge.lengthSquared();
			edgeDotVelocity = com_babylonhx_math_Vector3.Dot(this._edge,this.velocity);
			edgeDotBaseToVertex = com_babylonhx_math_Vector3.Dot(this._edge,this._baseToVertex);
			a = edgeSquaredLength * -velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;
			b = edgeSquaredLength * (2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._baseToVertex)) - 2.0 * edgeDotVelocity * edgeDotBaseToVertex;
			c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				var f2 = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;
				if(f2 >= 0.0 && f2 <= 1.0) {
					t = lowestRoot.root;
					found = true;
					this._edge.scaleInPlace(f2);
					p3.addToRef(this._edge,this._collisionPoint);
				}
			}
		}
		if(found) {
			var distToCollision = t * this.velocity.length();
			if(!this.collisionFound || distToCollision < this.nearestDistance) {
				if(this.intersectionPoint == null) this.intersectionPoint = this._collisionPoint.clone(); else this.intersectionPoint.copyFrom(this._collisionPoint);
				this.nearestDistance = distToCollision;
				this.collisionFound = true;
				this.collidedMesh = subMesh._mesh;
			}
		}
	}
	,_collide: function(subMesh,pts,indices,indexStart,indexEnd,decal) {
		var i = indexStart;
		while(i < indexEnd) {
			var p1 = pts[indices[i] - decal];
			var p2 = pts[indices[i + 1] - decal];
			var p3 = pts[indices[i + 2] - decal];
			this._testTriangle(i,subMesh,p3,p2,p1);
			i += 3;
		}
	}
	,_getResponse: function(pos,vel) {
		pos.addToRef(vel,this._destinationPoint);
		vel.scaleInPlace(this.nearestDistance / Math.sqrt(vel.x * vel.x + vel.y * vel.y + vel.z * vel.z));
		this.basePoint.addToRef(vel,pos);
		pos.subtractToRef(this.intersectionPoint,this._slidePlaneNormal);
		this._slidePlaneNormal.normalize();
		this._slidePlaneNormal.scaleToRef(this.epsilon,this._displacementVector);
		pos.addInPlace(this._displacementVector);
		this.intersectionPoint.addInPlace(this._displacementVector);
		this._slidePlaneNormal.scaleInPlace(com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal(this.intersectionPoint,this._slidePlaneNormal,this._destinationPoint));
		this._destinationPoint.subtractInPlace(this._slidePlaneNormal);
		this._destinationPoint.subtractToRef(this.intersectionPoint,vel);
	}
	,__class__: com_babylonhx_collisions_Collider
};
var com_babylonhx_collisions_ICollisionCoordinator = $hx_exports.BABYLON.ICollisionCoordinator = function() { };
$hxClasses["com.babylonhx.collisions.ICollisionCoordinator"] = com_babylonhx_collisions_ICollisionCoordinator;
com_babylonhx_collisions_ICollisionCoordinator.__name__ = true;
com_babylonhx_collisions_ICollisionCoordinator.prototype = {
	__class__: com_babylonhx_collisions_ICollisionCoordinator
};
var com_babylonhx_collisions_CollisionCoordinatorLegacy = $hx_exports.BABYLON.CollisionCoordinatorLegacy = function() {
	this._finalPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledPosition = new com_babylonhx_math_Vector3(0,0,0);
};
$hxClasses["com.babylonhx.collisions.CollisionCoordinatorLegacy"] = com_babylonhx_collisions_CollisionCoordinatorLegacy;
com_babylonhx_collisions_CollisionCoordinatorLegacy.__name__ = true;
com_babylonhx_collisions_CollisionCoordinatorLegacy.__interfaces__ = [com_babylonhx_collisions_ICollisionCoordinator];
com_babylonhx_collisions_CollisionCoordinatorLegacy.prototype = {
	init: function(scene) {
		this._scene = scene;
	}
	,destroy: function() {
	}
	,getNewPosition: function(position,velocity,collider,maximumRetry,excludedMesh,onNewPosition,collisionIndex) {
		position.divideToRef(collider.radius,this._scaledPosition);
		velocity.divideToRef(collider.radius,this._scaledVelocity);
		collider.collidedMesh = null;
		collider.retry = 0;
		collider.initialVelocity = this._scaledVelocity;
		collider.initialPosition = this._scaledPosition;
		this._collideWithWorld(this._scaledPosition,this._scaledVelocity,collider,maximumRetry,this._finalPosition,excludedMesh);
		this._finalPosition.multiplyInPlace(collider.radius);
		onNewPosition(collisionIndex,this._finalPosition,collider.collidedMesh);
	}
	,onMeshAdded: function(mesh) {
	}
	,onMeshUpdated: function(mesh) {
	}
	,onMeshRemoved: function(mesh) {
	}
	,onGeometryAdded: function(geometry) {
	}
	,onGeometryUpdated: function(geometry) {
	}
	,onGeometryDeleted: function(geometry) {
	}
	,_collideWithWorld: function(position,velocity,collider,maximumRetry,finalPosition,excludedMesh) {
		var closeDistance = com_babylonhx_Engine.CollisionsEpsilon * 10.0;
		if(collider.retry >= maximumRetry) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider._initialize(position,velocity,closeDistance);
		var _g = 0;
		var _g1 = this._scene.meshes;
		while(_g < _g1.length) {
			var mesh = _g1[_g];
			++_g;
			if(mesh.isEnabled() && mesh.get_checkCollisions() && mesh.subMeshes != null && mesh != excludedMesh) mesh._checkCollision(collider);
		}
		if(!collider.collisionFound) {
			finalPosition.x = position.x + velocity.x;
			finalPosition.y = position.y + velocity.y;
			finalPosition.z = position.z + velocity.z;
			return;
		}
		if(velocity.x != 0 || velocity.y != 0 || velocity.z != 0) {
			position.addToRef(velocity,collider._destinationPoint);
			velocity.scaleInPlace(collider.nearestDistance / Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z));
			collider.basePoint.addToRef(velocity,position);
			position.subtractToRef(collider.intersectionPoint,collider._slidePlaneNormal);
			collider._slidePlaneNormal.normalize();
			collider._slidePlaneNormal.scaleToRef(collider.epsilon,collider._displacementVector);
			position.addInPlace(collider._displacementVector);
			collider.intersectionPoint.addInPlace(collider._displacementVector);
			collider._slidePlaneNormal.scaleInPlace(com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal(collider.intersectionPoint,collider._slidePlaneNormal,collider._destinationPoint));
			collider._destinationPoint.subtractInPlace(collider._slidePlaneNormal);
			collider._destinationPoint.subtractToRef(collider.intersectionPoint,velocity);
		}
		if(Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z) <= closeDistance) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider.retry++;
		this._collideWithWorld(position,velocity,collider,maximumRetry,finalPosition,excludedMesh);
	}
	,__class__: com_babylonhx_collisions_CollisionCoordinatorLegacy
};
var com_babylonhx_collisions_IntersectionInfo = $hx_exports.BABYLON.IntersectionInfo = function(bu,bv,distance) {
	this.subMeshId = 0;
	this.faceId = 0;
	this.bu = bu;
	this.bv = bv;
	this.distance = distance;
};
$hxClasses["com.babylonhx.collisions.IntersectionInfo"] = com_babylonhx_collisions_IntersectionInfo;
com_babylonhx_collisions_IntersectionInfo.__name__ = true;
com_babylonhx_collisions_IntersectionInfo.prototype = {
	__class__: com_babylonhx_collisions_IntersectionInfo
};
var com_babylonhx_collisions_PickingInfo = $hx_exports.BABYLON.PickingInfo = function() {
	this.pickedSprite = null;
	this.subMeshId = 0;
	this.faceId = -1;
	this.bv = 0;
	this.bu = 0;
	this.pickedMesh = null;
	this.pickedPoint = null;
	this.distance = 0;
	this.hit = false;
};
$hxClasses["com.babylonhx.collisions.PickingInfo"] = com_babylonhx_collisions_PickingInfo;
com_babylonhx_collisions_PickingInfo.__name__ = true;
com_babylonhx_collisions_PickingInfo.prototype = {
	getNormal: function(useWorldCoordinates,useVerticesNormals) {
		if(useVerticesNormals == null) useVerticesNormals = true;
		if(useWorldCoordinates == null) useWorldCoordinates = false;
		if(this.pickedMesh == null || !this.pickedMesh.isVerticesDataPresent("normal")) return null;
		var indices = this.pickedMesh.getIndices();
		var result = new com_babylonhx_math_Vector3(0,0,0);
		if(useVerticesNormals) {
			var normals = this.pickedMesh.getVerticesData("normal");
			var normal0 = com_babylonhx_math_Vector3.FromArray(normals,indices[this.faceId * 3] * 3);
			var normal1 = com_babylonhx_math_Vector3.FromArray(normals,indices[this.faceId * 3 + 1] * 3);
			var normal2 = com_babylonhx_math_Vector3.FromArray(normals,indices[this.faceId * 3 + 2] * 3);
			normal0 = normal0.scale(this.bu);
			normal1 = normal1.scale(this.bv);
			normal2 = normal2.scale(1.0 - this.bu - this.bv);
			result = new com_babylonhx_math_Vector3(normal0.x + normal1.x + normal2.x,normal0.y + normal1.y + normal2.y,normal0.z + normal1.z + normal2.z);
		} else {
			var positions = this.pickedMesh.getVerticesData("position");
			var vertex1 = com_babylonhx_math_Vector3.FromArray(positions,indices[this.faceId * 3] * 3);
			var vertex2 = com_babylonhx_math_Vector3.FromArray(positions,indices[this.faceId * 3 + 1] * 3);
			var vertex3 = com_babylonhx_math_Vector3.FromArray(positions,indices[this.faceId * 3 + 2] * 3);
			var p1p2 = new com_babylonhx_math_Vector3(vertex1.x - vertex2.x,vertex1.y - vertex2.y,vertex1.z - vertex2.z);
			var p3p2 = new com_babylonhx_math_Vector3(vertex3.x - vertex2.x,vertex3.y - vertex2.y,vertex3.z - vertex2.z);
			result = com_babylonhx_math_Vector3.Cross(p1p2,p3p2);
		}
		if(useWorldCoordinates) result = com_babylonhx_math_Vector3.TransformNormal(result,this.pickedMesh.getWorldMatrix());
		return com_babylonhx_math_Vector3.Normalize(result);
	}
	,getTextureCoordinates: function() {
		if(this.pickedMesh == null || !this.pickedMesh.isVerticesDataPresent("uv")) return null;
		var indices = this.pickedMesh.getIndices();
		var uvs = this.pickedMesh.getVerticesData("uv");
		var uv0 = com_babylonhx_math_Vector2.FromArray(uvs,indices[this.faceId * 3] * 2);
		var uv1 = com_babylonhx_math_Vector2.FromArray(uvs,indices[this.faceId * 3 + 1] * 2);
		var uv2 = com_babylonhx_math_Vector2.FromArray(uvs,indices[this.faceId * 3 + 2] * 2);
		uv0 = uv0.scale(1.0 - this.bu - this.bv);
		uv1 = uv1.scale(this.bu);
		uv2 = uv2.scale(this.bv);
		return new com_babylonhx_math_Vector2(uv0.x + uv1.x + uv2.x,uv0.y + uv1.y + uv2.y);
	}
	,__class__: com_babylonhx_collisions_PickingInfo
};
var com_babylonhx_culling_BoundingBox = $hx_exports.BABYLON.BoundingBox = function(minimum,maximum) {
	this.vectorsWorld = (function($this) {
		var $r;
		var this1;
		this1 = new Array(8);
		$r = this1;
		return $r;
	}(this));
	this.directions = (function($this) {
		var $r;
		var this1;
		this1 = new Array(3);
		$r = this1;
		return $r;
	}(this));
	this.vectors = (function($this) {
		var $r;
		var this1;
		this1 = new Array(8);
		$r = this1;
		return $r;
	}(this));
	this.minimum = minimum;
	this.maximum = maximum;
	var val = this.minimum.clone();
	this.vectors[0] = val;
	var val1 = this.maximum.clone();
	this.vectors[1] = val1;
	var val2 = this.minimum.clone();
	this.vectors[2] = val2;
	this.vectors[2].x = this.maximum.x;
	var val3 = this.minimum.clone();
	this.vectors[3] = val3;
	this.vectors[3].y = this.maximum.y;
	var val4 = this.minimum.clone();
	this.vectors[4] = val4;
	this.vectors[4].z = this.maximum.z;
	var val5 = this.maximum.clone();
	this.vectors[5] = val5;
	this.vectors[5].z = this.minimum.z;
	var val6 = this.maximum.clone();
	this.vectors[6] = val6;
	this.vectors[6].x = this.minimum.x;
	var val7 = this.maximum.clone();
	this.vectors[7] = val7;
	this.vectors[7].y = this.minimum.y;
	this.center = this.maximum.add(this.minimum).scale(0.5);
	this.extendSize = this.maximum.subtract(this.minimum).scale(0.5);
	var array = [new com_babylonhx_math_Vector3(0,0,0),new com_babylonhx_math_Vector3(0,0,0),new com_babylonhx_math_Vector3(0,0,0)];
	var vec;
	var this1;
	this1 = new Array(array.length);
	vec = this1;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this.directions = vec;
	var _g11 = 0;
	var _g2 = this.vectors.length;
	while(_g11 < _g2) {
		var index = _g11++;
		var val8 = new com_babylonhx_math_Vector3(0,0,0);
		this.vectorsWorld[index] = val8;
	}
	this.minimumWorld = new com_babylonhx_math_Vector3(0,0,0);
	this.maximumWorld = new com_babylonhx_math_Vector3(0,0,0);
	this._update(com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0));
};
$hxClasses["com.babylonhx.culling.BoundingBox"] = com_babylonhx_culling_BoundingBox;
com_babylonhx_culling_BoundingBox.__name__ = true;
com_babylonhx_culling_BoundingBox.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_culling_BoundingBox.Intersects = function(box0,box1) {
	if(box0.maximumWorld.x < box1.minimumWorld.x || box0.minimumWorld.x > box1.maximumWorld.x) return false;
	if(box0.maximumWorld.y < box1.minimumWorld.y || box0.minimumWorld.y > box1.maximumWorld.y) return false;
	if(box0.maximumWorld.z < box1.minimumWorld.z || box0.minimumWorld.z > box1.maximumWorld.z) return false;
	return true;
};
com_babylonhx_culling_BoundingBox.IntersectsSphere = function(minPoint,maxPoint,sphereCenter,sphereRadius) {
	com_babylonhx_culling_BoundingBox.IntersectsSphere_vector = com_babylonhx_math_Vector3.Clamp(sphereCenter,minPoint,maxPoint);
	var num = com_babylonhx_math_Vector3.DistanceSquared(sphereCenter,com_babylonhx_culling_BoundingBox.IntersectsSphere_vector);
	return num <= sphereRadius * sphereRadius;
};
com_babylonhx_culling_BoundingBox.IsCompletelyInFrustum = function(boundingVectors,frustumPlanes) {
	var _g = 0;
	while(_g < 6) {
		var p = _g++;
		var _g1 = 0;
		while(_g1 < 8) {
			var i = _g1++;
			if(frustumPlanes[p].dotCoordinate(boundingVectors[i]) < 0) return false;
		}
	}
	return true;
};
com_babylonhx_culling_BoundingBox.IsInFrustum = function(boundingVectors,frustumPlanes) {
	var _g = 0;
	while(_g < 6) {
		var p = _g++;
		var inCount = 8;
		var _g1 = 0;
		while(_g1 < 8) {
			var i = _g1++;
			if(frustumPlanes[p].dotCoordinate(boundingVectors[i]) < 0) --inCount; else break;
		}
		if(inCount == 0) return false;
	}
	return true;
};
com_babylonhx_culling_BoundingBox.prototype = {
	getWorldMatrix: function() {
		return this._worldMatrix;
	}
	,_update: function(world) {
		com_babylonhx_math_Vector3.FromFloatsToRef(Infinity,Infinity,Infinity,this.minimumWorld);
		com_babylonhx_math_Vector3.FromFloatsToRef(-Infinity,-Infinity,-Infinity,this.maximumWorld);
		var _g1 = 0;
		var _g = this.vectors.length;
		while(_g1 < _g) {
			var index = _g1++;
			com_babylonhx_culling_BoundingBox.v_update = this.vectorsWorld[index];
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.vectors[index],world,com_babylonhx_culling_BoundingBox.v_update);
			if(com_babylonhx_culling_BoundingBox.v_update.x < this.minimumWorld.x) this.minimumWorld.x = com_babylonhx_culling_BoundingBox.v_update.x;
			if(com_babylonhx_culling_BoundingBox.v_update.y < this.minimumWorld.y) this.minimumWorld.y = com_babylonhx_culling_BoundingBox.v_update.y;
			if(com_babylonhx_culling_BoundingBox.v_update.z < this.minimumWorld.z) this.minimumWorld.z = com_babylonhx_culling_BoundingBox.v_update.z;
			if(com_babylonhx_culling_BoundingBox.v_update.x > this.maximumWorld.x) this.maximumWorld.x = com_babylonhx_culling_BoundingBox.v_update.x;
			if(com_babylonhx_culling_BoundingBox.v_update.y > this.maximumWorld.y) this.maximumWorld.y = com_babylonhx_culling_BoundingBox.v_update.y;
			if(com_babylonhx_culling_BoundingBox.v_update.z > this.maximumWorld.z) this.maximumWorld.z = com_babylonhx_culling_BoundingBox.v_update.z;
		}
		this.maximumWorld.addToRef(this.minimumWorld,this.center);
		this.center.scaleInPlace(0.5);
		com_babylonhx_math_Vector3.FromFloatArrayToRef(world.m,0,this.directions[0]);
		com_babylonhx_math_Vector3.FromFloatArrayToRef(world.m,4,this.directions[1]);
		com_babylonhx_math_Vector3.FromFloatArrayToRef(world.m,8,this.directions[2]);
		this._worldMatrix = world;
	}
	,isInFrustum: function(frustumPlanes) {
		return com_babylonhx_culling_BoundingBox.IsInFrustum(this.vectorsWorld,frustumPlanes);
	}
	,isCompletelyInFrustum: function(frustumPlanes) {
		return com_babylonhx_culling_BoundingBox.IsCompletelyInFrustum(this.vectorsWorld,frustumPlanes);
	}
	,intersectsPoint: function(point) {
		var delta = -0.001;
		if(this.maximumWorld.x - point.x < delta || delta > point.x - this.minimumWorld.x) return false;
		if(this.maximumWorld.y - point.y < delta || delta > point.y - this.minimumWorld.y) return false;
		if(this.maximumWorld.z - point.z < delta || delta > point.z - this.minimumWorld.z) return false;
		return true;
	}
	,intersectsSphere: function(sphere) {
		return com_babylonhx_culling_BoundingBox.IntersectsSphere(this.minimumWorld,this.maximumWorld,sphere.centerWorld,sphere.radiusWorld);
	}
	,intersectsMinMax: function(min,max) {
		if(this.maximumWorld.x < min.x || this.minimumWorld.x > max.x) return false;
		if(this.maximumWorld.y < min.y || this.minimumWorld.y > max.y) return false;
		if(this.maximumWorld.z < min.z || this.minimumWorld.z > max.z) return false;
		return true;
	}
	,__class__: com_babylonhx_culling_BoundingBox
};
var com_babylonhx_culling_BoundingInfo = $hx_exports.BABYLON.BoundingInfo = function(minimum,maximum) {
	this.minimum = minimum;
	this.maximum = maximum;
	this.boundingBox = new com_babylonhx_culling_BoundingBox(minimum,maximum);
	this.boundingSphere = new com_babylonhx_culling_BoundingSphere(minimum,maximum);
};
$hxClasses["com.babylonhx.culling.BoundingInfo"] = com_babylonhx_culling_BoundingInfo;
com_babylonhx_culling_BoundingInfo.__name__ = true;
com_babylonhx_culling_BoundingInfo.computeBoxExtents = function(axis,box) {
	var p = com_babylonhx_math_Vector3.Dot(box.center,axis);
	var r0 = Math.abs(com_babylonhx_math_Vector3.Dot(box.directions[0],axis)) * box.extendSize.x;
	var r1 = Math.abs(com_babylonhx_math_Vector3.Dot(box.directions[1],axis)) * box.extendSize.y;
	var r2 = Math.abs(com_babylonhx_math_Vector3.Dot(box.directions[2],axis)) * box.extendSize.z;
	var r = r0 + r1 + r2;
	return { min : p - r, max : p + r};
};
com_babylonhx_culling_BoundingInfo.extentsOverlap = function(min0,max0,min1,max1) {
	return !(min0 > max1 || min1 > max0);
};
com_babylonhx_culling_BoundingInfo.axisOverlap = function(axis,box0,box1) {
	var result0 = com_babylonhx_culling_BoundingInfo.computeBoxExtents(axis,box0);
	var result1 = com_babylonhx_culling_BoundingInfo.computeBoxExtents(axis,box1);
	return !(result0.min > result1.max || result1.min > result0.max);
};
com_babylonhx_culling_BoundingInfo.prototype = {
	_update: function(world) {
		this.boundingBox._update(world);
		this.boundingSphere._update(world);
	}
	,isInFrustum: function(frustumPlanes) {
		if(!this.boundingSphere.isInFrustum(frustumPlanes)) return false;
		return com_babylonhx_culling_BoundingBox.IsInFrustum(this.boundingBox.vectorsWorld,frustumPlanes);
	}
	,isCompletelyInFrustum: function(frustumPlanes) {
		return com_babylonhx_culling_BoundingBox.IsCompletelyInFrustum(this.boundingBox.vectorsWorld,frustumPlanes);
	}
	,_checkCollision: function(collider) {
		return collider._canDoCollision(this.boundingSphere.centerWorld,this.boundingSphere.radiusWorld,this.boundingBox.minimumWorld,this.boundingBox.maximumWorld);
	}
	,intersectsPoint: function(point) {
		if(this.boundingSphere.centerWorld == null) return false;
		if(!this.boundingSphere.intersectsPoint(point)) return false;
		if(!this.boundingBox.intersectsPoint(point)) return false;
		return true;
	}
	,intersects: function(boundingInfo,precise) {
		if(precise == null) precise = false;
		if(this.boundingSphere.centerWorld == null || boundingInfo.boundingSphere.centerWorld == null) return false;
		if(!com_babylonhx_culling_BoundingSphere.Intersects(this.boundingSphere,boundingInfo.boundingSphere)) return false;
		if(!com_babylonhx_culling_BoundingBox.Intersects(this.boundingBox,boundingInfo.boundingBox)) return false;
		if(precise) return true;
		var box0 = this.boundingBox;
		var box1 = boundingInfo.boundingBox;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box0.directions[0],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box0.directions[1],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box0.directions[2],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box1.directions[0],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box1.directions[1],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box1.directions[2],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[0],box1.directions[0]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[0],box1.directions[1]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[0],box1.directions[2]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[1],box1.directions[0]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[1],box1.directions[1]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[1],box1.directions[2]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[2],box1.directions[0]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[2],box1.directions[1]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[2],box1.directions[2]),box0,box1)) return false;
		return true;
	}
	,__class__: com_babylonhx_culling_BoundingInfo
};
var com_babylonhx_culling_BoundingSphere = $hx_exports.BABYLON.BoundingSphere = function(minimum,maximum) {
	this._tempRadiusVector = new com_babylonhx_math_Vector3(0,0,0);
	var distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(minimum,maximum));
	this.center = com_babylonhx_math_Vector3.Lerp(minimum,maximum,0.5);
	this.radius = distance * 0.5;
	this.centerWorld = new com_babylonhx_math_Vector3(0,0,0);
	this._update(com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0));
};
$hxClasses["com.babylonhx.culling.BoundingSphere"] = com_babylonhx_culling_BoundingSphere;
com_babylonhx_culling_BoundingSphere.__name__ = true;
com_babylonhx_culling_BoundingSphere.Intersects = function(sphere0,sphere1) {
	var x = sphere0.centerWorld.x - sphere1.centerWorld.x;
	var y = sphere0.centerWorld.y - sphere1.centerWorld.y;
	var z = sphere0.centerWorld.z - sphere1.centerWorld.z;
	var distance = Math.sqrt(x * x + y * y + z * z);
	if(sphere0.radiusWorld + sphere1.radiusWorld < distance) return false;
	return true;
};
com_babylonhx_culling_BoundingSphere.prototype = {
	_update: function(world) {
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.center,world,this.centerWorld);
		com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef(1.0,1.0,1.0,world,this._tempRadiusVector);
		this.radiusWorld = Math.max(Math.max(Math.abs(this._tempRadiusVector.x),Math.abs(this._tempRadiusVector.y)),Math.abs(this._tempRadiusVector.z)) * this.radius;
	}
	,isInFrustum: function(frustumPlanes) {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if(frustumPlanes[i].dotCoordinate(this.centerWorld) <= -this.radiusWorld) return false;
		}
		return true;
	}
	,intersectsPoint: function(point) {
		var x = this.centerWorld.x - point.x;
		var y = this.centerWorld.y - point.y;
		var z = this.centerWorld.z - point.z;
		var distance = Math.sqrt(x * x + y * y + z * z);
		if(Math.abs(this.radiusWorld - distance) < 0.001) return false;
		return true;
	}
	,__class__: com_babylonhx_culling_BoundingSphere
};
var com_babylonhx_culling_octrees_IOctreeContainer = $hx_exports.BABYLON.IOctreeContainer = function() { };
$hxClasses["com.babylonhx.culling.octrees.IOctreeContainer"] = com_babylonhx_culling_octrees_IOctreeContainer;
com_babylonhx_culling_octrees_IOctreeContainer.__name__ = true;
com_babylonhx_culling_octrees_IOctreeContainer.prototype = {
	__class__: com_babylonhx_culling_octrees_IOctreeContainer
};
var com_babylonhx_culling_octrees_Octree = $hx_exports.BABYLON.Octree = function(creationFunc,maxBlockCapacity,maxDepth) {
	if(maxDepth == null) maxDepth = 2;
	if(maxBlockCapacity == null) maxBlockCapacity = 64;
	this.dynamicContent = [];
	this._maxBlockCapacity = maxBlockCapacity;
	this._selectionContent = new com_babylonhx_tools_SmartArray(1024);
	this._creationFunc = creationFunc;
	this.maxDepth = maxDepth;
};
$hxClasses["com.babylonhx.culling.octrees.Octree"] = com_babylonhx_culling_octrees_Octree;
com_babylonhx_culling_octrees_Octree.__name__ = true;
com_babylonhx_culling_octrees_Octree.__interfaces__ = [com_babylonhx_culling_octrees_IOctreeContainer];
com_babylonhx_culling_octrees_Octree._CreateBlocks = function(worldMin,worldMax,entries,maxBlockCapacity,currentDepth,maxDepth,target,creationFunc) {
	target.blocks = [];
	var blockSize = new com_babylonhx_math_Vector3((worldMax.x - worldMin.x) / 2,(worldMax.y - worldMin.y) / 2,(worldMax.z - worldMin.z) / 2);
	var _g = 0;
	while(_g < 2) {
		var x = _g++;
		var _g1 = 0;
		while(_g1 < 2) {
			var y = _g1++;
			var _g2 = 0;
			while(_g2 < 2) {
				var z = _g2++;
				var localMin = worldMin.add(blockSize.multiplyByFloats(x,y,z));
				var localMax = worldMin.add(blockSize.multiplyByFloats(x + 1,y + 1,z + 1));
				var block = new com_babylonhx_culling_octrees_OctreeBlock(localMin,localMax,maxBlockCapacity,currentDepth + 1,maxDepth,creationFunc);
				block.addEntries(entries);
				target.blocks.push(block);
			}
		}
	}
};
com_babylonhx_culling_octrees_Octree.CreationFuncForMeshes = function(entry,block) {
	if(!entry.get_isBlocked() && entry.getBoundingInfo().boundingBox.intersectsMinMax(block.get_minPoint(),block.get_maxPoint())) block.entries.push(entry);
};
com_babylonhx_culling_octrees_Octree.CreationFuncForSubMeshes = function(entry,block) {
	if(entry._boundingInfo.boundingBox.intersectsMinMax(block.get_minPoint(),block.get_maxPoint())) block.entries.push(entry);
};
com_babylonhx_culling_octrees_Octree.prototype = {
	update: function(worldMin,worldMax,entries) {
		com_babylonhx_culling_octrees_Octree._CreateBlocks(worldMin,worldMax,entries,this._maxBlockCapacity,0,this.maxDepth,this,this._creationFunc);
	}
	,addMesh: function(entry) {
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.addEntry(entry);
		}
	}
	,select: function(frustumPlanes,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		this._selectionContent.reset();
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.select(frustumPlanes,this._selectionContent,allowDuplicate);
		}
		if(allowDuplicate) this._selectionContent.concatArray(this.dynamicContent); else this._selectionContent.concatArrayWithNoDuplicate(this.dynamicContent);
		return this._selectionContent;
	}
	,intersects: function(sphereCenter,sphereRadius,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		this._selectionContent.reset();
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.intersects(sphereCenter,sphereRadius,this._selectionContent,allowDuplicate);
		}
		if(allowDuplicate) this._selectionContent.concatArray(this.dynamicContent); else this._selectionContent.concatArrayWithNoDuplicate(this.dynamicContent);
		return this._selectionContent;
	}
	,intersectsRay: function(ray) {
		this._selectionContent.reset();
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.intersectsRay(ray,this._selectionContent);
		}
		this._selectionContent.concatArrayWithNoDuplicate(this.dynamicContent);
		return this._selectionContent;
	}
	,__class__: com_babylonhx_culling_octrees_Octree
};
var com_babylonhx_culling_octrees_OctreeBlock = $hx_exports.BABYLON.OctreeBlock = function(minPoint,maxPoint,capacity,depth,maxDepth,creationFunc) {
	this._boundingVectors = (function($this) {
		var $r;
		var this1;
		this1 = new Array(8);
		$r = this1;
		return $r;
	}(this));
	this.entries = [];
	this._capacity = capacity;
	this._depth = depth;
	this._maxDepth = maxDepth;
	this._creationFunc = creationFunc;
	this._minPoint = minPoint;
	this._maxPoint = maxPoint;
	var val = new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z);
	this._boundingVectors[0] = val;
	var val1 = new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z);
	this._boundingVectors[1] = val1;
	var val2 = new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z);
	this._boundingVectors[2] = val2;
	this._boundingVectors[2].x = maxPoint.x;
	var val3 = new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z);
	this._boundingVectors[3] = val3;
	this._boundingVectors[3].y = maxPoint.y;
	var val4 = new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z);
	this._boundingVectors[4] = val4;
	this._boundingVectors[4].z = maxPoint.z;
	var val5 = new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z);
	this._boundingVectors[5] = val5;
	this._boundingVectors[5].z = minPoint.z;
	var val6 = new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z);
	this._boundingVectors[6] = val6;
	this._boundingVectors[6].x = minPoint.x;
	var val7 = new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z);
	this._boundingVectors[7] = val7;
	this._boundingVectors[7].y = minPoint.y;
};
$hxClasses["com.babylonhx.culling.octrees.OctreeBlock"] = com_babylonhx_culling_octrees_OctreeBlock;
com_babylonhx_culling_octrees_OctreeBlock.__name__ = true;
com_babylonhx_culling_octrees_OctreeBlock.__interfaces__ = [com_babylonhx_culling_octrees_IOctreeContainer];
com_babylonhx_culling_octrees_OctreeBlock.prototype = {
	get_capacity: function() {
		return this._capacity;
	}
	,get_minPoint: function() {
		return this._minPoint;
	}
	,get_maxPoint: function() {
		return this._maxPoint;
	}
	,addEntry: function(entry) {
		if(this.blocks != null) {
			var _g1 = 0;
			var _g = this.blocks.length;
			while(_g1 < _g) {
				var index = _g1++;
				var block = this.blocks[index];
				block.addEntry(entry);
			}
			return;
		}
		this._creationFunc(entry,this);
		if(this.entries.length > this.get_capacity() && this._depth < this._maxDepth) this.createInnerBlocks();
	}
	,addEntries: function(entries) {
		var _g1 = 0;
		var _g = entries.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = entries[index];
			this.addEntry(mesh);
		}
	}
	,select: function(frustumPlanes,selection,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		if(com_babylonhx_culling_BoundingBox.IsInFrustum(this._boundingVectors,frustumPlanes)) {
			if(this.blocks != null) {
				var _g1 = 0;
				var _g = this.blocks.length;
				while(_g1 < _g) {
					var index = _g1++;
					var block = this.blocks[index];
					block.select(frustumPlanes,selection,allowDuplicate);
				}
				return;
			}
			if(allowDuplicate) selection.concatArray(this.entries); else selection.concatArrayWithNoDuplicate(this.entries);
		}
	}
	,intersects: function(sphereCenter,sphereRadius,selection,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		if(com_babylonhx_culling_BoundingBox.IntersectsSphere(this._minPoint,this._maxPoint,sphereCenter,sphereRadius)) {
			if(this.blocks != null) {
				var _g1 = 0;
				var _g = this.blocks.length;
				while(_g1 < _g) {
					var index = _g1++;
					var block = this.blocks[index];
					block.intersects(sphereCenter,sphereRadius,selection,allowDuplicate);
				}
				return;
			}
			if(allowDuplicate) selection.concatArray(this.entries); else selection.concatArrayWithNoDuplicate(this.entries);
		}
	}
	,intersectsRay: function(ray,selection) {
		if(ray.intersectsBoxMinMax(this._minPoint,this._maxPoint)) {
			if(this.blocks != null) {
				var _g1 = 0;
				var _g = this.blocks.length;
				while(_g1 < _g) {
					var index = _g1++;
					var block = this.blocks[index];
					block.intersectsRay(ray,selection);
				}
				return;
			}
			selection.concatArrayWithNoDuplicate(this.entries);
		}
	}
	,createInnerBlocks: function() {
		com_babylonhx_culling_octrees_Octree._CreateBlocks(this._minPoint,this._maxPoint,this.entries,this._capacity,this._depth,this._maxDepth,this,this._creationFunc);
	}
	,__class__: com_babylonhx_culling_octrees_OctreeBlock
	,__properties__: {get_maxPoint:"get_maxPoint",get_minPoint:"get_minPoint",get_capacity:"get_capacity"}
};
var com_babylonhx_layer_Layer = $hx_exports.BABYLON.Layer = function(name,imgUrl,scene,isBackground,color) {
	if(isBackground == null) isBackground = true;
	this._vertexStrideSize = 8;
	this._vertexDeclaration = [];
	this.indices = [];
	this.vertices = [];
	this.name = name;
	if(imgUrl != null) this.texture = new com_babylonhx_materials_textures_Texture(imgUrl,scene,false); else this.texture = null;
	this.isBackground = isBackground;
	if(color == null) this.color = new com_babylonhx_math_Color4(1,1,1,1); else this.color = color;
	this._scene = scene;
	this._scene.layers.push(this);
	this.vertices.push(1);
	this.vertices.push(1);
	this.vertices.push(-1);
	this.vertices.push(1);
	this.vertices.push(-1);
	this.vertices.push(-1);
	this.vertices.push(1);
	this.vertices.push(-1);
	this._vertexDeclaration = [2];
	this._vertexBuffer = scene._engine.createVertexBuffer(this.vertices);
	this.indices.push(0);
	this.indices.push(1);
	this.indices.push(2);
	this.indices.push(0);
	this.indices.push(2);
	this.indices.push(3);
	this._indexBuffer = scene._engine.createIndexBuffer(this.indices);
	this._effect = this._scene._engine.createEffect("layer",["position"],["textureMatrix","color"],["textureSampler"],"");
};
$hxClasses["com.babylonhx.layer.Layer"] = com_babylonhx_layer_Layer;
com_babylonhx_layer_Layer.__name__ = true;
com_babylonhx_layer_Layer.prototype = {
	render: function() {
		if(!this._effect._isReady || this.texture == null || !this.texture.isReady()) return;
		var engine = this._scene._engine;
		engine.enableEffect(this._effect);
		engine.setState(false,null,null,null);
		this._effect.setTexture("textureSampler",this.texture);
		this._effect.setMatrix("textureMatrix",this.texture.getTextureMatrix());
		this._effect.setFloat4("color",this.color.r,this.color.g,this.color.b,this.color.a);
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		if(engine._alphaMode == 2) null; else {
			switch(2) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 2;
		}
		engine.draw(true,0,6);
		if(engine._alphaMode == 0) null; else {
			switch(0) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 0;
		}
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		if(this.texture != null) {
			this.texture.dispose();
			this.texture = null;
		}
		var index = HxOverrides.indexOf(this._scene.layers,this,0);
		this._scene.layers.splice(index,1);
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_layer_Layer
};
var com_babylonhx_lensflare_LensFlare = $hx_exports.BABYLON.LensFlare = function(size,position,color,imgUrl,system) {
	if(color != null) this.color = color; else this.color = new com_babylonhx_math_Color3(1,1,1);
	this.position = position;
	this.size = size;
	if(imgUrl != null) this.texture = new com_babylonhx_materials_textures_Texture(imgUrl,system.getScene(),true); else this.texture = null;
	this._system = system;
	this._system.lensFlares.push(this);
};
$hxClasses["com.babylonhx.lensflare.LensFlare"] = com_babylonhx_lensflare_LensFlare;
com_babylonhx_lensflare_LensFlare.__name__ = true;
com_babylonhx_lensflare_LensFlare.prototype = {
	dispose: function() {
		if(this.texture != null) this.texture.dispose();
		HxOverrides.remove(this._system.lensFlares,this);
	}
	,__class__: com_babylonhx_lensflare_LensFlare
};
var com_babylonhx_lensflare_LensFlareSystem = $hx_exports.BABYLON.LensFlareSystem = function(name,emitter,scene) {
	this._isEnabled = true;
	this.layerMask = 268435455;
	this.borderLimit = 300;
	this.lensFlares = [];
	this.name = name;
	this._scene = scene;
	this._emitter = emitter;
	scene.lensFlareSystems.push(this);
	this.meshesSelectionPredicate = function(m) {
		return m.get_material() != null && m.isVisible && m.isEnabled() && m.isBlocker && (m.layerMask & scene.activeCamera.layerMask) != 0;
	};
	var vertices = [];
	vertices.push(1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	this._vertexDeclaration = [2];
	this._vertexStrideSize = 8;
	this._vertexBuffer = scene._engine.createVertexBuffer(vertices);
	var indices = [];
	indices.push(0);
	indices.push(1);
	indices.push(2);
	indices.push(0);
	indices.push(2);
	indices.push(3);
	this._indexBuffer = scene._engine.createIndexBuffer(indices);
	this._effect = this._scene._engine.createEffect("lensFlare",["position"],["color","viewportMatrix"],["textureSampler"],"");
};
$hxClasses["com.babylonhx.lensflare.LensFlareSystem"] = com_babylonhx_lensflare_LensFlareSystem;
com_babylonhx_lensflare_LensFlareSystem.__name__ = true;
com_babylonhx_lensflare_LensFlareSystem.prototype = {
	get_isEnabled: function() {
		return this._isEnabled;
	}
	,set_isEnabled: function(value) {
		this._isEnabled = value;
		return value;
	}
	,getScene: function() {
		return this._scene;
	}
	,getEmitter: function() {
		return this._emitter;
	}
	,setEmitter: function(newEmitter) {
		this._emitter = newEmitter;
	}
	,getEmitterPosition: function() {
		if(this._emitter.getAbsolutePosition != null) return this._emitter.getAbsolutePosition(); else return this._emitter.position;
	}
	,computeEffectivePosition: function(globalViewport) {
		var position = this.getEmitterPosition();
		position = com_babylonhx_math_Vector3.Project(position,com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0),this._scene._transformMatrix,globalViewport);
		this._positionX = position.x;
		this._positionY = position.y;
		position = com_babylonhx_math_Vector3.TransformCoordinates(this.getEmitterPosition(),this._scene._viewMatrix);
		if(position.z > 0) {
			if(this._positionX > globalViewport.x && this._positionX < globalViewport.x + globalViewport.width) {
				if(this._positionY > globalViewport.y && this._positionY < globalViewport.y + globalViewport.height) return true;
			}
		}
		return false;
	}
	,_isVisible: function() {
		if(!this._isEnabled) return false;
		var emitterPosition = this.getEmitterPosition();
		var direction = emitterPosition.subtract(this._scene.activeCamera.position);
		var distance = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
		direction.normalize();
		var ray = new com_babylonhx_math_Ray(this._scene.activeCamera.position,direction);
		var pickInfo = this._scene.pickWithRay(ray,this.meshesSelectionPredicate,true);
		return !pickInfo.hit || pickInfo.distance > distance;
	}
	,render: function() {
		if(!this._effect._isReady) return false;
		var engine = this._scene._engine;
		var viewport = this._scene.activeCamera.viewport;
		var globalViewport = viewport.toGlobal(engine);
		if(!this.computeEffectivePosition(globalViewport)) return false;
		if(!this._isVisible()) return false;
		var awayX = 0;
		var awayY = 0;
		if(this._positionX < this.borderLimit + globalViewport.x) awayX = this.borderLimit + globalViewport.x - this._positionX; else if(this._positionX > globalViewport.x + globalViewport.width - this.borderLimit) awayX = this._positionX - globalViewport.x - globalViewport.width + this.borderLimit; else awayX = 0;
		if(this._positionY < this.borderLimit + globalViewport.y) awayY = this.borderLimit + globalViewport.y - this._positionY; else if(this._positionY > globalViewport.y + globalViewport.height - this.borderLimit) awayY = this._positionY - globalViewport.y - globalViewport.height + this.borderLimit; else awayY = 0;
		var away;
		if(awayX > awayY) away = awayX; else away = awayY;
		if(away > this.borderLimit) away = this.borderLimit;
		var intensity = 1.0 - away / this.borderLimit;
		if(intensity < 0) return false;
		if(intensity > 1.0) intensity = 1.0;
		var centerX = globalViewport.x + globalViewport.width / 2;
		var centerY = globalViewport.y + globalViewport.height / 2;
		var distX = centerX - this._positionX;
		var distY = centerY - this._positionY;
		engine.enableEffect(this._effect);
		engine.setState(false,null,null,null);
		engine._depthCullingState.set_depthTest(false);
		if(engine._alphaMode == 6) null; else {
			switch(6) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 6;
		}
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		var _g1 = 0;
		var _g = this.lensFlares.length;
		while(_g1 < _g) {
			var index = _g1++;
			var flare = this.lensFlares[index];
			var x = centerX - distX * flare.position;
			var y = centerY - distY * flare.position;
			var cw = flare.size;
			var ch = flare.size * engine.getAspectRatio(this._scene.activeCamera);
			var cx = 2 * (x / globalViewport.width) - 1.0;
			var cy = 1.0 - 2 * (y / globalViewport.height);
			var viewportMatrix = com_babylonhx_math_Matrix.FromValues(cw / 2,0,0,0,0,ch / 2,0,0,0,0,1,0,cx,cy,0,1);
			this._effect.setMatrix("viewportMatrix",viewportMatrix);
			this._effect.setTexture("textureSampler",flare.texture);
			this._effect.setFloat4("color",flare.color.r * intensity,flare.color.g * intensity,flare.color.b * intensity,1.0);
			engine.draw(true,0,6);
		}
		engine._depthCullingState.set_depthTest(true);
		if(engine._alphaMode == 0) null; else {
			switch(0) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 0;
		}
		return true;
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		while(this.lensFlares.length > 0) this.lensFlares[0].dispose();
		HxOverrides.remove(this._scene.lensFlareSystems,this);
	}
	,__class__: com_babylonhx_lensflare_LensFlareSystem
	,__properties__: {get_isEnabled:"get_isEnabled"}
};
var com_babylonhx_lights_Light = $hx_exports.BABYLON.Light = function(name,scene) {
	this._includedOnlyMeshesIds = [];
	this._excludedMeshesIds = [];
	this.excludeWithLayerMask = 0;
	this.excludedMeshes = [];
	this.includedOnlyMeshes = [];
	this.includeOnlyWithLayerMask = 0;
	this.range = Infinity;
	this.intensity = 1.0;
	this.specular = new com_babylonhx_math_Color3(1.0,1.0,1.0);
	this.diffuse = new com_babylonhx_math_Color3(1.0,1.0,1.0);
	com_babylonhx_Node.call(this,name,scene);
	this._type = "LIGHT";
	scene.addLight(this);
};
$hxClasses["com.babylonhx.lights.Light"] = com_babylonhx_lights_Light;
com_babylonhx_lights_Light.__name__ = true;
com_babylonhx_lights_Light.__super__ = com_babylonhx_Node;
com_babylonhx_lights_Light.prototype = $extend(com_babylonhx_Node.prototype,{
	get_type: function() {
		return this._type;
	}
	,getShadowGenerator: function() {
		return this._shadowGenerator;
	}
	,getAbsolutePosition: function() {
		return new com_babylonhx_math_Vector3(0,0,0);
	}
	,transferToEffect: function(effect,uniformName0,uniformName1) {
	}
	,_getWorldMatrix: function() {
		return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,canAffectMesh: function(mesh) {
		if(mesh == null) return true;
		if(this.includedOnlyMeshes.length > 0 && HxOverrides.indexOf(this.includedOnlyMeshes,mesh,0) == -1) return false;
		if(this.excludedMeshes.length > 0 && HxOverrides.indexOf(this.excludedMeshes,mesh,0) != -1) return false;
		if(this.includeOnlyWithLayerMask != 0 && this.includeOnlyWithLayerMask != mesh.layerMask) return false;
		if(this.excludeWithLayerMask != 0 && js_Boot.__cast(this.excludeWithLayerMask & mesh.layerMask , Bool)) return false;
		return true;
	}
	,getWorldMatrix: function() {
		this._currentRenderId = this._scene._renderId;
		var worldMatrix = this._getWorldMatrix();
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this._parentedWorldMatrix == null) this._parentedWorldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
			worldMatrix.multiplyToRef(this.parent.getWorldMatrix(),this._parentedWorldMatrix);
			this._parentRenderId = this.parent._currentRenderId;
			return this._parentedWorldMatrix;
		}
		return worldMatrix;
	}
	,dispose: function() {
		if(this._shadowGenerator != null) {
			this._shadowGenerator.dispose();
			this._shadowGenerator = null;
		}
		this._scene.stopAnimation(this);
		this._scene.removeLight(this);
	}
	,__class__: com_babylonhx_lights_Light
	,__properties__: {get_type:"get_type"}
});
var com_babylonhx_lights_IShadowLight = $hx_exports.BABYLON.IShadowLight = function() { };
$hxClasses["com.babylonhx.lights.IShadowLight"] = com_babylonhx_lights_IShadowLight;
com_babylonhx_lights_IShadowLight.__name__ = true;
com_babylonhx_lights_IShadowLight.prototype = {
	__class__: com_babylonhx_lights_IShadowLight
};
var com_babylonhx_lights_DirectionalLight = $hx_exports.BABYLON.DirectionalLight = function(name,direction,scene) {
	this._orthoBottom = Infinity;
	this._orthoTop = -Infinity;
	this._orthoRight = -Infinity;
	this._orthoLeft = Infinity;
	this.autoUpdateExtends = true;
	this.shadowOrthoScale = 0.5;
	com_babylonhx_lights_Light.call(this,name,scene);
	this._type = "DIRLIGHT";
	this.direction = direction;
	this.position = new com_babylonhx_math_Vector3(direction.x * -1,direction.y * -1,direction.z * -1);
};
$hxClasses["com.babylonhx.lights.DirectionalLight"] = com_babylonhx_lights_DirectionalLight;
com_babylonhx_lights_DirectionalLight.__name__ = true;
com_babylonhx_lights_DirectionalLight.__interfaces__ = [com_babylonhx_lights_IShadowLight];
com_babylonhx_lights_DirectionalLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_DirectionalLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	getAbsolutePosition: function() {
		if(this.transformedPosition != null) return this.transformedPosition; else return this.position;
	}
	,setDirectionToTarget: function(target) {
		this.direction = com_babylonhx_math_Vector3.Normalize(target.subtract(this.position));
		return this.direction;
	}
	,setShadowProjectionMatrix: function(matrix,viewMatrix,renderList) {
		var activeCamera = this._scene.activeCamera;
		if(this.autoUpdateExtends || this._orthoLeft == Infinity) {
			var tempVector3 = new com_babylonhx_math_Vector3(0,0,0);
			this._orthoLeft = Infinity;
			this._orthoRight = -Infinity;
			this._orthoTop = -Infinity;
			this._orthoBottom = Infinity;
			var _g1 = 0;
			var _g = renderList.length;
			while(_g1 < _g) {
				var meshIndex = _g1++;
				var mesh = renderList[meshIndex];
				if(mesh == null) continue;
				var boundingInfo = mesh.getBoundingInfo();
				if(boundingInfo == null) continue;
				var boundingBox = boundingInfo.boundingBox;
				var _g3 = 0;
				var _g2 = boundingBox.vectorsWorld.length;
				while(_g3 < _g2) {
					var index = _g3++;
					com_babylonhx_math_Vector3.TransformCoordinatesToRef(boundingBox.vectorsWorld[index],viewMatrix,tempVector3);
					if(tempVector3.x < this._orthoLeft) this._orthoLeft = tempVector3.x;
					if(tempVector3.y < this._orthoBottom) this._orthoBottom = tempVector3.y;
					if(tempVector3.x > this._orthoRight) this._orthoRight = tempVector3.x;
					if(tempVector3.y > this._orthoTop) this._orthoTop = tempVector3.y;
				}
			}
		}
		var xOffset = this._orthoRight - this._orthoLeft;
		var yOffset = this._orthoTop - this._orthoBottom;
		com_babylonhx_math_Matrix.OrthoOffCenterLHToRef(this._orthoLeft - xOffset * this.shadowOrthoScale,this._orthoRight + xOffset * this.shadowOrthoScale,this._orthoBottom - yOffset * this.shadowOrthoScale,this._orthoTop + yOffset * this.shadowOrthoScale,-activeCamera.maxZ,activeCamera.maxZ,matrix);
	}
	,supportsVSM: function() {
		return true;
	}
	,needRefreshPerFrame: function() {
		return true;
	}
	,needCube: function() {
		return false;
	}
	,getShadowDirection: function(faceIndex) {
		return this.direction;
	}
	,computeTransformedPosition: function() {
		if(this.parent != null && ($_=this.parent,$bind($_,$_.getWorldMatrix)) != null) {
			if(this.transformedPosition == null) this.transformedPosition = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this.parent.getWorldMatrix(),this.transformedPosition);
			return true;
		}
		return false;
	}
	,transferToEffect: function(effect,directionUniformName,extra_UNUSED_PARAM) {
		if(this.parent != null && ($_=this.parent,$bind($_,$_.getWorldMatrix)) != null) {
			if(this._transformedDirection == null) this._transformedDirection = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformNormalToRef(this.direction,this.parent.getWorldMatrix(),this._transformedDirection);
			effect._engine.setFloat4(effect._uniforms.get(directionUniformName),this._transformedDirection.x,this._transformedDirection.y,this._transformedDirection.z,1);
			effect;
			return;
		}
		effect._engine.setFloat4(effect._uniforms.get(directionUniformName),this.direction.x,this.direction.y,this.direction.z,1);
		effect;
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._worldMatrix);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_DirectionalLight
});
var com_babylonhx_lights_HemisphericLight = $hx_exports.BABYLON.HemisphericLight = function(name,direction,scene) {
	this.groundColor = new com_babylonhx_math_Color3(0.0,0.0,0.0);
	com_babylonhx_lights_Light.call(this,name,scene);
	this._type = "HEMILIGHT";
	this.direction = direction;
};
$hxClasses["com.babylonhx.lights.HemisphericLight"] = com_babylonhx_lights_HemisphericLight;
com_babylonhx_lights_HemisphericLight.__name__ = true;
com_babylonhx_lights_HemisphericLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_HemisphericLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	setDirectionToTarget: function(target) {
		this.direction = com_babylonhx_math_Vector3.Normalize(target.subtract(new com_babylonhx_math_Vector3(0,0,0)));
		return this.direction;
	}
	,getShadowGenerator: function() {
		return null;
	}
	,transferToEffect: function(effect,directionUniformName,groundColorUniformName) {
		com_babylonhx_lights_HemisphericLight.normalizeDirection = com_babylonhx_math_Vector3.Normalize(this.direction);
		effect._engine.setFloat4(effect._uniforms.get(directionUniformName),com_babylonhx_lights_HemisphericLight.normalizeDirection.x,com_babylonhx_lights_HemisphericLight.normalizeDirection.y,com_babylonhx_lights_HemisphericLight.normalizeDirection.z,0);
		effect;
		effect.setColor3(groundColorUniformName,this.groundColor.scale(this.intensity));
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_HemisphericLight
});
var com_babylonhx_lights_PointLight = $hx_exports.BABYLON.PointLight = function(name,position,scene) {
	com_babylonhx_lights_Light.call(this,name,scene);
	this._type = "POINTLIGHT";
	this.position = position;
};
$hxClasses["com.babylonhx.lights.PointLight"] = com_babylonhx_lights_PointLight;
com_babylonhx_lights_PointLight.__name__ = true;
com_babylonhx_lights_PointLight.__interfaces__ = [com_babylonhx_lights_IShadowLight];
com_babylonhx_lights_PointLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_PointLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	getAbsolutePosition: function() {
		if(this.transformedPosition != null) return this.transformedPosition; else return this.position;
	}
	,computeTransformedPosition: function() {
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this.transformedPosition == null) this.transformedPosition = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this.parent.getWorldMatrix(),this.transformedPosition);
			return true;
		}
		return false;
	}
	,transferToEffect: function(effect,positionUniformName,UNUSED_PARAM) {
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			this.computeTransformedPosition();
			effect._engine.setFloat4(effect._uniforms.get(positionUniformName),this.transformedPosition.x,this.transformedPosition.y,this.transformedPosition.z,0);
			effect;
			return;
		}
		effect._engine.setFloat4(effect._uniforms.get(positionUniformName),this.position.x,this.position.y,this.position.z,0);
		effect;
	}
	,needCube: function() {
		return true;
	}
	,supportsVSM: function() {
		return false;
	}
	,needRefreshPerFrame: function() {
		return false;
	}
	,getShadowDirection: function(faceIndex) {
		if(faceIndex != null) switch(faceIndex) {
		case 0:
			return new com_babylonhx_math_Vector3(1,0,0);
		case 1:
			return new com_babylonhx_math_Vector3(-1,0,0);
		case 2:
			return new com_babylonhx_math_Vector3(0,-1,0);
		case 3:
			return new com_babylonhx_math_Vector3(0,1,0);
		case 4:
			return new com_babylonhx_math_Vector3(0,0,1);
		case 5:
			return new com_babylonhx_math_Vector3(0,0,-1);
		}
		return new com_babylonhx_math_Vector3(0,0,0);
	}
	,setShadowProjectionMatrix: function(matrix,viewMatrix,renderList) {
		var activeCamera = this._scene.activeCamera;
		com_babylonhx_math_Matrix.PerspectiveFovLHToRef(Math.PI / 2,1.0,activeCamera.minZ,activeCamera.maxZ,matrix);
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._worldMatrix);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_PointLight
});
var com_babylonhx_lights_SpotLight = $hx_exports.BABYLON.SpotLight = function(name,position,direction,angle,exponent,scene) {
	com_babylonhx_lights_Light.call(this,name,scene);
	this._type = "SPOTLIGHT";
	this.position = position;
	this.direction = direction;
	this.angle = angle;
	this.exponent = exponent;
};
$hxClasses["com.babylonhx.lights.SpotLight"] = com_babylonhx_lights_SpotLight;
com_babylonhx_lights_SpotLight.__name__ = true;
com_babylonhx_lights_SpotLight.__interfaces__ = [com_babylonhx_lights_IShadowLight];
com_babylonhx_lights_SpotLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_SpotLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	getAbsolutePosition: function() {
		if(this.transformedPosition != null) return this.transformedPosition; else return this.position;
	}
	,setShadowProjectionMatrix: function(matrix,viewMatrix,renderList) {
		var activeCamera = this._scene.activeCamera;
		com_babylonhx_math_Matrix.PerspectiveFovLHToRef(this.angle,1.0,activeCamera.minZ,activeCamera.maxZ,matrix);
	}
	,needCube: function() {
		return false;
	}
	,supportsVSM: function() {
		return true;
	}
	,needRefreshPerFrame: function() {
		return false;
	}
	,getShadowDirection: function(faceIndex) {
		return this.direction;
	}
	,setDirectionToTarget: function(target) {
		this.direction = com_babylonhx_math_Vector3.Normalize(target.subtract(this.position));
		return this.direction;
	}
	,computeTransformedPosition: function() {
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this.transformedPosition == null) this.transformedPosition = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this.parent.getWorldMatrix(),this.transformedPosition);
			return true;
		}
		return false;
	}
	,transferToEffect: function(effect,positionUniformName,directionUniformName) {
		var normalizeDirection = new com_babylonhx_math_Vector3(0,0,0);
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this._transformedDirection == null) this._transformedDirection = new com_babylonhx_math_Vector3(0,0,0);
			this.computeTransformedPosition();
			var parentWorldMatrix = this.parent.getWorldMatrix();
			com_babylonhx_math_Vector3.TransformNormalToRef(this.direction,parentWorldMatrix,this._transformedDirection);
			effect._engine.setFloat4(effect._uniforms.get(positionUniformName),this.transformedPosition.x,this.transformedPosition.y,this.transformedPosition.z,this.exponent);
			effect;
			normalizeDirection = com_babylonhx_math_Vector3.Normalize(this._transformedDirection);
		} else {
			effect._engine.setFloat4(effect._uniforms.get(positionUniformName),this.position.x,this.position.y,this.position.z,this.exponent);
			effect;
			normalizeDirection = com_babylonhx_math_Vector3.Normalize(this.direction);
		}
		effect.setFloat4(directionUniformName,normalizeDirection.x,normalizeDirection.y,normalizeDirection.z,Math.cos(this.angle * 0.5));
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._worldMatrix);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_SpotLight
});
var com_babylonhx_lights_shadows_ShadowGenerator = $hx_exports.BABYLON.ShadowGenerator = function(mapSize,light) {
	this._currentFaceIndexCache = 0;
	this._currentFaceIndex = 0;
	this._worldViewProjection = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._projectionMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transparencyShadow = false;
	this._darkness = 0;
	this._lightDirection = new com_babylonhx_math_Vector3(0,0,0);
	this._bias = 0.00005;
	this._blurBoxOffset = 0.0;
	this.blurScale = 2;
	this._filter = com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE;
	var _g = this;
	this._light = light;
	this._scene = light.getScene();
	this._mapSize = mapSize;
	light._shadowGenerator = this;
	this._shadowMap = new com_babylonhx_materials_textures_RenderTargetTexture(light.name + "_shadowMap",mapSize,this._scene,false,true,0,light.needCube());
	this._shadowMap.wrapU = 0;
	this._shadowMap.wrapV = 0;
	this._shadowMap.anisotropicFilteringLevel = 1;
	if(!light.needCube()) this._shadowMap.updateSamplingMode(1);
	this._shadowMap.renderParticles = false;
	this._shadowMap.onBeforeRender = function(faceIndex) {
		_g._currentFaceIndex = faceIndex;
	};
	this._shadowMap.onAfterUnbind = function() {
		if(!_g.get_useBlurVarianceShadowMap()) return;
		if(_g._shadowMap2 == null) {
			_g._shadowMap2 = new com_babylonhx_materials_textures_RenderTargetTexture(light.name + "_shadowMap",mapSize,_g._scene,false);
			_g._shadowMap2.wrapU = 0;
			_g._shadowMap2.wrapV = 0;
			_g._shadowMap2.updateSamplingMode(3);
			_g._downSamplePostprocess = new com_babylonhx_postprocess_PassPostProcess("downScale",1.0 / _g.blurScale,null,2,_g._scene._engine);
			_g._downSamplePostprocess.onApply = function(effect) {
				effect._engine.setTexture(HxOverrides.indexOf(effect._samplers,"textureSampler",0),_g._shadowMap);
			};
			_g.set_blurBoxOffset(1);
		}
		_g._scene.postProcessManager.directRender([_g._downSamplePostprocess,_g._boxBlurPostprocess],_g._shadowMap2.getInternalTexture());
	};
	var renderSubMesh = function(subMesh) {
		var mesh = subMesh._renderingMesh;
		var scene = _g._scene;
		var engine = scene._engine;
		engine.setState(subMesh.getMaterial().backFaceCulling,null,null,null);
		var batch = mesh._getInstancesRenderList(subMesh._id);
		if(batch.mustReturn) return;
		var hardwareInstancedRendering = engine.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null;
		if(_g.isReady(subMesh,hardwareInstancedRendering)) {
			engine.enableEffect(_g._effect);
			mesh._bind(subMesh,_g._effect,0);
			var material = subMesh.getMaterial();
			_g._effect.setMatrix("viewProjection",_g.getTransformMatrix());
			if(material != null && material.needAlphaTesting()) {
				var alphaTexture = material.getAlphaTestTexture();
				_g._effect.setTexture("diffuseSampler",alphaTexture);
				_g._effect.setMatrix("diffuseMatrix",alphaTexture.getTextureMatrix());
			}
			if(mesh.get_useBones() && mesh.computeBonesUsingShaders) _g._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
			mesh._processRendering(subMesh,_g._effect,0,batch,hardwareInstancedRendering,function(isInstance,world) {
				_g._effect.setMatrix("world",world);
			});
		} else _g._shadowMap.resetRefreshCounter();
	};
	this._shadowMap.customRenderFunction = function(opaqueSubMeshes,alphaTestSubMeshes,transparentSubMeshes) {
		var _g1 = 0;
		var _g2 = opaqueSubMeshes.length;
		while(_g1 < _g2) {
			var index = _g1++;
			renderSubMesh(opaqueSubMeshes.data[index]);
		}
		var _g11 = 0;
		var _g3 = alphaTestSubMeshes.length;
		while(_g11 < _g3) {
			var index1 = _g11++;
			renderSubMesh(alphaTestSubMeshes.data[index1]);
		}
		if(_g._transparencyShadow) {
			var _g21 = 0;
			var _g12 = transparentSubMeshes.length;
			while(_g21 < _g12) {
				var index2 = _g21++;
				renderSubMesh(transparentSubMeshes.data[index2]);
			}
		}
	};
	this._shadowMap.onClear = function(engine1) {
		if(_g.get_useBlurVarianceShadowMap() || _g.get_useVarianceShadowMap()) engine1.clear(new com_babylonhx_math_Color4(0,0,0,0),true,true); else engine1.clear(new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0),true,true);
	};
};
$hxClasses["com.babylonhx.lights.shadows.ShadowGenerator"] = com_babylonhx_lights_shadows_ShadowGenerator;
com_babylonhx_lights_shadows_ShadowGenerator.__name__ = true;
com_babylonhx_lights_shadows_ShadowGenerator.prototype = {
	get_bias: function() {
		return this._bias;
	}
	,set_bias: function(bias) {
		this._bias = bias;
		return bias;
	}
	,get_blurBoxOffset: function() {
		return this._blurBoxOffset;
	}
	,set_blurBoxOffset: function(value) {
		var _g = this;
		if(this._blurBoxOffset == value) return value;
		this._blurBoxOffset = value;
		if(this._boxBlurPostprocess != null) this._boxBlurPostprocess.dispose();
		this._boxBlurPostprocess = new com_babylonhx_postprocess_PostProcess("DepthBoxBlur","depthBoxBlur",["screenSize","boxOffset"],[],1.0 / this.blurScale,null,2,this._scene._engine,false,"#define OFFSET " + value);
		this._boxBlurPostprocess.onApply = function(effect) {
			effect._engine.setFloat2(effect._uniforms.get("screenSize"),_g._mapSize / _g.blurScale,_g._mapSize / _g.blurScale);
			effect;
		};
		return value;
	}
	,get_filter: function() {
		return this._filter;
	}
	,set_filter: function(value) {
		if(this._filter == value) return value;
		this._filter = value;
		if(this.get_useVarianceShadowMap() || this.get_useBlurVarianceShadowMap() || this.get_usePoissonSampling()) {
			this._shadowMap.anisotropicFilteringLevel = 16;
			this._shadowMap.updateSamplingMode(3);
		} else {
			this._shadowMap.anisotropicFilteringLevel = 1;
			this._shadowMap.updateSamplingMode(1);
		}
		return value;
	}
	,get_useVarianceShadowMap: function() {
		return this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP && this._light.supportsVSM();
	}
	,set_useVarianceShadowMap: function(value) {
		this.set_filter(value?com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP:com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE);
		return value;
	}
	,get_usePoissonSampling: function() {
		return this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_POISSONSAMPLING || !this._light.supportsVSM() && (this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP || this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP);
	}
	,set_usePoissonSampling: function(value) {
		this.set_filter(value?com_babylonhx_lights_shadows_ShadowGenerator.FILTER_POISSONSAMPLING:com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE);
		return value;
	}
	,get_useBlurVarianceShadowMap: function() {
		return this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP && this._light.supportsVSM();
	}
	,set_useBlurVarianceShadowMap: function(value) {
		this.set_filter(value?com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP:com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE);
		return value;
	}
	,isReady: function(subMesh,useInstances) {
		var defines = [];
		if(this.get_useVarianceShadowMap() || this.get_useBlurVarianceShadowMap()) defines.push("#define VSM");
		var attribs = ["position"];
		var mesh = subMesh._mesh;
		var material = subMesh.getMaterial();
		if(material != null && material.needAlphaTesting()) {
			defines.push("#define ALPHATEST");
			if(mesh.isVerticesDataPresent("uv")) {
				attribs.push("uv");
				defines.push("#define UV1");
			}
			if(mesh.isVerticesDataPresent("uv2")) {
				attribs.push("uv2");
				defines.push("#define UV2");
			}
		}
		if(mesh.get_useBones() && mesh.computeBonesUsingShaders) {
			attribs.push("matricesIndices");
			attribs.push("matricesWeights");
			if(mesh.numBoneInfluencers > 4) {
				attribs.push("matricesIndicesExtra");
				attribs.push("matricesWeightsExtra");
			}
			defines.push("#define NUM_BONE_INFLUENCERS " + mesh.numBoneInfluencers);
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
		} else defines.push("#define NUM_BONE_INFLUENCERS 0");
		if(useInstances) {
			defines.push("#define INSTANCES");
			attribs.push("world0");
			attribs.push("world1");
			attribs.push("world2");
			attribs.push("world3");
		}
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._scene._engine.createEffect("shadowMap",attribs,["world","mBones","viewProjection","diffuseMatrix"],["diffuseSampler"],join);
		}
		return this._effect._isReady;
	}
	,getShadowMap: function() {
		return this._shadowMap;
	}
	,getShadowMapForRendering: function() {
		if(this._shadowMap2 != null) return this._shadowMap2;
		return this._shadowMap;
	}
	,getLight: function() {
		return this._light;
	}
	,getTransformMatrix: function() {
		var scene = this._scene;
		if(this._currentRenderID == scene._renderId && this._currentFaceIndexCache == this._currentFaceIndex) return this._transformMatrix;
		this._currentRenderID = scene._renderId;
		var lightPosition = this._light.position;
		com_babylonhx_math_Vector3.NormalizeToRef(this._light.getShadowDirection(this._currentFaceIndex),this._lightDirection);
		if(Math.abs(com_babylonhx_math_Vector3.Dot(this._lightDirection,new com_babylonhx_math_Vector3(0,1.0,0))) == 1.0) this._lightDirection.z = 0.0000000000001;
		if(this._light.computeTransformedPosition()) lightPosition = this._light.transformedPosition;
		if(this._light.needRefreshPerFrame() || this._cachedPosition == null || this._cachedDirection == null || !lightPosition.equals(this._cachedPosition) || !this._lightDirection.equals(this._cachedDirection)) {
			this._cachedPosition = new com_babylonhx_math_Vector3(lightPosition.x,lightPosition.y,lightPosition.z);
			this._cachedDirection = this._lightDirection.clone();
			com_babylonhx_math_Matrix.LookAtLHToRef(lightPosition,this._light.position.add(this._lightDirection),new com_babylonhx_math_Vector3(0,1.0,0),this._viewMatrix);
			this._light.setShadowProjectionMatrix(this._projectionMatrix,this._viewMatrix,this.getShadowMap().renderList);
			this._viewMatrix.multiplyToRef(this._projectionMatrix,this._transformMatrix);
		}
		return this._transformMatrix;
	}
	,getDarkness: function() {
		return this._darkness;
	}
	,setDarkness: function(darkness) {
		if(darkness >= 1.0) this._darkness = 1.0; else if(darkness <= 0.0) this._darkness = 0.0; else this._darkness = darkness;
	}
	,setTransparencyShadow: function(hasShadow) {
		this._transparencyShadow = hasShadow;
	}
	,_packHalf: function(depth) {
		var scale = depth * 255.0;
		var fract = scale - Math.floor(scale);
		return new com_babylonhx_math_Vector2(depth - fract / 255.0,fract);
	}
	,dispose: function() {
		this._shadowMap.dispose();
		if(this._shadowMap2 != null) this._shadowMap2.dispose();
		if(this._downSamplePostprocess != null) this._downSamplePostprocess.dispose();
		if(this._boxBlurPostprocess != null) this._boxBlurPostprocess.dispose();
	}
	,__class__: com_babylonhx_lights_shadows_ShadowGenerator
	,__properties__: {set_useBlurVarianceShadowMap:"set_useBlurVarianceShadowMap",get_useBlurVarianceShadowMap:"get_useBlurVarianceShadowMap",set_usePoissonSampling:"set_usePoissonSampling",get_usePoissonSampling:"get_usePoissonSampling",set_useVarianceShadowMap:"set_useVarianceShadowMap",get_useVarianceShadowMap:"get_useVarianceShadowMap",set_filter:"set_filter",get_filter:"get_filter",set_blurBoxOffset:"set_blurBoxOffset",get_blurBoxOffset:"get_blurBoxOffset",set_bias:"set_bias",get_bias:"get_bias"}
};
var com_babylonhx_materials_Effect = $hx_exports.BABYLON.Effect = function(baseName,attributesNames,uniformsNames,samplers,engine,defines,fallbacks,onCompiled,onError) {
	this._compilationError = "";
	this._isReady = false;
	var _g = this;
	this._engine = engine;
	this.name = baseName;
	this.defines = defines;
	this._uniformsNames = uniformsNames.concat(samplers);
	this._samplers = samplers;
	this._attributesNames = attributesNames;
	this.onError = onError;
	this.onCompiled = onCompiled;
	var vertex;
	if(Object.prototype.hasOwnProperty.call(baseName,"vertex")) vertex = baseName.vertex; else vertex = baseName;
	var fragment;
	if(Object.prototype.hasOwnProperty.call(baseName,"fragment")) fragment = baseName.fragment; else fragment = baseName;
	var vertexShaderUrl = "";
	if(vertex.charAt(0) == ".") vertexShaderUrl = vertex; else vertexShaderUrl = com_babylonhx_Engine.ShadersRepository + vertex;
	var fragmentShaderUrl = "";
	if(fragment.charAt(0) == ".") fragmentShaderUrl = fragment; else fragmentShaderUrl = com_babylonhx_Engine.ShadersRepository + fragment;
	var _vertexCode = "";
	var prepareEffect = function(_fragmentCode) {
		_g._prepareEffect(_vertexCode,_fragmentCode,attributesNames,defines,fallbacks);
		_g._valueCache = new haxe_ds_StringMap();
	};
	var getFragmentCode = function() {
		var _fragmentCode1 = "";
		if(com_babylonhx_materials_ShadersStore.Shaders.exists(fragment + ".fragment")) {
			_fragmentCode1 = com_babylonhx_materials_ShadersStore.Shaders.get(fragment + ".fragment");
			prepareEffect(_fragmentCode1);
		} else com_babylonhx_tools_Tools.LoadFile(fragmentShaderUrl + ".fragment.fx",function(content) {
			_fragmentCode1 = content;
			prepareEffect(_fragmentCode1);
		},"text");
	};
	if(com_babylonhx_materials_ShadersStore.Shaders.exists(vertex + ".vertex")) {
		_vertexCode = com_babylonhx_materials_ShadersStore.Shaders.get(vertex + ".vertex");
		getFragmentCode();
	} else com_babylonhx_tools_Tools.LoadFile(vertexShaderUrl + ".vertex.fx",function(content1) {
		_vertexCode = content1;
		getFragmentCode();
	},"text");
};
$hxClasses["com.babylonhx.materials.Effect"] = com_babylonhx_materials_Effect;
com_babylonhx_materials_Effect.__name__ = true;
com_babylonhx_materials_Effect.prototype = {
	isReady: function() {
		return this._isReady;
	}
	,getProgram: function() {
		return this._program;
	}
	,getAttributesNames: function() {
		return this._attributesNames;
	}
	,getAttributeLocation: function(index) {
		return this._attributes[index];
	}
	,getAttributeLocationByName: function(name) {
		var index = HxOverrides.indexOf(this._attributesNames,name,0);
		return this._attributes[index];
	}
	,getAttributesCount: function() {
		return this._attributes.length;
	}
	,getUniformIndex: function(uniformName) {
		return HxOverrides.indexOf(this._uniformsNames,uniformName,0);
	}
	,getUniform: function(uniformName) {
		return this._uniforms.get(uniformName);
	}
	,getSamplers: function() {
		return this._samplers;
	}
	,getCompilationError: function() {
		return this._compilationError;
	}
	,_loadVertexShader: function(vertex,callbackFn) {
		if(com_babylonhx_materials_ShadersStore.Shaders.exists(vertex + "VertexShader")) {
			callbackFn(com_babylonhx_materials_ShadersStore.Shaders.get(vertex + "VertexShader"));
			return;
		}
		com_babylonhx_tools_Tools.LoadFile("assets/shaders/" + vertex + ".vertex.fx",callbackFn,"text");
	}
	,_loadFragmentShader: function(fragment,callbackFn) {
		if(com_babylonhx_materials_ShadersStore.Shaders.exists(fragment + "PixelShader")) {
			callbackFn(com_babylonhx_materials_ShadersStore.Shaders.get(fragment + "PixelShader"));
			return;
		}
		com_babylonhx_tools_Tools.LoadFile("assets/shaders/" + fragment + ".fragment.fx",callbackFn,"text");
	}
	,_prepareEffect: function(vertexSourceCode,fragmentSourceCode,attributesNames,defines,fallbacks) {
		try {
			var engine = this._engine;
			if(!engine.getCaps().highPrecisionShaderSupported) {
				vertexSourceCode = StringTools.replace(vertexSourceCode,"precision highp float","precision mediump float");
				fragmentSourceCode = StringTools.replace(fragmentSourceCode,"precision highp float","precision mediump float");
			}
			this._program = engine.createShaderProgram(vertexSourceCode,fragmentSourceCode,defines);
			this._uniforms = engine.getUniforms(this._program,this._uniformsNames);
			this._attributes = engine.getAttributes(this._program,attributesNames);
			var index = 0;
			while(index < this._samplers.length) {
				var sampler = this._uniforms.get(this._samplers[index]);
				if(sampler == null) {
					this._samplers.splice(index,1);
					index--;
				}
				index++;
			}
			engine.bindSamplers(this);
			this._isReady = true;
			if(this.onCompiled != null) this.onCompiled(this);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.indexOf("highp") != -1) {
				vertexSourceCode = StringTools.replace(vertexSourceCode,"precision highp float","precision mediump float");
				fragmentSourceCode = StringTools.replace(fragmentSourceCode,"precision highp float","precision mediump float");
				this._prepareEffect(vertexSourceCode,fragmentSourceCode,attributesNames,defines,fallbacks);
				return;
			}
			if(fallbacks != null && fallbacks.get_isMoreFallbacks()) {
				defines = fallbacks.reduce(defines);
				this._prepareEffect(vertexSourceCode,fragmentSourceCode,attributesNames,defines,fallbacks);
			} else {
				haxe_Log.trace("Unable to compile effect: " + Std.string(this.name),{ fileName : "Effect.hx", lineNumber : 235, className : "com.babylonhx.materials.Effect", methodName : "_prepareEffect"});
				haxe_Log.trace("Defines: " + defines,{ fileName : "Effect.hx", lineNumber : 236, className : "com.babylonhx.materials.Effect", methodName : "_prepareEffect"});
				haxe_Log.trace("Error: " + Std.string(e),{ fileName : "Effect.hx", lineNumber : 238, className : "com.babylonhx.materials.Effect", methodName : "_prepareEffect"});
				this._compilationError = e;
				if(this.onError != null) this.onError(this,this._compilationError);
			}
		}
	}
	,get_isSupported: function() {
		return this._compilationError == "";
	}
	,_bindTexture: function(channel,texture) {
		this._engine._bindTexture(HxOverrides.indexOf(this._samplers,channel,0),texture);
	}
	,setTexture: function(channel,texture) {
		this._engine.setTexture(HxOverrides.indexOf(this._samplers,channel,0),texture);
	}
	,setTextureFromPostProcess: function(channel,postProcess) {
		this._engine.setTextureFromPostProcess(HxOverrides.indexOf(this._samplers,channel,0),postProcess);
	}
	,setArray: function(uniformName,array) {
		this._engine.setArray(this._uniforms.get(uniformName),array);
		return this;
	}
	,setArray2: function(uniformName,array) {
		this._engine.setArray2(this._uniforms.get(uniformName),array);
		return this;
	}
	,setArray3: function(uniformName,array) {
		this._engine.setArray3(this._uniforms.get(uniformName),array);
		return this;
	}
	,setArray4: function(uniformName,array) {
		this._engine.setArray4(this._uniforms.get(uniformName),array);
		return this;
	}
	,setMatrices: function(uniformName,matrices) {
		this._engine.setMatrices(this._uniforms.get(uniformName),matrices);
		return this;
	}
	,setMatrix: function(uniformName,matrix) {
		this._engine.setMatrix(this._uniforms.get(uniformName),matrix);
		return this;
	}
	,setMatrix3x3: function(uniformName,matrix) {
		this._engine.setMatrix3x3(this._uniforms.get(uniformName),matrix);
		return this;
	}
	,setMatrix2x2: function(uniformname,matrix) {
		this._engine.setMatrix2x2(this._uniforms.get(uniformname),matrix);
		return this;
	}
	,setFloat: function(uniformName,value) {
		this._engine.setFloat(this._uniforms.get(uniformName),value);
		return this;
	}
	,setBool: function(uniformName,bool) {
		this._engine.setBool(this._uniforms.get(uniformName),bool);
		return this;
	}
	,setVector2: function(uniformName,vector2) {
		this._engine.setFloat2(this._uniforms.get(uniformName),vector2.x,vector2.y);
		return this;
	}
	,setFloat2: function(uniformName,x,y) {
		this._engine.setFloat2(this._uniforms.get(uniformName),x,y);
		return this;
	}
	,setVector3: function(uniformName,vector3) {
		this._engine.setFloat3(this._uniforms.get(uniformName),vector3.x,vector3.y,vector3.z);
		return this;
	}
	,setFloat3: function(uniformName,x,y,z) {
		this._engine.setFloat3(this._uniforms.get(uniformName),x,y,z);
		return this;
	}
	,setVector4: function(uniformName,vector4) {
		this._engine.setFloat4(this._uniforms.get(uniformName),vector4.x,vector4.y,vector4.z,vector4.w);
		return this;
	}
	,setFloat4: function(uniformName,x,y,z,w) {
		this._engine.setFloat4(this._uniforms.get(uniformName),x,y,z,w);
		return this;
	}
	,setColor3: function(uniformName,color3) {
		this._engine.setColor3(this._uniforms.get(uniformName),color3);
		return this;
	}
	,setColor4: function(uniformName,color3,alpha) {
		this._engine.setColor4(this._uniforms.get(uniformName),color3,alpha);
		return this;
	}
	,__class__: com_babylonhx_materials_Effect
	,__properties__: {get_isSupported:"get_isSupported"}
};
var com_babylonhx_materials_EffectFallbacks = $hx_exports.BABYLON.EffectFallbacks = function() {
	this._maxRank = -1;
	this._currentRank = 32;
	this._defines = [];
};
$hxClasses["com.babylonhx.materials.EffectFallbacks"] = com_babylonhx_materials_EffectFallbacks;
com_babylonhx_materials_EffectFallbacks.__name__ = true;
com_babylonhx_materials_EffectFallbacks.prototype = {
	addFallback: function(rank,define) {
		if(this._defines[rank] == null) {
			if(rank < this._currentRank) this._currentRank = rank;
			if(rank > this._maxRank) this._maxRank = rank;
			this._defines[rank] = [];
		}
		this._defines[rank].push(define);
	}
	,addCPUSkinningFallback: function(rank,mesh) {
		this._meshRank = rank;
		this._mesh = mesh;
		if(rank > this._maxRank) this._maxRank = rank;
	}
	,reduce: function(currentDefines) {
		var currentFallbacks = this._defines[this._currentRank];
		var _g1 = 0;
		var _g = currentFallbacks.length;
		while(_g1 < _g) {
			var index = _g1++;
			currentDefines = StringTools.replace(currentDefines,"#define " + currentFallbacks[index],"");
		}
		if(this._mesh != null && this._currentRank == this._meshRank) {
			this._mesh.computeBonesUsingShaders = false;
			currentDefines = StringTools.replace(currentDefines,"#define NUM_BONE_INFLUENCERS " + this._mesh.numBoneInfluencers,"#define NUM_BONE_INFLUENCERS 0");
			haxe_Log.trace("Falling back to CPU skinning for " + this._mesh.name,{ fileName : "EffectFallbacks.hx", lineNumber : 62, className : "com.babylonhx.materials.EffectFallbacks", methodName : "reduce"});
		}
		this._currentRank++;
		return currentDefines;
	}
	,get_isMoreFallbacks: function() {
		return this._currentRank <= this._maxRank;
	}
	,__class__: com_babylonhx_materials_EffectFallbacks
	,__properties__: {get_isMoreFallbacks:"get_isMoreFallbacks"}
};
var com_babylonhx_materials_FresnelParameters = $hx_exports.BABYLON.FresnelParameters = function() {
	this.power = 1;
	this.bias = 0;
	this.rightColor = new com_babylonhx_math_Color3(0,0,0);
	this.leftColor = new com_babylonhx_math_Color3(1,1,1);
	this.isEnabled = true;
};
$hxClasses["com.babylonhx.materials.FresnelParameters"] = com_babylonhx_materials_FresnelParameters;
com_babylonhx_materials_FresnelParameters.__name__ = true;
com_babylonhx_materials_FresnelParameters.prototype = {
	clone: function() {
		var newFresnelParameters = new com_babylonhx_materials_FresnelParameters();
		newFresnelParameters.isEnabled = this.isEnabled;
		newFresnelParameters.leftColor = this.leftColor;
		newFresnelParameters.rightColor = this.rightColor;
		newFresnelParameters.bias = this.bias;
		newFresnelParameters.power = this.power;
		return newFresnelParameters;
	}
	,__class__: com_babylonhx_materials_FresnelParameters
};
var com_babylonhx_materials_Material = $hx_exports.BABYLON.Material = function(name,scene,doNotAdd) {
	if(doNotAdd == null) doNotAdd = false;
	this.zOffset = 0.0;
	this.pointSize = 1.0;
	this._fillMode = 0;
	this._wasPreviouslyReady = false;
	this.fogEnabled = false;
	this.disableDepthWrite = false;
	this.alphaMode = 2;
	this.sideOrientation = 1;
	this.backFaceCulling = true;
	this.alpha = 1.0;
	this.state = "";
	this.checkReadyOnlyOnce = false;
	this.checkReadyOnEveryCall = false;
	this.id = name;
	this.name = name;
	this._scene = scene;
	if(!doNotAdd) scene.materials.push(this);
};
$hxClasses["com.babylonhx.materials.Material"] = com_babylonhx_materials_Material;
com_babylonhx_materials_Material.__name__ = true;
com_babylonhx_materials_Material.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_materials_Material.prototype = {
	get_wireframe: function() {
		return this._fillMode == 1;
	}
	,set_wireframe: function(value) {
		if(value) this._fillMode = 1; else this._fillMode = 0;
		return value;
	}
	,get_pointsCloud: function() {
		return this._fillMode == 2;
	}
	,set_pointsCloud: function(value) {
		if(value) this._fillMode = 2; else this._fillMode = 0;
		return value;
	}
	,get_fillMode: function() {
		return this._fillMode;
	}
	,set_fillMode: function(value) {
		this._fillMode = value;
		return value;
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		return true;
	}
	,getEffect: function() {
		return this._effect;
	}
	,getScene: function() {
		return this._scene;
	}
	,needAlphaBlending: function() {
		return this.alpha < 1.0;
	}
	,needAlphaTesting: function() {
		return false;
	}
	,getAlphaTestTexture: function() {
		return null;
	}
	,trackCreation: function(onCompiled,onError) {
	}
	,markDirty: function() {
		this._wasPreviouslyReady = false;
	}
	,_preBind: function() {
		var engine = this._scene._engine;
		engine.enableEffect(this._effect);
		engine.setState(this.backFaceCulling,this.zOffset,false,this.sideOrientation == 0);
	}
	,bind: function(world,mesh) {
		this._scene._cachedMaterial = this;
		if(this.onBind != null) this.onBind(this);
		if(this.disableDepthWrite) {
			var engine = this._scene._engine;
			this._cachedDepthWriteState = engine._depthCullingState.get_depthMask();
			engine._depthCullingState.set_depthMask(false);
		}
	}
	,bindOnlyWorldMatrix: function(world) {
	}
	,unbind: function() {
		if(this.disableDepthWrite) {
			var engine = this._scene._engine;
			engine._depthCullingState.set_depthMask(this._cachedDepthWriteState);
		}
	}
	,clone: function(name) {
		return null;
	}
	,getBindedMeshes: function() {
		var result = [];
		var _g1 = 0;
		var _g = this._scene.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this._scene.meshes[index];
			if(mesh.get_material() == this) result.push(mesh);
		}
		return result;
	}
	,dispose: function(forceDisposeEffect) {
		if(forceDisposeEffect == null) forceDisposeEffect = false;
		this.getScene().stopAnimation(this);
		var index = HxOverrides.indexOf(this._scene.materials,this,0);
		if(index >= 0) this._scene.materials.splice(index,1);
		if(forceDisposeEffect && this._effect != null) {
			this._scene._engine._releaseEffect(this._effect);
			this._effect = null;
		}
		var _g1 = 0;
		var _g = this._scene.meshes.length;
		while(_g1 < _g) {
			var index1 = _g1++;
			var mesh = this._scene.meshes[index1];
			if(mesh.get_material() == this) mesh.set_material(null);
		}
		if(this.onDispose != null) this.onDispose();
	}
	,copyTo: function(other) {
		other.checkReadyOnlyOnce = this.checkReadyOnlyOnce;
		other.checkReadyOnEveryCall = this.checkReadyOnEveryCall;
		other.alpha = this.alpha;
		other.set_fillMode(this.get_fillMode());
		other.backFaceCulling = this.backFaceCulling;
		other.set_wireframe(this.get_wireframe());
		other.fogEnabled = this.fogEnabled;
		other.set_wireframe(this.get_wireframe());
		other.zOffset = this.zOffset;
		other.alphaMode = this.alphaMode;
		other.sideOrientation = this.sideOrientation;
		other.disableDepthWrite = this.disableDepthWrite;
		other.pointSize = this.pointSize;
		other.set_pointsCloud(this.get_pointsCloud());
	}
	,__class__: com_babylonhx_materials_Material
	,__properties__: {set_fillMode:"set_fillMode",get_fillMode:"get_fillMode",set_pointsCloud:"set_pointsCloud",get_pointsCloud:"get_pointsCloud",set_wireframe:"set_wireframe",get_wireframe:"get_wireframe"}
};
var com_babylonhx_materials_MaterialDefines = function() {
	this.result = "";
	this.ret = true;
};
$hxClasses["com.babylonhx.materials.MaterialDefines"] = com_babylonhx_materials_MaterialDefines;
com_babylonhx_materials_MaterialDefines.__name__ = true;
com_babylonhx_materials_MaterialDefines.prototype = {
	isEqual: function(other) {
		this.ret = true;
		var _g1 = 0;
		var _g = this.defines.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.defines[i] != other.defines[i]) {
				this.ret = false;
				break;
			}
		}
		return this.ret;
	}
	,cloneTo: function(other) {
		var _g1 = 0;
		var _g = this.defines.length;
		while(_g1 < _g) {
			var i = _g1++;
			other.defines[i] = other.defines[i];
		}
	}
	,reset: function() {
		var _g1 = 0;
		var _g = this.defines.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.defines[i] = false;
		}
	}
	,toString: function() {
		this.result = "";
		var _g1 = 0;
		var _g = this.defines.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.defines[i] == true) this.result += "#define " + this._keys[i] + "\n";
		}
		return this.result;
	}
	,__class__: com_babylonhx_materials_MaterialDefines
};
var com_babylonhx_materials_MultiMaterial = $hx_exports.BABYLON.MultiMaterial = function(name,scene) {
	this.subMaterials = [];
	com_babylonhx_materials_Material.call(this,name,scene,true);
	scene.multiMaterials.push(this);
};
$hxClasses["com.babylonhx.materials.MultiMaterial"] = com_babylonhx_materials_MultiMaterial;
com_babylonhx_materials_MultiMaterial.__name__ = true;
com_babylonhx_materials_MultiMaterial.__super__ = com_babylonhx_materials_Material;
com_babylonhx_materials_MultiMaterial.prototype = $extend(com_babylonhx_materials_Material.prototype,{
	getSubMaterial: function(index) {
		if(index < 0 || index >= this.subMaterials.length) return this.getScene().defaultMaterial;
		return this.subMaterials[index];
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		var _g1 = 0;
		var _g = this.subMaterials.length;
		while(_g1 < _g) {
			var index = _g1++;
			var subMaterial = this.subMaterials[index];
			if(subMaterial != null) {
				if(!this.subMaterials[index].isReady(mesh)) return false;
			}
		}
		return true;
	}
	,clone: function(name) {
		var newMultiMaterial = new com_babylonhx_materials_MultiMaterial(name,this.getScene());
		var _g1 = 0;
		var _g = this.subMaterials.length;
		while(_g1 < _g) {
			var index = _g1++;
			var subMaterial = this.subMaterials[index];
			newMultiMaterial.subMaterials.push(subMaterial);
		}
		return newMultiMaterial;
	}
	,__class__: com_babylonhx_materials_MultiMaterial
});
var com_babylonhx_materials_ShaderMaterial = $hx_exports.BABYLON.ShaderMaterial = function(name,scene,shaderPath,options) {
	this._cachedWorldViewMatrix = new com_babylonhx_math_Matrix();
	this._matrices2x2 = new haxe_ds_StringMap();
	this._matrices3x3 = new haxe_ds_StringMap();
	this._matrices = new haxe_ds_StringMap();
	this._vectors3 = new haxe_ds_StringMap();
	this._vectors2 = new haxe_ds_StringMap();
	this._colors4 = new haxe_ds_StringMap();
	this._colors3 = new haxe_ds_StringMap();
	this._floatsArrays = new haxe_ds_StringMap();
	this._floats = new haxe_ds_StringMap();
	this._textures = new haxe_ds_StringMap();
	com_babylonhx_materials_Material.call(this,name,scene);
	this._shaderPath = shaderPath;
	if(options.needAlphaBlending != null) options.needAlphaBlending = options.needAlphaBlending; else options.needAlphaBlending = false;
	if(options.needAlphaTesting != null) options.needAlphaTesting = options.needAlphaTesting; else options.needAlphaTesting = false;
	if(options.attributes != null) options.attributes = options.attributes; else options.attributes = ["position","normal","uv"];
	if(options.uniforms != null) options.uniforms = options.uniforms; else options.uniforms = ["worldViewProjection"];
	if(options.samplers != null) options.samplers = options.samplers; else options.samplers = [];
	if(options.defines != null) options.defines = options.defines; else options.defines = [];
	this._options = options;
};
$hxClasses["com.babylonhx.materials.ShaderMaterial"] = com_babylonhx_materials_ShaderMaterial;
com_babylonhx_materials_ShaderMaterial.__name__ = true;
com_babylonhx_materials_ShaderMaterial.__super__ = com_babylonhx_materials_Material;
com_babylonhx_materials_ShaderMaterial.prototype = $extend(com_babylonhx_materials_Material.prototype,{
	needAlphaBlending: function() {
		return this._options.needAlphaBlending;
	}
	,needAlphaTesting: function() {
		return this._options.needAlphaTesting;
	}
	,_checkUniform: function(uniformName) {
		if(HxOverrides.indexOf(this._options.uniforms,uniformName,0) == -1) this._options.uniforms.push(uniformName);
	}
	,setTexture: function(name,texture) {
		if(HxOverrides.indexOf(this._options.samplers,name,0) == -1) this._options.samplers.push(name);
		{
			this._textures.set(name,texture);
			texture;
		}
		return this;
	}
	,setFloat: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._floats.set(name,value);
			value;
		}
		return this;
	}
	,setFloats: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._floatsArrays.set(name,value);
			value;
		}
		return this;
	}
	,setColor3: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._colors3.set(name,value);
			value;
		}
		return this;
	}
	,setColor4: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._colors4.set(name,value);
			value;
		}
		return this;
	}
	,setVector2: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._vectors2.set(name,value);
			value;
		}
		return this;
	}
	,setVector3: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._vectors3.set(name,value);
			value;
		}
		return this;
	}
	,setMatrix: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._matrices.set(name,value);
			value;
		}
		return this;
	}
	,setMatrix3x3: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._matrices3x3.set(name,value);
			value;
		}
		return this;
	}
	,setMatrix2x2: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._matrices2x2.set(name,value);
			value;
		}
		return this;
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		var scene = this.getScene();
		var engine = scene._engine;
		if(!this.checkReadyOnEveryCall) {
			if(this._renderId == scene._renderId) return true;
		}
		var defines = [];
		var fallbacks = new com_babylonhx_materials_EffectFallbacks();
		if(useInstances) defines.push("#define INSTANCES");
		var _g1 = 0;
		var _g = this._options.defines.length;
		while(_g1 < _g) {
			var index = _g1++;
			defines.push(this._options.defines[index]);
		}
		if(mesh != null && mesh.get_useBones() && mesh.computeBonesUsingShaders) {
			defines.push("#define NUM_BONE_INFLUENCERS " + mesh.numBoneInfluencers);
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
			fallbacks.addCPUSkinningFallback(0,mesh);
		}
		if(engine._alphaTest) defines.push("#define ALPHATEST");
		var previousEffect = this._effect;
		var join = defines.join("\n");
		this._effect = engine.createEffect(this._shaderPath,this._options.attributes,this._options.uniforms,this._options.samplers,join,fallbacks,this.onCompiled,this.onError);
		if(!this._effect._isReady) return false;
		if(previousEffect != this._effect) scene._cachedMaterial = null;
		this._renderId = scene._renderId;
		return true;
	}
	,bindOnlyWorldMatrix: function(world) {
		var scene = this.getScene();
		if(HxOverrides.indexOf(this._options.uniforms,"world",0) != -1) this._effect.setMatrix("world",world);
		if(HxOverrides.indexOf(this._options.uniforms,"worldView",0) != -1) {
			world.multiplyToRef(scene._viewMatrix,this._cachedWorldViewMatrix);
			this._effect.setMatrix("worldView",this._cachedWorldViewMatrix);
		}
		if(HxOverrides.indexOf(this._options.uniforms,"worldViewProjection",0) != -1) this._effect.setMatrix("worldViewProjection",world.multiply(scene._transformMatrix));
	}
	,bind: function(world,mesh) {
		this.bindOnlyWorldMatrix(world);
		if(this.getScene().getCachedMaterial() != this) {
			if(HxOverrides.indexOf(this._options.uniforms,"view",0) != -1) this._effect.setMatrix("view",this.getScene().getViewMatrix());
			if(HxOverrides.indexOf(this._options.uniforms,"projection",0) != -1) this._effect.setMatrix("projection",this.getScene().getProjectionMatrix());
			if(HxOverrides.indexOf(this._options.uniforms,"viewProjection",0) != -1) this._effect.setMatrix("viewProjection",this.getScene().getTransformMatrix());
			if(mesh != null && mesh.get_useBones() && mesh.computeBonesUsingShaders) this._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
			var $it0 = this._textures.keys();
			while( $it0.hasNext() ) {
				var name = $it0.next();
				this._effect.setTexture(name,this._textures.get(name));
			}
			var $it1 = this._floats.keys();
			while( $it1.hasNext() ) {
				var name1 = $it1.next();
				this._effect.setFloat(name1,this._floats.get(name1));
			}
			var $it2 = this._floatsArrays.keys();
			while( $it2.hasNext() ) {
				var name2 = $it2.next();
				this._effect.setArray(name2,this._floatsArrays.get(name2));
			}
			var $it3 = this._colors3.keys();
			while( $it3.hasNext() ) {
				var name3 = $it3.next();
				this._effect.setColor3(name3,this._colors3.get(name3));
			}
			var $it4 = this._colors4.keys();
			while( $it4.hasNext() ) {
				var name4 = $it4.next();
				var color = this._colors4.get(name4);
				this._effect.setFloat4(name4,color.r,color.g,color.b,color.a);
			}
			var $it5 = this._vectors2.keys();
			while( $it5.hasNext() ) {
				var name5 = $it5.next();
				this._effect.setVector2(name5,this._vectors2.get(name5));
			}
			var $it6 = this._vectors3.keys();
			while( $it6.hasNext() ) {
				var name6 = $it6.next();
				this._effect.setVector3(name6,this._vectors3.get(name6));
			}
			var $it7 = this._matrices.keys();
			while( $it7.hasNext() ) {
				var name7 = $it7.next();
				this._effect.setMatrix(name7,this._matrices.get(name7));
			}
			var $it8 = this._matrices3x3.keys();
			while( $it8.hasNext() ) {
				var name8 = $it8.next();
				this._effect.setMatrix3x3(name8,this._matrices3x3.get(name8));
			}
			var $it9 = this._matrices2x2.keys();
			while( $it9.hasNext() ) {
				var name9 = $it9.next();
				this._effect.setMatrix2x2(name9,this._matrices2x2.get(name9));
			}
		}
		com_babylonhx_materials_Material.prototype.bind.call(this,world,null);
	}
	,dispose: function(forceDisposeEffect) {
		if(forceDisposeEffect == null) forceDisposeEffect = false;
		var $it0 = this._textures.keys();
		while( $it0.hasNext() ) {
			var name = $it0.next();
			this._textures.get(name).dispose();
		}
		this._textures = null;
		com_babylonhx_materials_Material.prototype.dispose.call(this,forceDisposeEffect);
	}
	,__class__: com_babylonhx_materials_ShaderMaterial
});
var com_babylonhx_materials_ShadersStore = $hx_exports.BABYLON.ShadersStore = function() { };
$hxClasses["com.babylonhx.materials.ShadersStore"] = com_babylonhx_materials_ShadersStore;
com_babylonhx_materials_ShadersStore.__name__ = true;
var com_babylonhx_math_Color3 = $hx_exports.BABYLON.Color3 = function(r,g,b) {
	if(b == null) b = 0;
	if(g == null) g = 0;
	if(r == null) r = 0;
	this.r = r;
	this.g = g;
	this.b = b;
};
$hxClasses["com.babylonhx.math.Color3"] = com_babylonhx_math_Color3;
com_babylonhx_math_Color3.__name__ = true;
com_babylonhx_math_Color3.FromHexString = function(hex) {
	if(hex.substring(0,1) != "#" || hex.length != 7) {
		haxe_Log.trace("Color3.FromHexString must be called with a string like #FFFFFF",{ fileName : "Color3.hx", lineNumber : 170, className : "com.babylonhx.math.Color3", methodName : "FromHexString"});
		return new com_babylonhx_math_Color3(0,0,0);
	}
	var r = Std.parseInt(hex.substring(1,3));
	var g = Std.parseInt(hex.substring(3,5));
	var b = Std.parseInt(hex.substring(5,7));
	return new com_babylonhx_math_Color3(r / 255.0,g / 255.0,b / 255.0);
};
com_babylonhx_math_Color3.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Color3(array[0],array[1],array[2]);
};
com_babylonhx_math_Color3.FromInt = function(rgb) {
	return new com_babylonhx_math_Color3((rgb >> 16 & 255) / 255.0,(rgb >> 8 & 255) / 255.0,(rgb & 255) / 255.0);
};
com_babylonhx_math_Color3.FromInts = function(r,g,b) {
	return new com_babylonhx_math_Color3(r / 255.0,g / 255.0,b / 255.0);
};
com_babylonhx_math_Color3.Lerp = function(start,end,amount) {
	var r = start.r + (end.r - start.r) * amount;
	var g = start.g + (end.g - start.g) * amount;
	var b = start.b + (end.b - start.b) * amount;
	return new com_babylonhx_math_Color3(r,g,b);
};
com_babylonhx_math_Color3.Red = function() {
	return new com_babylonhx_math_Color3(1,0,0);
};
com_babylonhx_math_Color3.Green = function() {
	return new com_babylonhx_math_Color3(0,1,0);
};
com_babylonhx_math_Color3.Blue = function() {
	return new com_babylonhx_math_Color3(0,0,1);
};
com_babylonhx_math_Color3.Black = function() {
	return new com_babylonhx_math_Color3(0,0,0);
};
com_babylonhx_math_Color3.White = function() {
	return new com_babylonhx_math_Color3(1,1,1);
};
com_babylonhx_math_Color3.Purple = function() {
	return new com_babylonhx_math_Color3(0.5,0,0.5);
};
com_babylonhx_math_Color3.Magenta = function() {
	return new com_babylonhx_math_Color3(1,0,1);
};
com_babylonhx_math_Color3.Yellow = function() {
	return new com_babylonhx_math_Color3(1,1,0);
};
com_babylonhx_math_Color3.Gray = function() {
	return new com_babylonhx_math_Color3(0.5,0.5,0.5);
};
com_babylonhx_math_Color3.prototype = {
	toString: function() {
		return "{R:" + this.r + " G:" + this.g + " B:" + this.b + "}";
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.r;
		array[index + 1] = this.g;
		array[index + 2] = this.b;
		return this;
	}
	,toColor4: function(alpha) {
		if(alpha == null) alpha = 1;
		return new com_babylonhx_math_Color4(this.r,this.g,this.b,alpha);
	}
	,asArray: function() {
		var result = [];
		result[0] = this.r;
		result[1] = this.g;
		result[2] = this.b;
		this;
		return result;
	}
	,toLuminance: function() {
		return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;
	}
	,multiply: function(otherColor) {
		return new com_babylonhx_math_Color3(this.r * otherColor.r,this.g * otherColor.g,this.b * otherColor.b);
	}
	,multiplyToRef: function(otherColor,result) {
		result.r = this.r * otherColor.r;
		result.g = this.g * otherColor.g;
		result.b = this.b * otherColor.b;
		return this;
	}
	,equals: function(otherColor) {
		return otherColor != null && this.r == otherColor.r && this.g == otherColor.g && this.b == otherColor.b;
	}
	,equalsFloats: function(r,g,b) {
		return this.r == r && this.g == g && this.b == b;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Color3(this.r * scale,this.g * scale,this.b * scale);
	}
	,scaleToRef: function(scale,result) {
		result.r = this.r * scale;
		result.g = this.g * scale;
		result.b = this.b * scale;
		return this;
	}
	,add: function(otherColor) {
		return new com_babylonhx_math_Color3(this.r + otherColor.r,this.g + otherColor.g,this.b + otherColor.b);
	}
	,addToRef: function(otherColor,result) {
		result.r = this.r + otherColor.r;
		result.g = this.g + otherColor.g;
		result.b = this.b + otherColor.b;
		return this;
	}
	,subtract: function(otherColor) {
		return new com_babylonhx_math_Color3(this.r - otherColor.r,this.g - otherColor.g,this.b - otherColor.b);
	}
	,subtractToRef: function(otherColor,result) {
		result.r = this.r - otherColor.r;
		result.g = this.g - otherColor.g;
		result.b = this.b - otherColor.b;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Color3(this.r,this.g,this.b);
	}
	,copyFrom: function(source) {
		this.r = source.r;
		this.g = source.g;
		this.b = source.b;
		return this;
	}
	,copyFromFloats: function(r,g,b) {
		this.r = r;
		this.g = g;
		this.b = b;
		return this;
	}
	,toHexString: function() {
		var intR = this.r * 255 | 0;
		var intG = this.g * 255 | 0;
		var intB = this.b * 255 | 0;
		return "#" + com_babylonhx_tools_Tools.ToHex(intR) + com_babylonhx_tools_Tools.ToHex(intG) + com_babylonhx_tools_Tools.ToHex(intB);
	}
	,toLinearSpace: function() {
		var convertedColor = new com_babylonhx_math_Color3();
		convertedColor.r = Math.pow(this.r,2.2);
		convertedColor.g = Math.pow(this.g,2.2);
		convertedColor.b = Math.pow(this.b,2.2);
		this;
		return convertedColor;
	}
	,toLinearSpaceToRef: function(convertedColor) {
		convertedColor.r = Math.pow(this.r,2.2);
		convertedColor.g = Math.pow(this.g,2.2);
		convertedColor.b = Math.pow(this.b,2.2);
		return this;
	}
	,toGammaSpace: function() {
		var convertedColor = new com_babylonhx_math_Color3();
		convertedColor.r = Math.pow(this.r,0.45454545454545453);
		convertedColor.g = Math.pow(this.g,0.45454545454545453);
		convertedColor.b = Math.pow(this.b,0.45454545454545453);
		this;
		return convertedColor;
	}
	,toGammaSpaceToRef: function(convertedColor) {
		convertedColor.r = Math.pow(this.r,0.45454545454545453);
		convertedColor.g = Math.pow(this.g,0.45454545454545453);
		convertedColor.b = Math.pow(this.b,0.45454545454545453);
		return this;
	}
	,__class__: com_babylonhx_math_Color3
};
var com_babylonhx_materials_StandardMaterial = $hx_exports.BABYLON.StandardMaterial = function(name,scene) {
	this._cachedDefines = new com_babylonhx_materials_StandardMaterialDefines();
	this._defines = new com_babylonhx_materials_StandardMaterialDefines();
	this._renderId = 0;
	this._globalAmbientColor = new com_babylonhx_math_Color3(0,0,0);
	this._worldViewProjectionMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._renderTargets = new com_babylonhx_tools_SmartArray(16);
	this.useGlossinessFromSpecularMapAlpha = false;
	this.useLightmapAsShadowmap = false;
	this.roughness = 0;
	this.disableLighting = false;
	this.useSpecularOverAlpha = true;
	this.useReflectionFresnelFromSpecular = false;
	this.linkEmissiveWithDiffuse = false;
	this.useEmissiveAsIllumination = false;
	this.useAlphaFromDiffuseTexture = false;
	this.emissiveColor = new com_babylonhx_math_Color3(0,0,0);
	this.specularPower = 64;
	this.specularColor = new com_babylonhx_math_Color3(1,1,1);
	this.diffuseColor = new com_babylonhx_math_Color3(1,1,1);
	this.ambientColor = new com_babylonhx_math_Color3(0,0,0);
	this.lightmapTexture = null;
	this.bumpTexture = null;
	this.specularTexture = null;
	this.emissiveTexture = null;
	this.reflectionTexture = null;
	this.opacityTexture = null;
	this.ambientTexture = null;
	this.diffuseTexture = null;
	var _g = this;
	com_babylonhx_materials_Material.call(this,name,scene);
	this._cachedDefines.BonesPerMesh = -1;
	this.getRenderTargetTextures = function() {
		_g._renderTargets.reset();
		if(_g.reflectionTexture != null && _g.reflectionTexture.isRenderTarget) _g._renderTargets.push(_g.reflectionTexture);
		return _g._renderTargets;
	};
};
$hxClasses["com.babylonhx.materials.StandardMaterial"] = com_babylonhx_materials_StandardMaterial;
com_babylonhx_materials_StandardMaterial.__name__ = true;
com_babylonhx_materials_StandardMaterial.PrepareDefinesForLights = function(scene,mesh,defines) {
	var lightIndex = 0;
	var needNormals = false;
	var _g1 = 0;
	var _g = scene.lights.length;
	while(_g1 < _g) {
		var index = _g1++;
		var light = scene.lights[index];
		if(!light.isEnabled()) continue;
		if(light._excludedMeshesIds.length > 0) {
			var _g3 = 0;
			var _g2 = light._excludedMeshesIds.length;
			while(_g3 < _g2) {
				var excludedIndex = _g3++;
				var excludedMesh = scene.getMeshByID(light._excludedMeshesIds[excludedIndex]);
				if(excludedMesh != null) light.excludedMeshes.push(excludedMesh);
			}
			light._excludedMeshesIds = [];
		}
		if(light._includedOnlyMeshesIds.length > 0) {
			var _g31 = 0;
			var _g21 = light._includedOnlyMeshesIds.length;
			while(_g31 < _g21) {
				var includedOnlyIndex = _g31++;
				var includedOnlyMesh = scene.getMeshByID(light._includedOnlyMeshesIds[includedOnlyIndex]);
				if(includedOnlyMesh != null) light.includedOnlyMeshes.push(includedOnlyMesh);
			}
			light._includedOnlyMeshesIds = [];
		}
		if(!light.canAffectMesh(mesh)) continue;
		needNormals = true;
		defines.defines[14 + lightIndex] = true;
		var type = defines.getLight(light.get_type(),lightIndex);
		defines.defines[type] = true;
		if(!light.specular.equalsFloats(0,0,0)) defines.defines[34] = true;
		if(scene.shadowsEnabled) {
			var shadowGenerator = light.getShadowGenerator();
			if(mesh != null && mesh.get_receiveShadows() && shadowGenerator != null) {
				defines.defines[35 + lightIndex] = true;
				defines.defines[39] = true;
				if(shadowGenerator.get_useVarianceShadowMap() || shadowGenerator.get_useBlurVarianceShadowMap()) defines.defines[40 + lightIndex] = true;
				if(shadowGenerator.get_usePoissonSampling()) defines.defines[44 + lightIndex] = true;
			}
		}
		lightIndex++;
		if(lightIndex == 4) break;
	}
	return needNormals;
};
com_babylonhx_materials_StandardMaterial.BindLights = function(scene,mesh,effect,defines) {
	var lightIndex = 0;
	var _g1 = 0;
	var _g = scene.lights.length;
	while(_g1 < _g) {
		var index = _g1++;
		var light = scene.lights[index];
		if(!light.isEnabled()) continue;
		if(!light.canAffectMesh(mesh)) continue;
		var _g2 = light.get_type();
		switch(_g2) {
		case "POINTLIGHT":
			light.transferToEffect(effect,"vLightData" + lightIndex);
			break;
		case "DIRLIGHT":
			light.transferToEffect(effect,"vLightData" + lightIndex);
			break;
		case "SPOTLIGHT":
			light.transferToEffect(effect,"vLightData" + lightIndex,"vLightDirection" + lightIndex);
			break;
		case "HEMILIGHT":
			light.transferToEffect(effect,"vLightData" + lightIndex,"vLightGround" + lightIndex);
			break;
		}
		light.diffuse.scaleToRef(light.intensity,com_babylonhx_materials_StandardMaterial._scaledDiffuse);
		effect._engine.setColor4(effect._uniforms.get("vLightDiffuse" + lightIndex),com_babylonhx_materials_StandardMaterial._scaledDiffuse,light.range);
		effect;
		if(defines.defines[34]) {
			light.specular.scaleToRef(light.intensity,com_babylonhx_materials_StandardMaterial._scaledSpecular);
			effect._engine.setColor3(effect._uniforms.get("vLightSpecular" + lightIndex),com_babylonhx_materials_StandardMaterial._scaledSpecular);
			effect;
		}
		if(scene.shadowsEnabled) {
			var shadowGenerator = light.getShadowGenerator();
			if(mesh.get_receiveShadows() && shadowGenerator != null) {
				if(!(js_Boot.__cast(light , com_babylonhx_lights_IShadowLight)).needCube()) effect.setMatrix("lightMatrix" + lightIndex,shadowGenerator.getTransformMatrix());
				effect.setTexture("shadowSampler" + lightIndex,shadowGenerator.getShadowMapForRendering());
				effect.setFloat3("shadowsInfo" + lightIndex,shadowGenerator.getDarkness(),shadowGenerator.getShadowMap().getSize().width,shadowGenerator.get_bias());
			}
		}
		lightIndex++;
		if(lightIndex == 4) break;
	}
};
com_babylonhx_materials_StandardMaterial.__super__ = com_babylonhx_materials_Material;
com_babylonhx_materials_StandardMaterial.prototype = $extend(com_babylonhx_materials_Material.prototype,{
	get_useLogarithmicDepth: function() {
		return this._useLogarithmicDepth;
	}
	,set_useLogarithmicDepth: function(value) {
		this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;
		return this._useLogarithmicDepth;
	}
	,needAlphaBlending: function() {
		return this.alpha < 1.0 || this.opacityTexture != null || this._shouldUseAlphaFromDiffuseTexture() || this.opacityFresnelParameters != null && this.opacityFresnelParameters.isEnabled;
	}
	,needAlphaTesting: function() {
		return this.diffuseTexture != null && this.diffuseTexture.hasAlpha;
	}
	,_shouldUseAlphaFromDiffuseTexture: function() {
		return this.diffuseTexture != null && this.diffuseTexture.hasAlpha && this.useAlphaFromDiffuseTexture;
	}
	,getAlphaTestTexture: function() {
		return this.diffuseTexture;
	}
	,_checkCache: function(scene,mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		if(mesh == null) return true;
		if(this._defines.defines[58] != useInstances) return false;
		if(mesh._materialDefines != null && mesh._materialDefines.isEqual(this._defines)) return true;
		return false;
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		if(this.checkReadyOnlyOnce) {
			if(this._wasPreviouslyReady) return true;
		}
		var scene = this.getScene();
		if(!this.checkReadyOnEveryCall) {
			if(this._renderId == scene._renderId) {
				if(this._checkCache(scene,mesh,useInstances)) return true;
			}
		}
		var engine = scene._engine;
		var needNormals = false;
		var needUVs = false;
		this._defines.reset();
		if(scene.texturesEnabled) {
			if(this.diffuseTexture != null && com_babylonhx_materials_StandardMaterial.DiffuseTextureEnabled) {
				if(!this.diffuseTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[0] = true;
				}
			}
			if(this.ambientTexture != null && com_babylonhx_materials_StandardMaterial.AmbientTextureEnabled) {
				if(!this.ambientTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[1] = true;
				}
			}
			if(this.opacityTexture != null && com_babylonhx_materials_StandardMaterial.OpacityTextureEnabled) {
				if(!this.opacityTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[2] = true;
					if(this.opacityTexture.getAlphaFromRGB) this._defines.defines[3] = true;
				}
			}
			if(this.reflectionTexture != null && com_babylonhx_materials_StandardMaterial.ReflectionTextureEnabled) {
				if(!this.reflectionTexture.isReady()) return false; else {
					needNormals = true;
					this._defines.defines[4] = true;
					if(this.roughness > 0) this._defines.defines[60] = true;
					if(this.reflectionTexture.coordinatesMode == 6) this._defines.defines[74] = true;
					this._defines.defines[66] = this.reflectionTexture.isCube;
					var _g = this.reflectionTexture.coordinatesMode;
					switch(_g) {
					case 3:case 6:
						this._defines.defines[69] = true;
						break;
					case 0:
						this._defines.defines[72] = true;
						break;
					case 2:
						this._defines.defines[68] = true;
						break;
					case 4:
						this._defines.defines[70] = true;
						break;
					case 5:
						this._defines.defines[71] = true;
						break;
					case 1:
						this._defines.defines[67] = true;
						break;
					case 7:
						this._defines.defines[73] = true;
						break;
					}
				}
			}
			if(this.emissiveTexture != null && com_babylonhx_materials_StandardMaterial.EmissiveTextureEnabled) {
				if(!this.emissiveTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[5] = true;
				}
			}
			if(this.lightmapTexture != null && com_babylonhx_materials_StandardMaterial.LightmapEnabled) {
				if(!this.lightmapTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[64] = true;
					this._defines.defines[65] = this.useLightmapAsShadowmap;
				}
			}
			if(this.specularTexture != null && com_babylonhx_materials_StandardMaterial.SpecularTextureEnabled) {
				if(!this.specularTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[6] = true;
					this._defines.defines[59] = this.useGlossinessFromSpecularMapAlpha;
				}
			}
		}
		if(scene._engine.getCaps().standardDerivatives == true && this.bumpTexture != null && com_babylonhx_materials_StandardMaterial.BumpTextureEnabled) {
			if(!this.bumpTexture.isReady()) return false; else {
				needUVs = true;
				this._defines.defines[7] = true;
			}
		}
		if(scene.clipPlane != null) this._defines.defines[9] = true;
		if(engine._alphaTest) this._defines.defines[10] = true;
		if(this._shouldUseAlphaFromDiffuseTexture()) this._defines.defines[11] = true;
		if(this.useEmissiveAsIllumination) this._defines.defines[61] = true;
		if(this.linkEmissiveWithDiffuse) this._defines.defines[62] = true;
		if(this.useReflectionFresnelFromSpecular) this._defines.defines[63] = true;
		if(this.get_useLogarithmicDepth()) this._defines.defines[75] = true;
		if(this.get_pointsCloud() || scene.forcePointsCloud) this._defines.defines[12] = true;
		if(scene.fogEnabled && mesh != null && mesh.applyFog && scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE && this.fogEnabled) this._defines.defines[13] = true;
		if(scene.lightsEnabled && !this.disableLighting) needNormals = com_babylonhx_materials_StandardMaterial.PrepareDefinesForLights(scene,mesh,this._defines);
		if(com_babylonhx_materials_StandardMaterial.FresnelEnabled) {
			if(this.diffuseFresnelParameters != null && this.diffuseFresnelParameters.isEnabled) this._defines.defines[48] = true;
			if(this.opacityFresnelParameters != null && this.opacityFresnelParameters.isEnabled) this._defines.defines[49] = true;
			if(this.reflectionFresnelParameters != null && this.reflectionFresnelParameters.isEnabled) this._defines.defines[50] = true;
			if(this.emissiveFresnelParameters != null && this.emissiveFresnelParameters.isEnabled) this._defines.defines[51] = true;
			if(this._defines.defines[48] || this._defines.defines[49] || this._defines.defines[50] || this._defines.defines[51]) {
				needNormals = true;
				this._defines.defines[52] = true;
			}
		}
		if(this._defines.defines[34] && this.useSpecularOverAlpha) this._defines.defines[8] = true;
		if(mesh != null) {
			if(needNormals && mesh.isVerticesDataPresent("normal")) this._defines.defines[53] = true;
			if(needUVs) {
				if(mesh.isVerticesDataPresent("uv")) this._defines.defines[54] = true;
				if(mesh.isVerticesDataPresent("uv2")) this._defines.defines[55] = true;
			}
			if(mesh.useVertexColors && mesh.isVerticesDataPresent("color")) {
				this._defines.defines[56] = true;
				if(mesh.hasVertexAlpha) this._defines.defines[57] = true;
			}
			if(mesh.get_useBones() && mesh.computeBonesUsingShaders) {
				this._defines.NUM_BONE_INFLUENCERS = mesh.numBoneInfluencers;
				this._defines.BonesPerMesh = mesh.get_skeleton().bones.length + 1;
			}
			if(useInstances) this._defines.defines[58] = true;
		}
		if(!this._defines.isEqual(this._cachedDefines) || this._effect == null) {
			this._defines.cloneTo(this._cachedDefines);
			scene._cachedMaterial = null;
			var fallbacks = new com_babylonhx_materials_EffectFallbacks();
			if(this._defines.defines[4]) fallbacks.addFallback(0,"REFLECTION");
			if(this._defines.defines[6]) fallbacks.addFallback(0,"SPECULAR");
			if(this._defines.defines[7]) fallbacks.addFallback(0,"BUMP");
			if(this._defines.defines[8]) fallbacks.addFallback(0,"SPECULAROVERALPHA");
			if(this._defines.defines[13]) fallbacks.addFallback(1,"FOG");
			if(this._defines.defines[12]) fallbacks.addFallback(0,"POINTSIZE");
			if(this._defines.defines[75]) fallbacks.addFallback(0,"LOGARITHMICDEPTH");
			var _g1 = 0;
			while(_g1 < 4) {
				var lightIndex = _g1++;
				if(!this._defines.defines[14 + lightIndex]) continue;
				if(lightIndex > 0) fallbacks.addFallback(lightIndex,"LIGHT" + lightIndex);
				if(this._defines.defines[35 + lightIndex]) fallbacks.addFallback(0,"SHADOW" + lightIndex);
				if(this._defines.defines[44 + lightIndex]) fallbacks.addFallback(0,"SHADOWPCF" + lightIndex);
				if(this._defines.defines[40 + lightIndex]) fallbacks.addFallback(0,"SHADOWVSM" + lightIndex);
			}
			if(this._defines.defines[34]) fallbacks.addFallback(0,"SPECULARTERM");
			if(this._defines.defines[48]) fallbacks.addFallback(1,"DIFFUSEFRESNEL");
			if(this._defines.defines[49]) fallbacks.addFallback(2,"OPACITYFRESNEL");
			if(this._defines.defines[50]) fallbacks.addFallback(3,"REFLECTIONFRESNEL");
			if(this._defines.defines[51]) fallbacks.addFallback(4,"EMISSIVEFRESNEL");
			if(this._defines.defines[52]) fallbacks.addFallback(4,"FRESNEL");
			if(this._defines.NUM_BONE_INFLUENCERS > 0) fallbacks.addCPUSkinningFallback(0,mesh);
			var attribs = ["position"];
			if(this._defines.defines[53]) attribs.push("normal");
			if(this._defines.defines[54]) attribs.push("uv");
			if(this._defines.defines[55]) attribs.push("uv2");
			if(this._defines.defines[56]) attribs.push("color");
			if(this._defines.NUM_BONE_INFLUENCERS > 0) {
				attribs.push("matricesIndices");
				attribs.push("matricesWeights");
				if(this._defines.NUM_BONE_INFLUENCERS > 4) {
					attribs.push("matricesIndicesExtra");
					attribs.push("matricesWeightsExtra");
				}
			}
			if(this._defines.defines[58]) {
				attribs.push("world0");
				attribs.push("world1");
				attribs.push("world2");
				attribs.push("world3");
			}
			var shaderName = "default";
			if(scene._engine.getCaps().standardDerivatives != true) shaderName = "legacydefault";
			var join = this._defines.toString();
			this._effect = scene._engine.createEffect(shaderName,attribs,["world","view","viewProjection","vEyePosition","vLightsType","vAmbientColor","vDiffuseColor","vSpecularColor","vEmissiveColor","vLightData0","vLightDiffuse0","vLightSpecular0","vLightDirection0","vLightGround0","lightMatrix0","vLightData1","vLightDiffuse1","vLightSpecular1","vLightDirection1","vLightGround1","lightMatrix1","vLightData2","vLightDiffuse2","vLightSpecular2","vLightDirection2","vLightGround2","lightMatrix2","vLightData3","vLightDiffuse3","vLightSpecular3","vLightDirection3","vLightGround3","lightMatrix3","vFogInfos","vFogColor","pointSize","vDiffuseInfos","vAmbientInfos","vOpacityInfos","vReflectionInfos","vEmissiveInfos","vSpecularInfos","vBumpInfos","vLightmapInfos","mBones","vClipPlane","diffuseMatrix","ambientMatrix","opacityMatrix","reflectionMatrix","emissiveMatrix","specularMatrix","bumpMatrix","lightmapMatrix","shadowsInfo0","shadowsInfo1","shadowsInfo2","shadowsInfo3","diffuseLeftColor","diffuseRightColor","opacityParts","reflectionLeftColor","reflectionRightColor","emissiveLeftColor","emissiveRightColor","logarithmicDepthConstant"],["diffuseSampler","ambientSampler","opacitySampler","reflectionCubeSampler","reflection2DSampler","emissiveSampler","specularSampler","bumpSampler","lightmapSampler","shadowSampler0","shadowSampler1","shadowSampler2","shadowSampler3"],join,fallbacks,this.onCompiled,this.onError);
		}
		if(!this._effect._isReady) return false;
		this._renderId = scene._renderId;
		this._wasPreviouslyReady = true;
		if(mesh != null) {
			if(mesh._materialDefines == null) mesh._materialDefines = new com_babylonhx_materials_StandardMaterialDefines();
			this._defines.cloneTo(mesh._materialDefines);
		}
		return true;
	}
	,unbind: function() {
		if(this.reflectionTexture != null && this.reflectionTexture.isRenderTarget) this._effect.setTexture("reflection2DSampler",null);
		com_babylonhx_materials_Material.prototype.unbind.call(this);
	}
	,bindOnlyWorldMatrix: function(world) {
		this._effect.setMatrix("world",world);
	}
	,bind: function(world,mesh) {
		var scene = this.getScene();
		this.bindOnlyWorldMatrix(world);
		this._effect.setMatrix("viewProjection",scene._transformMatrix);
		if(mesh != null && mesh.get_useBones() && mesh.computeBonesUsingShaders) this._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
		if(scene.getCachedMaterial() != this) {
			if(com_babylonhx_materials_StandardMaterial.FresnelEnabled) {
				if(this.diffuseFresnelParameters != null && this.diffuseFresnelParameters.isEnabled) {
					this._effect.setColor4("diffuseLeftColor",this.diffuseFresnelParameters.leftColor,this.diffuseFresnelParameters.power);
					this._effect.setColor4("diffuseRightColor",this.diffuseFresnelParameters.rightColor,this.diffuseFresnelParameters.bias);
				}
				if(this.opacityFresnelParameters != null && this.opacityFresnelParameters.isEnabled) this._effect.setColor4("opacityParts",new com_babylonhx_math_Color3(this.opacityFresnelParameters.leftColor.toLuminance(),this.opacityFresnelParameters.rightColor.toLuminance(),this.opacityFresnelParameters.bias),this.opacityFresnelParameters.power);
				if(this.reflectionFresnelParameters != null && this.reflectionFresnelParameters.isEnabled) {
					this._effect.setColor4("reflectionLeftColor",this.reflectionFresnelParameters.leftColor,this.reflectionFresnelParameters.power);
					this._effect.setColor4("reflectionRightColor",this.reflectionFresnelParameters.rightColor,this.reflectionFresnelParameters.bias);
				}
				if(this.emissiveFresnelParameters != null && this.emissiveFresnelParameters.isEnabled) {
					this._effect.setColor4("emissiveLeftColor",this.emissiveFresnelParameters.leftColor,this.emissiveFresnelParameters.power);
					this._effect.setColor4("emissiveRightColor",this.emissiveFresnelParameters.rightColor,this.emissiveFresnelParameters.bias);
				}
			}
			if(this.diffuseTexture != null && com_babylonhx_materials_StandardMaterial.DiffuseTextureEnabled) {
				this._effect.setTexture("diffuseSampler",this.diffuseTexture);
				this._effect.setFloat2("vDiffuseInfos",this.diffuseTexture.coordinatesIndex,this.diffuseTexture.level);
				this._effect.setMatrix("diffuseMatrix",this.diffuseTexture.getTextureMatrix());
			}
			if(this.ambientTexture != null && com_babylonhx_materials_StandardMaterial.AmbientTextureEnabled) {
				this._effect.setTexture("ambientSampler",this.ambientTexture);
				this._effect.setFloat2("vAmbientInfos",this.ambientTexture.coordinatesIndex,this.ambientTexture.level);
				this._effect.setMatrix("ambientMatrix",this.ambientTexture.getTextureMatrix());
			}
			if(this.opacityTexture != null && com_babylonhx_materials_StandardMaterial.OpacityTextureEnabled) {
				this._effect.setTexture("opacitySampler",this.opacityTexture);
				this._effect.setFloat2("vOpacityInfos",this.opacityTexture.coordinatesIndex,this.opacityTexture.level);
				this._effect.setMatrix("opacityMatrix",this.opacityTexture.getTextureMatrix());
			}
			if(this.reflectionTexture != null && com_babylonhx_materials_StandardMaterial.ReflectionTextureEnabled) {
				if(this.reflectionTexture.isCube) this._effect.setTexture("reflectionCubeSampler",this.reflectionTexture); else this._effect.setTexture("reflection2DSampler",this.reflectionTexture);
				this._effect.setMatrix("reflectionMatrix",this.reflectionTexture.getReflectionTextureMatrix());
				this._effect.setFloat2("vReflectionInfos",this.reflectionTexture.level,this.roughness);
			}
			if(this.emissiveTexture != null && com_babylonhx_materials_StandardMaterial.EmissiveTextureEnabled) {
				this._effect.setTexture("emissiveSampler",this.emissiveTexture);
				this._effect.setFloat2("vEmissiveInfos",this.emissiveTexture.coordinatesIndex,this.emissiveTexture.level);
				this._effect.setMatrix("emissiveMatrix",this.emissiveTexture.getTextureMatrix());
			}
			if(this.lightmapTexture != null && com_babylonhx_materials_StandardMaterial.LightmapEnabled) {
				this._effect.setTexture("lightmapSampler",this.lightmapTexture);
				this._effect.setFloat2("vLightmapInfos",this.lightmapTexture.coordinatesIndex,this.lightmapTexture.level);
				this._effect.setMatrix("lightmapMatrix",this.lightmapTexture.getTextureMatrix());
			}
			if(this.specularTexture != null && com_babylonhx_materials_StandardMaterial.SpecularTextureEnabled) {
				this._effect.setTexture("specularSampler",this.specularTexture);
				this._effect.setFloat2("vSpecularInfos",this.specularTexture.coordinatesIndex,this.specularTexture.level);
				this._effect.setMatrix("specularMatrix",this.specularTexture.getTextureMatrix());
			}
			if(this.bumpTexture != null && scene._engine.getCaps().standardDerivatives == true && com_babylonhx_materials_StandardMaterial.BumpTextureEnabled) {
				this._effect.setTexture("bumpSampler",this.bumpTexture);
				this._effect.setFloat2("vBumpInfos",this.bumpTexture.coordinatesIndex,1.0 / this.bumpTexture.level);
				this._effect.setMatrix("bumpMatrix",this.bumpTexture.getTextureMatrix());
			}
			if(scene.clipPlane != null) {
				var clipPlane = scene.clipPlane;
				this._effect.setFloat4("vClipPlane",clipPlane.normal.x,clipPlane.normal.y,clipPlane.normal.z,clipPlane.d);
			}
			if(this.get_pointsCloud()) this._effect.setFloat("pointSize",this.pointSize);
			scene.ambientColor.multiplyToRef(this.ambientColor,this._globalAmbientColor);
			this._effect.setVector3("vEyePosition",scene._mirroredCameraPosition != null?scene._mirroredCameraPosition:scene.activeCamera.position);
			this._effect.setColor3("vAmbientColor",this._globalAmbientColor);
			if(this._defines.defines[34]) this._effect.setColor4("vSpecularColor",this.specularColor,this.specularPower);
			this._effect.setColor3("vEmissiveColor",this.emissiveColor);
		}
		this._effect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha * mesh.get_visibility());
		if(scene.lightsEnabled && !this.disableLighting) com_babylonhx_materials_StandardMaterial.BindLights(scene,mesh,this._effect,this._defines);
		if(scene.fogEnabled && mesh.applyFog && scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE || this.reflectionTexture != null) this._effect.setMatrix("view",scene._viewMatrix);
		if(scene.fogEnabled && mesh.applyFog && scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE) {
			this._effect.setFloat4("vFogInfos",scene.fogMode,scene.fogStart,scene.fogEnd,scene.fogDensity);
			this._effect.setColor3("vFogColor",scene.fogColor);
		}
		if(this._defines.defines[75]) this._effect.setFloat("logarithmicDepthConstant",2.0 / (Math.log(scene.activeCamera.maxZ + 1.0) / 0.6931471805599453));
		com_babylonhx_materials_Material.prototype.bind.call(this,world,mesh);
	}
	,getAnimatables: function() {
		var results = [];
		if(this.diffuseTexture != null && this.diffuseTexture.animations != null && this.diffuseTexture.animations.length > 0) results.push(this.diffuseTexture);
		if(this.ambientTexture != null && this.ambientTexture.animations != null && this.ambientTexture.animations.length > 0) results.push(this.ambientTexture);
		if(this.opacityTexture != null && this.opacityTexture.animations != null && this.opacityTexture.animations.length > 0) results.push(this.opacityTexture);
		if(this.reflectionTexture != null && this.reflectionTexture.animations != null && this.reflectionTexture.animations.length > 0) results.push(this.reflectionTexture);
		if(this.emissiveTexture != null && this.emissiveTexture.animations != null && this.emissiveTexture.animations.length > 0) results.push(this.emissiveTexture);
		if(this.specularTexture != null && this.specularTexture.animations != null && this.specularTexture.animations.length > 0) results.push(this.specularTexture);
		if(this.bumpTexture != null && this.bumpTexture.animations != null && this.bumpTexture.animations.length > 0) results.push(this.bumpTexture);
		return results;
	}
	,dispose: function(forceDisposeEffect) {
		if(forceDisposeEffect == null) forceDisposeEffect = false;
		if(this.diffuseTexture != null) this.diffuseTexture.dispose();
		if(this.ambientTexture != null) this.ambientTexture.dispose();
		if(this.opacityTexture != null) this.opacityTexture.dispose();
		if(this.reflectionTexture != null) this.reflectionTexture.dispose();
		if(this.emissiveTexture != null) this.emissiveTexture.dispose();
		if(this.specularTexture != null) this.specularTexture.dispose();
		if(this.bumpTexture != null) this.bumpTexture.dispose();
		com_babylonhx_materials_Material.prototype.dispose.call(this,forceDisposeEffect);
	}
	,clone: function(name) {
		var newStandardMaterial = new com_babylonhx_materials_StandardMaterial(name,this.getScene());
		this.copyTo(newStandardMaterial);
		if(this.diffuseTexture != null) newStandardMaterial.diffuseTexture = this.diffuseTexture.clone();
		if(this.ambientTexture != null) newStandardMaterial.ambientTexture = this.ambientTexture.clone();
		if(this.opacityTexture != null) newStandardMaterial.opacityTexture = this.opacityTexture.clone();
		if(this.reflectionTexture != null) newStandardMaterial.reflectionTexture = this.reflectionTexture.clone();
		if(this.emissiveTexture != null) newStandardMaterial.emissiveTexture = this.emissiveTexture.clone();
		if(this.specularTexture != null) newStandardMaterial.specularTexture = this.specularTexture.clone();
		if(this.bumpTexture != null) newStandardMaterial.bumpTexture = this.bumpTexture.clone();
		if(this.lightmapTexture != null) {
			newStandardMaterial.lightmapTexture = this.lightmapTexture.clone();
			newStandardMaterial.useLightmapAsShadowmap = this.useLightmapAsShadowmap;
		}
		newStandardMaterial.ambientColor = this.ambientColor.clone();
		newStandardMaterial.diffuseColor = this.diffuseColor.clone();
		newStandardMaterial.specularColor = this.specularColor.clone();
		newStandardMaterial.specularPower = this.specularPower;
		newStandardMaterial.emissiveColor = this.emissiveColor.clone();
		newStandardMaterial.useAlphaFromDiffuseTexture = this.useAlphaFromDiffuseTexture;
		newStandardMaterial.useEmissiveAsIllumination = this.useEmissiveAsIllumination;
		newStandardMaterial.useGlossinessFromSpecularMapAlpha = this.useGlossinessFromSpecularMapAlpha;
		newStandardMaterial.useReflectionFresnelFromSpecular = this.useReflectionFresnelFromSpecular;
		newStandardMaterial.useSpecularOverAlpha = this.useSpecularOverAlpha;
		newStandardMaterial.roughness = this.roughness;
		if(this.diffuseFresnelParameters != null) newStandardMaterial.diffuseFresnelParameters = this.diffuseFresnelParameters.clone();
		if(this.emissiveFresnelParameters != null) newStandardMaterial.emissiveFresnelParameters = this.emissiveFresnelParameters.clone();
		if(this.reflectionFresnelParameters != null) newStandardMaterial.reflectionFresnelParameters = this.reflectionFresnelParameters.clone();
		if(this.opacityFresnelParameters != null) newStandardMaterial.opacityFresnelParameters = this.opacityFresnelParameters.clone();
		return newStandardMaterial;
	}
	,__class__: com_babylonhx_materials_StandardMaterial
	,__properties__: $extend(com_babylonhx_materials_Material.prototype.__properties__,{set_useLogarithmicDepth:"set_useLogarithmicDepth",get_useLogarithmicDepth:"get_useLogarithmicDepth"})
});
var com_babylonhx_materials_StandardMaterialDefines = function() {
	this.NUM_BONE_INFLUENCERS = 0;
	this.BonesPerMesh = 0;
	com_babylonhx_materials_MaterialDefines.call(this);
	this._keys = ["DIFFUSE","AMBIENT","OPACITY","OPACITYRGB","REFLECTION","EMISSIVE","SPECULAR","BUMP","SPECULAROVERALPHA","CLIPPLANE","ALPHATEST","ALPHAFROMDIFFUSE","POINTSIZE","FOG","LIGHT0","LIGHT1","LIGHT2","LIGHT3","SPOTLIGHT0","SPOTLIGHT1","SPOTLIGHT2","SPOTLIGHT3","HEMILIGHT0","HEMILIGHT1","HEMILIGHT2","HEMILIGHT3","POINTLIGHT0","POINTLIGHT1","POINTLIGHT2","POINTLIGHT3","DIRLIGHT0","DIRLIGHT1","DIRLIGHT2","DIRLIGHT3","SPECULARTERM","SHADOW0","SHADOW1","SHADOW2","SHADOW3","SHADOWS","SHADOWVSM0","SHADOWVSM1","SHADOWVSM2","SHADOWVSM3","SHADOWPCF0","SHADOWPCF1","SHADOWPCF2","SHADOWPCF3","DIFFUSEFRESNEL","OPACITYFRESNEL","REFLECTIONFRESNEL","EMISSIVEFRESNEL","FRESNEL","NORMAL","UV1","UV2","VERTEXCOLOR","VERTEXALPHA","INSTANCES","GLOSSINESS","ROUGHNESS","EMISSIVEASILLUMINATION","LINKEMISSIVEWITHDIFFUSE","REFLECTIONFRESNELFROMSPECULAR","LIGHTMAP","USELIGHTMAPASSHADOWMAP","REFLECTIONMAP_3D","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_PLANAR","REFLECTIONMAP_CUBIC","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_EQUIRECTANGULAR","INVERTCUBICMAP","LOGARITHMICDEPTH"];
	var this1;
	this1 = new Array(this._keys.length);
	this.defines = this1;
	var _g1 = 0;
	var _g = this._keys.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.defines[i] = false;
	}
	this.BonesPerMesh = 0;
	this.NUM_BONE_INFLUENCERS = 0;
};
$hxClasses["com.babylonhx.materials.StandardMaterialDefines"] = com_babylonhx_materials_StandardMaterialDefines;
com_babylonhx_materials_StandardMaterialDefines.__name__ = true;
com_babylonhx_materials_StandardMaterialDefines.__super__ = com_babylonhx_materials_MaterialDefines;
com_babylonhx_materials_StandardMaterialDefines.prototype = $extend(com_babylonhx_materials_MaterialDefines.prototype,{
	cloneTo: function(other) {
		com_babylonhx_materials_MaterialDefines.prototype.cloneTo.call(this,other);
		other.BonesPerMesh = this.BonesPerMesh;
		other.NUM_BONE_INFLUENCERS = this.NUM_BONE_INFLUENCERS;
	}
	,reset: function() {
		com_babylonhx_materials_MaterialDefines.prototype.reset.call(this);
		this.BonesPerMesh = 0;
		this.NUM_BONE_INFLUENCERS = 0;
	}
	,toString: function() {
		var result = com_babylonhx_materials_MaterialDefines.prototype.toString.call(this);
		result += "#define BonesPerMesh " + this.BonesPerMesh + "\n";
		result += "#define NUM_BONE_INFLUENCERS " + this.NUM_BONE_INFLUENCERS + "\n";
		return result;
	}
	,getLight: function(lightType,lightIndex) {
		switch(lightType) {
		case "POINTLIGHT":
			switch(lightIndex) {
			case 0:
				return 26;
			case 1:
				return 27;
			case 2:
				return 28;
			case 3:
				return 29;
			}
			break;
		case "HEMILIGHT":
			switch(lightIndex) {
			case 0:
				return 22;
			case 1:
				return 23;
			case 2:
				return 24;
			case 3:
				return 25;
			}
			break;
		case "DIRLIGHT":
			switch(lightIndex) {
			case 0:
				return 30;
			case 1:
				return 31;
			case 2:
				return 32;
			case 3:
				return 33;
			}
			break;
		case "SPOTLIGHT":
			switch(lightIndex) {
			case 0:
				return 18;
			case 1:
				return 19;
			case 2:
				return 20;
			case 3:
				return 21;
			}
			break;
		}
		return -1;
	}
	,__class__: com_babylonhx_materials_StandardMaterialDefines
});
var com_babylonhx_materials_textures_BaseTexture = $hx_exports.BABYLON.BaseTexture = function(scene) {
	this.anisotropicFilteringLevel = 4;
	this.wrapV = 1;
	this.wrapU = 1;
	this.coordinatesMode = 0;
	this.coordinatesIndex = 0;
	this.animations = [];
	this.isRenderTarget = false;
	this.isCube = false;
	this.level = 1;
	this.getAlphaFromRGB = false;
	this.hasAlpha = false;
	this.delayLoadState = 0;
	this._scene = scene;
	this._scene.textures.push(this);
};
$hxClasses["com.babylonhx.materials.textures.BaseTexture"] = com_babylonhx_materials_textures_BaseTexture;
com_babylonhx_materials_textures_BaseTexture.__name__ = true;
com_babylonhx_materials_textures_BaseTexture.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_materials_textures_BaseTexture.prototype = {
	getScene: function() {
		return this._scene;
	}
	,getTextureMatrix: function() {
		return null;
	}
	,getReflectionTextureMatrix: function() {
		return null;
	}
	,getInternalTexture: function() {
		return this._texture;
	}
	,isReady: function() {
		if(this.delayLoadState == 4) return true;
		if(this._texture != null) return this._texture.isReady;
		return false;
	}
	,getSize: function() {
		if(this._texture._width != -1 && this._texture._width != 0) return { width : this._texture._width, height : this._texture._height};
		if(this._texture._size != null) return { width : this._texture._size, height : this._texture._size};
		return { width : 0, height : 0};
	}
	,getBaseSize: function() {
		if(!this.isReady()) return { width : 0, height : 0};
		if(this._texture._size != null) return { width : this._texture._size, height : this._texture._size};
		return { width : this._texture._baseWidth, height : this._texture._baseHeight};
	}
	,scale: function(ratio) {
	}
	,_removeFromCache: function(url,noMipmap) {
		var texturesCache = this._scene._engine.getLoadedTexturesCache();
		var _g1 = 0;
		var _g = texturesCache.length;
		while(_g1 < _g) {
			var index = _g1++;
			var texturesCacheEntry = texturesCache[index];
			if(texturesCacheEntry.url == url && texturesCacheEntry.noMipmap == noMipmap) {
				texturesCache.splice(index,1);
				return;
			}
		}
	}
	,_getFromCache: function(url,noMipmap,sampling) {
		var texturesCache = this._scene._engine.getLoadedTexturesCache();
		var _g1 = 0;
		var _g = texturesCache.length;
		while(_g1 < _g) {
			var index = _g1++;
			var texturesCacheEntry = texturesCache[index];
			if(texturesCacheEntry.url == url && texturesCacheEntry.noMipmap == noMipmap) {
				if(sampling == null || sampling == texturesCacheEntry.samplingMode) {
					texturesCacheEntry.references++;
					return texturesCacheEntry;
				}
			}
		}
		return null;
	}
	,delayLoad: function() {
	}
	,releaseInternalTexture: function() {
		if(this._texture == null) return;
		var texturesCache = this._scene._engine.getLoadedTexturesCache();
		this._texture.references--;
		if(this._texture.references == 0) {
			HxOverrides.remove(texturesCache,this._texture);
			this._scene._engine._releaseTexture(this._texture);
			this._texture = null;
		}
	}
	,clone: function() {
		return null;
	}
	,dispose: function() {
		this.getScene().stopAnimation(this);
		var index = HxOverrides.indexOf(this._scene.textures,this,0);
		if(index >= 0) this._scene.textures.splice(index,1);
		if(this._texture == null) return;
		this.releaseInternalTexture();
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_materials_textures_BaseTexture
};
var com_babylonhx_materials_textures_Texture = $hx_exports.BABYLON.Texture = function(url,scene,noMipmap,invertY,samplingMode,onLoad,onError,buffer,deleteBuffer) {
	if(deleteBuffer == null) deleteBuffer = false;
	if(samplingMode == null) samplingMode = 3;
	if(invertY == null) invertY = true;
	if(noMipmap == null) noMipmap = false;
	this.wAng = 0;
	this.vAng = 0;
	this.uAng = 0;
	this.vScale = 1.0;
	this.uScale = 1.0;
	this.vOffset = 0;
	this.uOffset = 0;
	com_babylonhx_materials_textures_BaseTexture.call(this,scene);
	this.name = url;
	this.url = url;
	this._noMipmap = noMipmap;
	this._invertY = invertY;
	this._samplingMode = samplingMode;
	this._buffer = buffer;
	this._deleteBuffer = deleteBuffer;
	if(url == null || StringTools.trim(url) == "") return;
	this._texture = this._getFromCache(url,noMipmap,samplingMode);
	if(this._texture == null) {
		if(!scene.useDelayedTextureLoading) {
			if(url.indexOf(".") != -1) {
				this._texture = scene._engine.createTexture(url,noMipmap,invertY,scene,this._samplingMode,onLoad,onError,this._buffer);
				if(deleteBuffer) this._buffer = null;
			}
		} else this.delayLoadState = 4;
	}
};
$hxClasses["com.babylonhx.materials.textures.Texture"] = com_babylonhx_materials_textures_Texture;
com_babylonhx_materials_textures_Texture.__name__ = true;
com_babylonhx_materials_textures_Texture.CreateFromBase64String = function(data,name,scene,noMipmap,invertY,samplingMode,onLoad,onError) {
	if(samplingMode == null) samplingMode = 3;
	return new com_babylonhx_materials_textures_Texture("data:" + name,scene,noMipmap,invertY,samplingMode,onLoad,onError,data);
};
com_babylonhx_materials_textures_Texture.__super__ = com_babylonhx_materials_textures_BaseTexture;
com_babylonhx_materials_textures_Texture.prototype = $extend(com_babylonhx_materials_textures_BaseTexture.prototype,{
	delayLoad: function() {
		if(this.delayLoadState != 4) return;
		this.delayLoadState = 1;
		this._texture = this._getFromCache(this.url,this._noMipmap,this._samplingMode);
		if(this._texture == null) {
			this._texture = this.getScene().getEngine().createTexture(this.url,this._noMipmap,this._invertY,this.getScene(),this._samplingMode,null,null,this._buffer);
			if(this._deleteBuffer) this._buffer = null;
		}
	}
	,updateSamplingMode: function(samplingMode) {
		if(this._texture == null) return;
		this.getScene().getEngine().updateTextureSamplingMode(samplingMode,this._texture);
	}
	,_prepareRowForTextureGeneration: function(x,y,z,t) {
		x *= this.uScale;
		y *= this.vScale;
		x -= 0.5 * this.uScale;
		y -= 0.5 * this.vScale;
		z -= 0.5;
		com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(x,y,z,this._rowGenerationMatrix,t);
		t.x += 0.5 * this.uScale + this.uOffset;
		t.y += 0.5 * this.vScale + this.vOffset;
		t.z += 0.5;
	}
	,getTextureMatrix: function() {
		if(this.uOffset == this._cachedUOffset && this.vOffset == this._cachedVOffset && this.uScale == this._cachedUScale && this.vScale == this._cachedVScale && this.uAng == this._cachedUAng && this.vAng == this._cachedVAng && this.wAng == this._cachedWAng) return this._cachedTextureMatrix;
		this._cachedUOffset = this.uOffset;
		this._cachedVOffset = this.vOffset;
		this._cachedUScale = this.uScale;
		this._cachedVScale = this.vScale;
		this._cachedUAng = this.uAng;
		this._cachedVAng = this.vAng;
		this._cachedWAng = this.wAng;
		if(this._cachedTextureMatrix == null) {
			this._cachedTextureMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
			this._rowGenerationMatrix = new com_babylonhx_math_Matrix();
			this._t0 = new com_babylonhx_math_Vector3(0,0,0);
			this._t1 = new com_babylonhx_math_Vector3(0,0,0);
			this._t2 = new com_babylonhx_math_Vector3(0,0,0);
		}
		com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.vAng,this.uAng,this.wAng,com_babylonhx_math_Matrix._tempQuaternion);
		com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._rowGenerationMatrix);
		this._prepareRowForTextureGeneration(0,0,0,this._t0);
		this._prepareRowForTextureGeneration(1.0,0,0,this._t1);
		this._prepareRowForTextureGeneration(0,1.0,0,this._t2);
		this._t1.subtractInPlace(this._t0);
		this._t2.subtractInPlace(this._t0);
		com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._cachedTextureMatrix);
		this._cachedTextureMatrix.m[0] = this._t1.x;
		this._cachedTextureMatrix.m[1] = this._t1.y;
		this._cachedTextureMatrix.m[2] = this._t1.z;
		this._cachedTextureMatrix.m[4] = this._t2.x;
		this._cachedTextureMatrix.m[5] = this._t2.y;
		this._cachedTextureMatrix.m[6] = this._t2.z;
		this._cachedTextureMatrix.m[8] = this._t0.x;
		this._cachedTextureMatrix.m[9] = this._t0.y;
		this._cachedTextureMatrix.m[10] = this._t0.z;
		return this._cachedTextureMatrix;
	}
	,getReflectionTextureMatrix: function() {
		if(this.uOffset == this._cachedUOffset && this.vOffset == this._cachedVOffset && this.uScale == this._cachedUScale && this.vScale == this._cachedVScale && this.coordinatesMode == this._cachedCoordinatesMode) return this._cachedTextureMatrix;
		if(this._cachedTextureMatrix == null) {
			this._cachedTextureMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
			this._projectionModeMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
		}
		this._cachedCoordinatesMode = this.coordinatesMode;
		var _g = this.coordinatesMode;
		switch(_g) {
		case 2:
			com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._cachedTextureMatrix);
			this._cachedTextureMatrix.m[0] = this.uScale;
			this._cachedTextureMatrix.m[5] = this.vScale;
			this._cachedTextureMatrix.m[12] = this.uOffset;
			this._cachedTextureMatrix.m[13] = this.vOffset;
			break;
		case 4:
			com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._projectionModeMatrix);
			this._projectionModeMatrix.m[0] = 0.5;
			this._projectionModeMatrix.m[5] = -0.5;
			this._projectionModeMatrix.m[10] = 0.0;
			this._projectionModeMatrix.m[12] = 0.5;
			this._projectionModeMatrix.m[13] = 0.5;
			this._projectionModeMatrix.m[14] = 1.0;
			this._projectionModeMatrix.m[15] = 1.0;
			this.getScene().getProjectionMatrix().multiplyToRef(this._projectionModeMatrix,this._cachedTextureMatrix);
			break;
		default:
			com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._cachedTextureMatrix);
		}
		return this._cachedTextureMatrix;
	}
	,clone: function() {
		var newTexture = new com_babylonhx_materials_textures_Texture(this._texture.url,this.getScene(),this._noMipmap,this._invertY,this._samplingMode);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.wrapU = this.wrapU;
		newTexture.wrapV = this.wrapV;
		newTexture.coordinatesIndex = this.coordinatesIndex;
		newTexture.coordinatesMode = this.coordinatesMode;
		newTexture.uOffset = this.uOffset;
		newTexture.vOffset = this.vOffset;
		newTexture.uScale = this.uScale;
		newTexture.vScale = this.vScale;
		newTexture.uAng = this.uAng;
		newTexture.vAng = this.vAng;
		newTexture.wAng = this.wAng;
		return newTexture;
	}
	,__class__: com_babylonhx_materials_textures_Texture
});
var com_babylonhx_materials_textures_RenderTargetTexture = $hx_exports.BABYLON.RenderTargetTexture = function(name,size,scene,generateMipMaps,doNotChangeAspectRatio,type,isCube) {
	if(isCube == null) isCube = false;
	if(type == null) type = 0;
	if(doNotChangeAspectRatio == null) doNotChangeAspectRatio = true;
	this._refreshRate = 1;
	this._currentRefreshId = -1;
	this.renderSprites = false;
	this.renderParticles = true;
	this.renderList = [];
	com_babylonhx_materials_textures_Texture.call(this,null,scene,!generateMipMaps);
	this.coordinatesMode = 4;
	this.name = name;
	this.isRenderTarget = true;
	this._size = size;
	this._generateMipMaps = generateMipMaps;
	this._doNotChangeAspectRatio = doNotChangeAspectRatio;
	this.isCube = isCube;
	if(isCube) {
		this._texture = scene._engine.createRenderTargetCubeTexture(size,{ generateMipMaps : generateMipMaps, type : type});
		this.coordinatesMode = 6;
		this._textureMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	} else this._texture = scene._engine.createRenderTargetTexture(size,{ generateMipMaps : generateMipMaps, type : type});
	this._renderingManager = new com_babylonhx_rendering_RenderingManager(scene);
};
$hxClasses["com.babylonhx.materials.textures.RenderTargetTexture"] = com_babylonhx_materials_textures_RenderTargetTexture;
com_babylonhx_materials_textures_RenderTargetTexture.__name__ = true;
com_babylonhx_materials_textures_RenderTargetTexture.__super__ = com_babylonhx_materials_textures_Texture;
com_babylonhx_materials_textures_RenderTargetTexture.prototype = $extend(com_babylonhx_materials_textures_Texture.prototype,{
	resetRefreshCounter: function() {
		this._currentRefreshId = -1;
	}
	,get_refreshRate: function() {
		return this._refreshRate;
	}
	,set_refreshRate: function(value) {
		this._refreshRate = value;
		this.resetRefreshCounter();
		return value;
	}
	,_shouldRender: function() {
		if(this._currentRefreshId == -1) {
			this._currentRefreshId = 1;
			return true;
		}
		if(this.get_refreshRate() == this._currentRefreshId) {
			this._currentRefreshId = 1;
			return true;
		}
		this._currentRefreshId++;
		return false;
	}
	,isReady: function() {
		if(!this.getScene().renderTargetsEnabled) return false;
		return com_babylonhx_materials_textures_Texture.prototype.isReady.call(this);
	}
	,getRenderSize: function() {
		return this._size;
	}
	,get_canRescale: function() {
		return true;
	}
	,scale: function(ratio) {
		var newSize = this._size * ratio | 0;
		this.resize(newSize,this._generateMipMaps);
	}
	,getReflectionTextureMatrix: function() {
		if(this.isCube) return this._textureMatrix;
		return com_babylonhx_materials_textures_Texture.prototype.getReflectionTextureMatrix.call(this);
	}
	,resize: function(size,generateMipMaps) {
		this.releaseInternalTexture();
		if(this.isCube) this._texture = this.getScene().getEngine().createRenderTargetCubeTexture(size); else this._texture = this.getScene().getEngine().createRenderTargetTexture(size,generateMipMaps);
	}
	,render: function(useCameraPostProcess) {
		if(useCameraPostProcess == null) useCameraPostProcess = false;
		var scene = this.getScene();
		var engine = scene._engine;
		if(this._waitingRenderList != null) {
			this.renderList = [];
			var _g1 = 0;
			var _g = this._waitingRenderList.length;
			while(_g1 < _g) {
				var index = _g1++;
				var id = this._waitingRenderList[index];
				this.renderList.push(scene.getMeshByID(id));
			}
			this._waitingRenderList = null;
		}
		if(this.renderList != null && this.renderList.length == 0) return;
		this._renderingManager.reset();
		var currentRenderList;
		currentRenderList = this.renderList != null?this.renderList:scene._activeMeshes.data;
		var _g2 = 0;
		while(_g2 < currentRenderList.length) {
			var mesh = currentRenderList[_g2];
			++_g2;
			if(mesh != null) {
				if(!mesh.isReady()) {
					this.resetRefreshCounter();
					continue;
				}
				if(mesh.isEnabled() && mesh.isVisible && mesh.subMeshes != null && (mesh.layerMask & scene.activeCamera.layerMask) != 0) {
					mesh._activate(scene._renderId);
					var _g11 = 0;
					var _g21 = mesh.subMeshes;
					while(_g11 < _g21.length) {
						var subMesh = _g21[_g11];
						++_g11;
						scene._activeIndices += subMesh.indexCount;
						this._renderingManager.dispatch(subMesh);
					}
				}
			}
		}
		if(this.isCube) {
			var _g3 = 0;
			while(_g3 < 6) {
				var face = _g3++;
				this.renderToTarget(face,currentRenderList,useCameraPostProcess);
			}
		} else this.renderToTarget(0,currentRenderList,useCameraPostProcess);
		if(this.onAfterUnbind != null) this.onAfterUnbind();
		scene._cachedMaterial = null;
	}
	,renderToTarget: function(faceIndex,currentRenderList,useCameraPostProcess) {
		var scene = this.getScene();
		var engine = scene._engine;
		if(!useCameraPostProcess || !scene.postProcessManager._prepareFrame(this._texture)) {
			if(this.isCube) engine.bindFramebuffer(this._texture,faceIndex); else engine.bindFramebuffer(this._texture);
		}
		if(this.onBeforeRender != null) this.onBeforeRender(faceIndex);
		if(this.onClear != null) this.onClear(engine); else engine.clear(scene.clearColor,true,true);
		if(!this._doNotChangeAspectRatio) scene.setTransformMatrix(scene.activeCamera.getViewMatrix(),scene.activeCamera.getProjectionMatrix(true));
		this._renderingManager.render(this.customRenderFunction,currentRenderList,this.renderParticles,this.renderSprites);
		if(useCameraPostProcess) scene.postProcessManager._finalizeFrame(false,this._texture,faceIndex);
		if(!this._doNotChangeAspectRatio) scene.setTransformMatrix(scene.activeCamera.getViewMatrix(),scene.activeCamera.getProjectionMatrix(true));
		if(this.onAfterRender != null) this.onAfterRender(faceIndex);
		if(!this.isCube || faceIndex == 5) {
			if(this.isCube) {
				if(faceIndex == 5) engine.generateMipMapsForCubemap(this._texture);
			}
			engine.unBindFramebuffer(this._texture,this.isCube);
		}
	}
	,clone: function() {
		var textureSize = this.getSize();
		var newTexture = new com_babylonhx_materials_textures_RenderTargetTexture(this.name,textureSize.width,this.getScene(),this._generateMipMaps);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.coordinatesMode = this.coordinatesMode;
		newTexture.renderList = this.renderList.slice(0);
		return newTexture;
	}
	,__class__: com_babylonhx_materials_textures_RenderTargetTexture
	,__properties__: {get_canRescale:"get_canRescale",set_refreshRate:"set_refreshRate",get_refreshRate:"get_refreshRate"}
});
var com_babylonhx_materials_textures_VideoTexture = $hx_exports.BABYLON.VideoTexture = function(scene) {
	com_babylonhx_materials_textures_BaseTexture.call(this,scene);
};
$hxClasses["com.babylonhx.materials.textures.VideoTexture"] = com_babylonhx_materials_textures_VideoTexture;
com_babylonhx_materials_textures_VideoTexture.__name__ = true;
com_babylonhx_materials_textures_VideoTexture.__super__ = com_babylonhx_materials_textures_BaseTexture;
com_babylonhx_materials_textures_VideoTexture.prototype = $extend(com_babylonhx_materials_textures_BaseTexture.prototype,{
	__class__: com_babylonhx_materials_textures_VideoTexture
});
var com_babylonhx_materials_textures_WebGLTexture = $hx_exports.BABYLON.WebGLTexture = function(url,data) {
	this.noMipmap = true;
	this.url = url;
	this.data = data;
	this.generateMipMaps = false;
	this.isCube = false;
	this.samplingMode = 3;
	this._size = null;
	this._width = 1;
	this._height = 1;
	this._baseHeight = 1;
	this._baseWidth = 1;
	this._cachedWrapU = -1;
	this._cachedWrapV = -1;
	this._framebuffer = null;
	this._depthBuffer = null;
	this._cachedCoordinatesMode = -1;
	this._isDisabled = false;
	this.isReady = false;
	this.noMipmap = false;
	this.references = 0;
};
$hxClasses["com.babylonhx.materials.textures.WebGLTexture"] = com_babylonhx_materials_textures_WebGLTexture;
com_babylonhx_materials_textures_WebGLTexture.__name__ = true;
com_babylonhx_materials_textures_WebGLTexture.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_materials_textures_WebGLTexture.prototype = {
	__class__: com_babylonhx_materials_textures_WebGLTexture
};
var com_babylonhx_materials_textures_procedurals_ProceduralTexture = $hx_exports.BABYLON.ProceduralTexture = function(name,size,fragment,scene,fallbackTexture,generateMipMaps) {
	if(generateMipMaps == null) generateMipMaps = true;
	this._fallbackTextureUsed = false;
	this._matrices = new haxe_ds_StringMap();
	this._vectors3 = new haxe_ds_StringMap();
	this._vectors2 = new haxe_ds_StringMap();
	this._colors4 = new haxe_ds_StringMap();
	this._colors3 = new haxe_ds_StringMap();
	this._floatsArrays = new haxe_ds_StringMap();
	this._floats = new haxe_ds_StringMap();
	this._textures = new haxe_ds_StringMap();
	this._samplers = [];
	this._uniforms = [];
	this._vertexStrideSize = 8;
	this._vertexDeclaration = [2];
	this._refreshRate = 1;
	this._currentRefreshId = -1;
	this.isEnabled = true;
	com_babylonhx_materials_textures_Texture.call(this,null,scene,!generateMipMaps);
	scene._proceduralTextures.push(this);
	this.name = name;
	this.isRenderTarget = true;
	this._size = size;
	this._generateMipMaps = generateMipMaps;
	this.setFragment(fragment);
	this._fallbackTexture = fallbackTexture;
	this._texture = scene._engine.createRenderTargetTexture(size,generateMipMaps);
	var vertices = [];
	vertices.push(1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	this._vertexBuffer = scene._engine.createVertexBuffer(vertices);
	var indices = [];
	indices.push(0);
	indices.push(1);
	indices.push(2);
	indices.push(0);
	indices.push(2);
	indices.push(3);
	this._indexBuffer = scene._engine.createIndexBuffer(indices);
};
$hxClasses["com.babylonhx.materials.textures.procedurals.ProceduralTexture"] = com_babylonhx_materials_textures_procedurals_ProceduralTexture;
com_babylonhx_materials_textures_procedurals_ProceduralTexture.__name__ = true;
com_babylonhx_materials_textures_procedurals_ProceduralTexture.__super__ = com_babylonhx_materials_textures_Texture;
com_babylonhx_materials_textures_procedurals_ProceduralTexture.prototype = $extend(com_babylonhx_materials_textures_Texture.prototype,{
	reset: function() {
		if(this._effect == null) return;
		var engine = this.getScene().getEngine();
		engine._releaseEffect(this._effect);
	}
	,isReady: function() {
		var _g = this;
		var engine = this.getScene().getEngine();
		var shaders = null;
		if(this._fragment == null) return false;
		if(this._fallbackTextureUsed) return true;
		if(this._fragment.fragmentElement != null) shaders = { vertex : "procedural", fragmentElement : this._fragment.fragmentElement}; else shaders = { vertex : "procedural", fragment : this._fragment};
		this._effect = engine.createEffect(shaders,["position"],this._uniforms,this._samplers,"",null,null,function(effect,msg) {
			_g.releaseInternalTexture();
			if(_g._fallbackTexture != null) {
				_g._texture = _g._fallbackTexture._texture;
				_g._texture.references++;
			}
			_g._fallbackTextureUsed = true;
		});
		return this._effect._isReady;
	}
	,resetRefreshCounter: function() {
		this._currentRefreshId = -1;
	}
	,setFragment: function(fragment) {
		this._fragment = fragment;
	}
	,get_refreshRate: function() {
		return this._refreshRate;
	}
	,set_refreshRate: function(value) {
		this._refreshRate = value;
		this._currentRefreshId = -1;
		return value;
	}
	,_shouldRender: function() {
		if(!this.isEnabled || !this.isReady() || this._texture == null) return false;
		if(this._fallbackTextureUsed) return false;
		if(this._currentRefreshId == -1) {
			this._currentRefreshId = 1;
			return true;
		}
		if(this.get_refreshRate() == this._currentRefreshId) {
			this._currentRefreshId = 1;
			return true;
		}
		this._currentRefreshId++;
		return false;
	}
	,getRenderSize: function() {
		return this._size;
	}
	,resize: function(size,generateMipMaps) {
		if(this._fallbackTextureUsed) return;
		this.releaseInternalTexture();
		this._texture = this.getScene().getEngine().createRenderTargetTexture(size,generateMipMaps);
	}
	,_checkUniform: function(uniformName) {
		if(HxOverrides.indexOf(this._uniforms,uniformName,0) == -1) this._uniforms.push(uniformName);
	}
	,setTexture: function(name,texture) {
		if(HxOverrides.indexOf(this._samplers,name,0) == -1) this._samplers.push(name);
		{
			this._textures.set(name,texture);
			texture;
		}
		return this;
	}
	,setFloat: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._floats.set(name,value);
			value;
		}
		return this;
	}
	,setFloats: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._floatsArrays.set(name,value);
			value;
		}
		return this;
	}
	,setColor3: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._colors3.set(name,value);
			value;
		}
		return this;
	}
	,setColor4: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._colors4.set(name,value);
			value;
		}
		return this;
	}
	,setVector2: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._vectors2.set(name,value);
			value;
		}
		return this;
	}
	,setVector3: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._vectors3.set(name,value);
			value;
		}
		return this;
	}
	,setMatrix: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._matrices.set(name,value);
			value;
		}
		return this;
	}
	,render: function(useCameraPostProcess) {
		if(useCameraPostProcess == null) useCameraPostProcess = false;
		var scene = this.getScene();
		var engine = scene._engine;
		engine.bindFramebuffer(this._texture);
		engine.clear(scene.clearColor,true,true);
		engine.enableEffect(this._effect);
		engine.setState(false,null,null,null);
		var $it0 = this._textures.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this._effect.setTexture(key,this._textures.get(key));
		}
		var $it1 = this._floats.keys();
		while( $it1.hasNext() ) {
			var key1 = $it1.next();
			this._effect.setFloat(key1,this._floats.get(key1));
		}
		var $it2 = this._floatsArrays.keys();
		while( $it2.hasNext() ) {
			var key2 = $it2.next();
			this._effect.setArray(key2,this._floatsArrays.get(key2));
		}
		var $it3 = this._colors3.keys();
		while( $it3.hasNext() ) {
			var key3 = $it3.next();
			this._effect.setColor3(key3,this._colors3.get(key3));
		}
		var $it4 = this._colors4.keys();
		while( $it4.hasNext() ) {
			var key4 = $it4.next();
			var color = this._colors4.get(key4);
			this._effect.setFloat4(key4,color.r,color.g,color.b,color.a);
		}
		var $it5 = this._vectors2.keys();
		while( $it5.hasNext() ) {
			var key5 = $it5.next();
			this._effect.setVector2(key5,this._vectors2.get(key5));
		}
		var $it6 = this._vectors3.keys();
		while( $it6.hasNext() ) {
			var key6 = $it6.next();
			this._effect.setVector3(key6,this._vectors3.get(key6));
		}
		var $it7 = this._matrices.keys();
		while( $it7.hasNext() ) {
			var key7 = $it7.next();
			this._effect.setMatrix(key7,this._matrices.get(key7));
		}
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		engine.draw(true,0,6);
		engine.unBindFramebuffer(this._texture,null);
	}
	,clone: function() {
		var textureSize = this.getSize();
		var newTexture = new com_babylonhx_materials_textures_procedurals_ProceduralTexture(this.name,textureSize.width,this._fragment,this.getScene(),this._fallbackTexture,this._generateMipMaps);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.coordinatesMode = this.coordinatesMode;
		return newTexture;
	}
	,dispose: function() {
		var index;
		var _this = this.getScene()._proceduralTextures;
		index = HxOverrides.indexOf(_this,this,0);
		if(index >= 0) this.getScene()._proceduralTextures.splice(index,1);
		com_babylonhx_materials_textures_Texture.prototype.dispose.call(this);
	}
	,__class__: com_babylonhx_materials_textures_procedurals_ProceduralTexture
	,__properties__: {set_refreshRate:"set_refreshRate",get_refreshRate:"get_refreshRate"}
});
var com_babylonhx_math_Axis = $hx_exports.BABYLON.Axis = function() { };
$hxClasses["com.babylonhx.math.Axis"] = com_babylonhx_math_Axis;
com_babylonhx_math_Axis.__name__ = true;
var com_babylonhx_math_Color4 = $hx_exports.BABYLON.Color4 = function(r,g,b,a) {
	if(a == null) a = 1.0;
	if(b == null) b = 0;
	if(g == null) g = 0;
	if(r == null) r = 0;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["com.babylonhx.math.Color4"] = com_babylonhx_math_Color4;
com_babylonhx_math_Color4.__name__ = true;
com_babylonhx_math_Color4.FromHexString = function(hex) {
	if(hex.substring(0,1) != "#" || hex.length != 9) {
		haxe_Log.trace("Color4.FromHexString must be called with a string like #FFFFFFFF",{ fileName : "Color4.hx", lineNumber : 110, className : "com.babylonhx.math.Color4", methodName : "FromHexString"});
		return new com_babylonhx_math_Color4(0,0,0,0);
	}
	var r = Std.parseInt(hex.substring(1,3));
	var g = Std.parseInt(hex.substring(3,5));
	var b = Std.parseInt(hex.substring(5,7));
	var a = Std.parseInt(hex.substring(7,9));
	return com_babylonhx_math_Color4.FromInts(r,g,b,a);
};
com_babylonhx_math_Color4.Lerp = function(left,right,amount) {
	var result = new com_babylonhx_math_Color4(0,0,0,0);
	com_babylonhx_math_Color4.LerpToRef(left,right,amount,result);
	return result;
};
com_babylonhx_math_Color4.LerpToRef = function(left,right,amount,result) {
	result.r = left.r + (right.r - left.r) * amount;
	result.g = left.g + (right.g - left.g) * amount;
	result.b = left.b + (right.b - left.b) * amount;
	result.a = left.a + (right.a - left.a) * amount;
	return result;
};
com_babylonhx_math_Color4.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Color4(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);
};
com_babylonhx_math_Color4.FromInts = function(r,g,b,a) {
	return new com_babylonhx_math_Color4(r / 255.0,g / 255.0,b / 255.0,a / 255.0);
};
com_babylonhx_math_Color4.prototype = {
	addInPlace: function(right) {
		this.r += right.r;
		this.g += right.g;
		this.b += right.b;
		this.a += right.a;
		return this;
	}
	,asArray: function() {
		var result = [];
		this.toArray(result,0);
		return result;
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.r;
		array[index + 1] = this.g;
		array[index + 2] = this.b;
		array[index + 3] = this.a;
		return this;
	}
	,add: function(right) {
		return new com_babylonhx_math_Color4(this.r + right.r,this.g + right.g,this.b + right.b,this.a + right.a);
	}
	,subtract: function(right) {
		return new com_babylonhx_math_Color4(this.r - right.r,this.g - right.g,this.b - right.b,this.a - right.a);
	}
	,subtractToRef: function(right,result) {
		result.r = this.r - right.r;
		result.g = this.g - right.g;
		result.b = this.b - right.b;
		result.a = this.a - right.a;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Color4(this.r * scale,this.g * scale,this.b * scale,this.a * scale);
	}
	,scaleToRef: function(scale,result) {
		result.r = this.r * scale;
		result.g = this.g * scale;
		result.b = this.b * scale;
		result.a = this.a * scale;
		return this;
	}
	,toString: function() {
		return "{R:" + this.r + " G:" + this.g + " B:" + this.b + " A:" + this.a + "}";
	}
	,clone: function() {
		return new com_babylonhx_math_Color4(this.r,this.g,this.b,this.a);
	}
	,copyFrom: function(source) {
		this.r = source.r;
		this.g = source.g;
		this.b = source.b;
		this.a = source.a;
		return this;
	}
	,toHexString: function() {
		var intR = this.r * 255 | 0;
		var intG = this.g * 255 | 0;
		var intB = this.b * 255 | 0;
		var intA = this.a * 255 | 0;
		return "#" + com_babylonhx_tools_Tools.ToHex(intR) + com_babylonhx_tools_Tools.ToHex(intG) + com_babylonhx_tools_Tools.ToHex(intB) + com_babylonhx_tools_Tools.ToHex(intA);
	}
	,__class__: com_babylonhx_math_Color4
};
var com_babylonhx_math_Frustum = $hx_exports.BABYLON.Frustum = function() { };
$hxClasses["com.babylonhx.math.Frustum"] = com_babylonhx_math_Frustum;
com_babylonhx_math_Frustum.__name__ = true;
com_babylonhx_math_Frustum.GetPlanes = function(transform) {
	var frustumPlanes = [];
	var _g = 0;
	while(_g < 6) {
		var index = _g++;
		frustumPlanes.push(new com_babylonhx_math_Plane(0,0,0,0));
	}
	frustumPlanes[0].normal.x = transform.m[3] + transform.m[2];
	frustumPlanes[0].normal.y = transform.m[7] + transform.m[6];
	frustumPlanes[0].normal.z = transform.m[11] + transform.m[10];
	frustumPlanes[0].d = transform.m[15] + transform.m[14];
	frustumPlanes[0].normalize();
	frustumPlanes[1].normal.x = transform.m[3] - transform.m[2];
	frustumPlanes[1].normal.y = transform.m[7] - transform.m[6];
	frustumPlanes[1].normal.z = transform.m[11] - transform.m[10];
	frustumPlanes[1].d = transform.m[15] - transform.m[14];
	frustumPlanes[1].normalize();
	frustumPlanes[2].normal.x = transform.m[3] + transform.m[0];
	frustumPlanes[2].normal.y = transform.m[7] + transform.m[4];
	frustumPlanes[2].normal.z = transform.m[11] + transform.m[8];
	frustumPlanes[2].d = transform.m[15] + transform.m[12];
	frustumPlanes[2].normalize();
	frustumPlanes[3].normal.x = transform.m[3] - transform.m[0];
	frustumPlanes[3].normal.y = transform.m[7] - transform.m[4];
	frustumPlanes[3].normal.z = transform.m[11] - transform.m[8];
	frustumPlanes[3].d = transform.m[15] - transform.m[12];
	frustumPlanes[3].normalize();
	frustumPlanes[4].normal.x = transform.m[3] - transform.m[1];
	frustumPlanes[4].normal.y = transform.m[7] - transform.m[5];
	frustumPlanes[4].normal.z = transform.m[11] - transform.m[9];
	frustumPlanes[4].d = transform.m[15] - transform.m[13];
	frustumPlanes[4].normalize();
	frustumPlanes[5].normal.x = transform.m[3] + transform.m[1];
	frustumPlanes[5].normal.y = transform.m[7] + transform.m[5];
	frustumPlanes[5].normal.z = transform.m[11] + transform.m[9];
	frustumPlanes[5].d = transform.m[15] + transform.m[13];
	frustumPlanes[5].normalize();
	return frustumPlanes;
};
com_babylonhx_math_Frustum.GetPlanesToRef = function(transform,frustumPlanes) {
	frustumPlanes[0].normal.x = transform.m[3] + transform.m[2];
	frustumPlanes[0].normal.y = transform.m[7] + transform.m[6];
	frustumPlanes[0].normal.z = transform.m[11] + transform.m[10];
	frustumPlanes[0].d = transform.m[15] + transform.m[14];
	frustumPlanes[0].normalize();
	frustumPlanes[1].normal.x = transform.m[3] - transform.m[2];
	frustumPlanes[1].normal.y = transform.m[7] - transform.m[6];
	frustumPlanes[1].normal.z = transform.m[11] - transform.m[10];
	frustumPlanes[1].d = transform.m[15] - transform.m[14];
	frustumPlanes[1].normalize();
	frustumPlanes[2].normal.x = transform.m[3] + transform.m[0];
	frustumPlanes[2].normal.y = transform.m[7] + transform.m[4];
	frustumPlanes[2].normal.z = transform.m[11] + transform.m[8];
	frustumPlanes[2].d = transform.m[15] + transform.m[12];
	frustumPlanes[2].normalize();
	frustumPlanes[3].normal.x = transform.m[3] - transform.m[0];
	frustumPlanes[3].normal.y = transform.m[7] - transform.m[4];
	frustumPlanes[3].normal.z = transform.m[11] - transform.m[8];
	frustumPlanes[3].d = transform.m[15] - transform.m[12];
	frustumPlanes[3].normalize();
	frustumPlanes[4].normal.x = transform.m[3] - transform.m[1];
	frustumPlanes[4].normal.y = transform.m[7] - transform.m[5];
	frustumPlanes[4].normal.z = transform.m[11] - transform.m[9];
	frustumPlanes[4].d = transform.m[15] - transform.m[13];
	frustumPlanes[4].normalize();
	frustumPlanes[5].normal.x = transform.m[3] + transform.m[1];
	frustumPlanes[5].normal.y = transform.m[7] + transform.m[5];
	frustumPlanes[5].normal.z = transform.m[11] + transform.m[9];
	frustumPlanes[5].d = transform.m[15] + transform.m[13];
	frustumPlanes[5].normalize();
};
var com_babylonhx_math_Matrix = $hx_exports.BABYLON.Matrix = function() {
	var array = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	this.m = this1;
};
$hxClasses["com.babylonhx.math.Matrix"] = com_babylonhx_math_Matrix;
com_babylonhx_math_Matrix.__name__ = true;
com_babylonhx_math_Matrix.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.FromArrayToRef(array,offset,result);
	return result;
};
com_babylonhx_math_Matrix.FromArrayToRef = function(array,offset,result) {
	var _g = 0;
	while(_g < 16) {
		var index = _g++;
		result.m[index] = array[index + offset];
	}
};
com_babylonhx_math_Matrix.FromFloat32ArrayToRefScaled = function(array,offset,scale,result) {
	var _g = 0;
	while(_g < 16) {
		var index = _g++;
		result.m[index] = array[index + offset] * scale;
	}
};
com_babylonhx_math_Matrix.FromValuesToRef = function(initialM11,initialM12,initialM13,initialM14,initialM21,initialM22,initialM23,initialM24,initialM31,initialM32,initialM33,initialM34,initialM41,initialM42,initialM43,initialM44,result) {
	result.m[0] = initialM11;
	result.m[1] = initialM12;
	result.m[2] = initialM13;
	result.m[3] = initialM14;
	result.m[4] = initialM21;
	result.m[5] = initialM22;
	result.m[6] = initialM23;
	result.m[7] = initialM24;
	result.m[8] = initialM31;
	result.m[9] = initialM32;
	result.m[10] = initialM33;
	result.m[11] = initialM34;
	result.m[12] = initialM41;
	result.m[13] = initialM42;
	result.m[14] = initialM43;
	result.m[15] = initialM44;
};
com_babylonhx_math_Matrix.FromValues = function(initialM11,initialM12,initialM13,initialM14,initialM21,initialM22,initialM23,initialM24,initialM31,initialM32,initialM33,initialM34,initialM41,initialM42,initialM43,initialM44) {
	var result = new com_babylonhx_math_Matrix();
	result.m[0] = initialM11;
	result.m[1] = initialM12;
	result.m[2] = initialM13;
	result.m[3] = initialM14;
	result.m[4] = initialM21;
	result.m[5] = initialM22;
	result.m[6] = initialM23;
	result.m[7] = initialM24;
	result.m[8] = initialM31;
	result.m[9] = initialM32;
	result.m[10] = initialM33;
	result.m[11] = initialM34;
	result.m[12] = initialM41;
	result.m[13] = initialM42;
	result.m[14] = initialM43;
	result.m[15] = initialM44;
	return result;
};
com_babylonhx_math_Matrix.Compose = function(scale,rotation,translation) {
	var result = com_babylonhx_math_Matrix.FromValues(scale.x,0,0,0,0,scale.y,0,0,0,0,scale.z,0,0,0,0,1);
	var rotationMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	rotation.toRotationMatrix(rotationMatrix);
	result = result.multiply(rotationMatrix);
	result.m[12] = translation.x;
	result.m[13] = translation.y;
	result.m[14] = translation.z;
	return result;
};
com_babylonhx_math_Matrix.Identity = function() {
	return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
};
com_babylonhx_math_Matrix.IdentityToRef = function(result) {
	com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,result);
};
com_babylonhx_math_Matrix.Zero = function() {
	return com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
};
com_babylonhx_math_Matrix.RotationX = function(angle) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.RotationXToRef(angle,result);
	return result;
};
com_babylonhx_math_Matrix.Invert = function(source) {
	var result = new com_babylonhx_math_Matrix();
	source.invertToRef(result);
	return result;
};
com_babylonhx_math_Matrix.RotationXToRef = function(angle,result) {
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	result.m[0] = 1.0;
	result.m[15] = 1.0;
	result.m[5] = c;
	result.m[10] = c;
	result.m[9] = -s;
	result.m[6] = s;
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
};
com_babylonhx_math_Matrix.RotationY = function(angle) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.RotationYToRef(angle,result);
	return result;
};
com_babylonhx_math_Matrix.RotationYToRef = function(angle,result) {
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	result.m[5] = 1.0;
	result.m[15] = 1.0;
	result.m[0] = c;
	result.m[2] = -s;
	result.m[8] = s;
	result.m[10] = c;
	result.m[1] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[9] = 0;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
};
com_babylonhx_math_Matrix.RotationZ = function(angle) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.RotationZToRef(angle,result);
	return result;
};
com_babylonhx_math_Matrix.RotationZToRef = function(angle,result) {
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	result.m[10] = 1.0;
	result.m[15] = 1.0;
	result.m[0] = c;
	result.m[1] = s;
	result.m[4] = -s;
	result.m[5] = c;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
};
com_babylonhx_math_Matrix.RotationAxis = function(axis,angle) {
	var s = Math.sin(-angle);
	var c = Math.cos(-angle);
	var c1 = 1 - c;
	axis.normalize();
	var result = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	result.m[0] = axis.x * axis.x * c1 + c;
	result.m[1] = axis.x * axis.y * c1 - axis.z * s;
	result.m[2] = axis.x * axis.z * c1 + axis.y * s;
	result.m[3] = 0.0;
	result.m[4] = axis.y * axis.x * c1 + axis.z * s;
	result.m[5] = axis.y * axis.y * c1 + c;
	result.m[6] = axis.y * axis.z * c1 - axis.x * s;
	result.m[7] = 0.0;
	result.m[8] = axis.z * axis.x * c1 - axis.y * s;
	result.m[9] = axis.z * axis.y * c1 + axis.x * s;
	result.m[10] = axis.z * axis.z * c1 + c;
	result.m[11] = 0.0;
	result.m[15] = 1.0;
	return result;
};
com_babylonhx_math_Matrix.RotationYawPitchRoll = function(yaw,pitch,roll) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(yaw,pitch,roll,com_babylonhx_math_Matrix._tempQuaternion);
	com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(result);
	return result;
};
com_babylonhx_math_Matrix.RotationYawPitchRollToRef = function(yaw,pitch,roll,result) {
	com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(yaw,pitch,roll,com_babylonhx_math_Matrix._tempQuaternion);
	com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(result);
};
com_babylonhx_math_Matrix.Scaling = function(x,y,z) {
	var result = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	result.m[0] = x;
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[5] = y;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[10] = z;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
	result.m[15] = 1.0;
	return result;
};
com_babylonhx_math_Matrix.ScalingToRef = function(x,y,z,result) {
	result.m[0] = x;
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[5] = y;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[10] = z;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
	result.m[15] = 1.0;
};
com_babylonhx_math_Matrix.Translation = function(x,y,z) {
	var result = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	com_babylonhx_math_Matrix.TranslationToRef(x,y,z,result);
	return result;
};
com_babylonhx_math_Matrix.TranslationToRef = function(x,y,z,result) {
	com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,x,y,z,1.0,result);
};
com_babylonhx_math_Matrix.LookAtLH = function(eye,target,up) {
	var result = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	com_babylonhx_math_Matrix.LookAtLHToRef(eye,target,up,result);
	return result;
};
com_babylonhx_math_Matrix.LookAtLHToRef = function(eye,target,up,result) {
	target.subtractToRef(eye,com_babylonhx_math_Matrix._zAxis);
	com_babylonhx_math_Matrix._zAxis.normalize();
	com_babylonhx_math_Vector3.CrossToRef(up,com_babylonhx_math_Matrix._zAxis,com_babylonhx_math_Matrix._xAxis);
	com_babylonhx_math_Matrix._xAxis.normalize();
	com_babylonhx_math_Vector3.CrossToRef(com_babylonhx_math_Matrix._zAxis,com_babylonhx_math_Matrix._xAxis,com_babylonhx_math_Matrix._yAxis);
	com_babylonhx_math_Matrix._yAxis.normalize();
	com_babylonhx_math_Matrix.ex = -com_babylonhx_math_Vector3.Dot(com_babylonhx_math_Matrix._xAxis,eye);
	com_babylonhx_math_Matrix.ey = -com_babylonhx_math_Vector3.Dot(com_babylonhx_math_Matrix._yAxis,eye);
	com_babylonhx_math_Matrix.ez = -com_babylonhx_math_Vector3.Dot(com_babylonhx_math_Matrix._zAxis,eye);
	com_babylonhx_math_Matrix.FromValuesToRef(com_babylonhx_math_Matrix._xAxis.x,com_babylonhx_math_Matrix._yAxis.x,com_babylonhx_math_Matrix._zAxis.x,0,com_babylonhx_math_Matrix._xAxis.y,com_babylonhx_math_Matrix._yAxis.y,com_babylonhx_math_Matrix._zAxis.y,0,com_babylonhx_math_Matrix._xAxis.z,com_babylonhx_math_Matrix._yAxis.z,com_babylonhx_math_Matrix._zAxis.z,0,com_babylonhx_math_Matrix.ex,com_babylonhx_math_Matrix.ey,com_babylonhx_math_Matrix.ez,1,result);
	return;
};
com_babylonhx_math_Matrix.OrthoLH = function(width,height,znear,zfar) {
	var hw = 2.0 / width;
	var hh = 2.0 / height;
	var id = 1.0 / (zfar - znear);
	var nid = znear / (znear - zfar);
	return com_babylonhx_math_Matrix.FromValues(hw,0,0,0,0,hh,0,0,0,0,id,0,0,0,nid,1);
};
com_babylonhx_math_Matrix.OrthoOffCenterLH = function(left,right,bottom,top,znear,zfar) {
	var matrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	com_babylonhx_math_Matrix.OrthoOffCenterLHToRef(left,right,bottom,top,znear,zfar,matrix);
	return matrix;
};
com_babylonhx_math_Matrix.OrthoOffCenterLHToRef = function(left,right,bottom,top,znear,zfar,result) {
	result.m[0] = 2.0 / (right - left);
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[5] = 2.0 / (top - bottom);
	result.m[4] = 0;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[10] = -1. / (znear - zfar);
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[11] = 0;
	result.m[12] = (left + right) / (left - right);
	result.m[13] = (top + bottom) / (bottom - top);
	result.m[14] = znear / (znear - zfar);
	result.m[15] = 1.0;
};
com_babylonhx_math_Matrix.PerspectiveLH = function(width,height,znear,zfar) {
	var matrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	matrix.m[0] = 2.0 * znear / width;
	matrix.m[1] = 0.0;
	matrix.m[2] = 0.0;
	matrix.m[3] = 0.0;
	matrix.m[5] = 2.0 * znear / height;
	matrix.m[4] = 0.0;
	matrix.m[6] = 0.0;
	matrix.m[7] = 0.0;
	matrix.m[10] = -zfar / (znear - zfar);
	matrix.m[8] = 0.0;
	matrix.m[9] = 0.0;
	matrix.m[11] = 1.0;
	matrix.m[12] = 0.0;
	matrix.m[13] = 0.0;
	matrix.m[15] = 0.0;
	matrix.m[14] = znear * zfar / (znear - zfar);
	return matrix;
};
com_babylonhx_math_Matrix.PerspectiveFovLH = function(fov,aspect,znear,zfar) {
	var matrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	com_babylonhx_math_Matrix.PerspectiveFovLHToRef(fov,aspect,znear,zfar,matrix);
	return matrix;
};
com_babylonhx_math_Matrix.PerspectiveFovLHToRef = function(fov,aspect,znear,zfar,result,fovMode) {
	var tan = 1.0 / Math.tan(fov * 0.5);
	var v_fixed = fovMode == null || fovMode == 0;
	var h_fixed = fovMode == 1;
	if(v_fixed) result.m[0] = tan / aspect; else if(h_fixed) result.m[0] = tan;
	result.m[1] = 0.0;
	result.m[2] = 0.0;
	result.m[3] = 0.0;
	if(v_fixed) result.m[5] = tan; else if(h_fixed) result.m[5] = tan * aspect;
	result.m[4] = 0.0;
	result.m[6] = 0.0;
	result.m[7] = 0.0;
	result.m[8] = 0.0;
	result.m[9] = 0.0;
	result.m[10] = -zfar / (znear - zfar);
	result.m[11] = 1.0;
	result.m[12] = 0.0;
	result.m[13] = 0.0;
	result.m[15] = 0.0;
	result.m[14] = znear * zfar / (znear - zfar);
};
com_babylonhx_math_Matrix.GetFinalMatrix = function(viewport,world,view,projection,zmin,zmax) {
	var cw = viewport.width;
	var ch = viewport.height;
	var cx = viewport.x;
	var cy = viewport.y;
	var viewportMatrix = com_babylonhx_math_Matrix.FromValues(cw / 2.0,0,0,0,0,-ch / 2.0,0,0,0,0,zmax - zmin,0,cx + cw / 2.0,ch / 2.0 + cy,zmin,1);
	return world.multiply(view).multiply(projection).multiply(viewportMatrix);
};
com_babylonhx_math_Matrix.GetAsMatrix2x2 = function(matrix) {
	var array = [matrix.m[0],matrix.m[1],matrix.m[4],matrix.m[5]];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	return this1;
};
com_babylonhx_math_Matrix.GetAsMatrix3x3 = function(matrix) {
	var array = [matrix.m[0],matrix.m[1],matrix.m[2],matrix.m[4],matrix.m[5],matrix.m[6],matrix.m[8],matrix.m[9],matrix.m[10]];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	return this1;
};
com_babylonhx_math_Matrix.Transpose = function(matrix) {
	var result = new com_babylonhx_math_Matrix();
	result.m[0] = matrix.m[0];
	result.m[1] = matrix.m[4];
	result.m[2] = matrix.m[8];
	result.m[3] = matrix.m[12];
	result.m[4] = matrix.m[1];
	result.m[5] = matrix.m[5];
	result.m[6] = matrix.m[9];
	result.m[7] = matrix.m[13];
	result.m[8] = matrix.m[2];
	result.m[9] = matrix.m[6];
	result.m[10] = matrix.m[10];
	result.m[11] = matrix.m[14];
	result.m[12] = matrix.m[3];
	result.m[13] = matrix.m[7];
	result.m[14] = matrix.m[11];
	result.m[15] = matrix.m[15];
	return result;
};
com_babylonhx_math_Matrix.Reflection = function(plane) {
	var matrix = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.ReflectionToRef(plane,matrix);
	return matrix;
};
com_babylonhx_math_Matrix.ReflectionToRef = function(plane,result) {
	plane.normalize();
	var x = plane.normal.x;
	var y = plane.normal.y;
	var z = plane.normal.z;
	var temp = -2 * x;
	var temp2 = -2 * y;
	var temp3 = -2 * z;
	result.m[0] = temp * x + 1;
	result.m[1] = temp2 * x;
	result.m[2] = temp3 * x;
	result.m[3] = 0.0;
	result.m[4] = temp * y;
	result.m[5] = temp2 * y + 1;
	result.m[6] = temp3 * y;
	result.m[7] = 0.0;
	result.m[8] = temp * z;
	result.m[9] = temp2 * z;
	result.m[10] = temp3 * z + 1;
	result.m[11] = 0.0;
	result.m[12] = temp * plane.d;
	result.m[13] = temp2 * plane.d;
	result.m[14] = temp3 * plane.d;
	result.m[15] = 1.0;
};
com_babylonhx_math_Matrix.prototype = {
	toString: function() {
		return lime_utils__$Float32Array_Float32Array_$Impl_$.toString(this.m) + "";
	}
	,isIdentity: function() {
		if(this.m[0] != 1.0 || this.m[5] != 1.0 || this.m[10] != 1.0 || this.m[15] != 1.0) return false;
		if(this.m[1] != 0.0 || this.m[2] != 0.0 || this.m[3] != 0.0 || this.m[4] != 0.0 || this.m[6] != 0.0 || this.m[7] != 0.0 || this.m[8] != 0.0 || this.m[9] != 0.0 || this.m[11] != 0.0 || this.m[12] != 0.0 || this.m[13] != 0.0 || this.m[14] != 0.0) return false;
		return true;
	}
	,determinant: function() {
		var temp1 = this.m[10] * this.m[15] - this.m[11] * this.m[14];
		var temp2 = this.m[9] * this.m[15] - this.m[11] * this.m[13];
		var temp3 = this.m[9] * this.m[14] - this.m[10] * this.m[13];
		var temp4 = this.m[8] * this.m[15] - this.m[11] * this.m[12];
		var temp5 = this.m[8] * this.m[14] - this.m[10] * this.m[12];
		var temp6 = this.m[8] * this.m[13] - this.m[9] * this.m[12];
		return this.m[0] * (this.m[5] * temp1 - this.m[6] * temp2 + this.m[7] * temp3) - this.m[1] * (this.m[4] * temp1 - this.m[6] * temp4 + this.m[7] * temp5) + this.m[2] * (this.m[4] * temp2 - this.m[5] * temp4 + this.m[7] * temp6) - this.m[3] * (this.m[4] * temp3 - this.m[5] * temp5 + this.m[6] * temp6);
	}
	,toArray: function() {
		return this.m;
	}
	,asArray: function() {
		return this.m;
	}
	,invert: function() {
		this.invertToRef(this);
		return this;
	}
	,invertToRef: function(other) {
		var l1 = this.m[0];
		var l2 = this.m[1];
		var l3 = this.m[2];
		var l4 = this.m[3];
		var l5 = this.m[4];
		var l6 = this.m[5];
		var l7 = this.m[6];
		var l8 = this.m[7];
		var l9 = this.m[8];
		var l10 = this.m[9];
		var l11 = this.m[10];
		var l12 = this.m[11];
		var l13 = this.m[12];
		var l14 = this.m[13];
		var l15 = this.m[14];
		var l16 = this.m[15];
		var l17 = l11 * l16 - l12 * l15;
		var l18 = l10 * l16 - l12 * l14;
		var l19 = l10 * l15 - l11 * l14;
		var l20 = l9 * l16 - l12 * l13;
		var l21 = l9 * l15 - l11 * l13;
		var l22 = l9 * l14 - l10 * l13;
		var l23 = l6 * l17 - l7 * l18 + l8 * l19;
		var l24 = -(l5 * l17 - l7 * l20 + l8 * l21);
		var l25 = l5 * l18 - l6 * l20 + l8 * l22;
		var l26 = -(l5 * l19 - l6 * l21 + l7 * l22);
		var l27 = 1.0 / (l1 * l23 + l2 * l24 + l3 * l25 + l4 * l26);
		var l28 = l7 * l16 - l8 * l15;
		var l29 = l6 * l16 - l8 * l14;
		var l30 = l6 * l15 - l7 * l14;
		var l31 = l5 * l16 - l8 * l13;
		var l32 = l5 * l15 - l7 * l13;
		var l33 = l5 * l14 - l6 * l13;
		var l34 = l7 * l12 - l8 * l11;
		var l35 = l6 * l12 - l8 * l10;
		var l36 = l6 * l11 - l7 * l10;
		var l37 = l5 * l12 - l8 * l9;
		var l38 = l5 * l11 - l7 * l9;
		var l39 = l5 * l10 - l6 * l9;
		other.m[0] = l23 * l27;
		other.m[4] = l24 * l27;
		other.m[8] = l25 * l27;
		other.m[12] = l26 * l27;
		other.m[1] = -(l2 * l17 - l3 * l18 + l4 * l19) * l27;
		other.m[5] = (l1 * l17 - l3 * l20 + l4 * l21) * l27;
		other.m[9] = -(l1 * l18 - l2 * l20 + l4 * l22) * l27;
		other.m[13] = (l1 * l19 - l2 * l21 + l3 * l22) * l27;
		other.m[2] = (l2 * l28 - l3 * l29 + l4 * l30) * l27;
		other.m[6] = -(l1 * l28 - l3 * l31 + l4 * l32) * l27;
		other.m[10] = (l1 * l29 - l2 * l31 + l4 * l33) * l27;
		other.m[14] = -(l1 * l30 - l2 * l32 + l3 * l33) * l27;
		other.m[3] = -(l2 * l34 - l3 * l35 + l4 * l36) * l27;
		other.m[7] = (l1 * l34 - l3 * l37 + l4 * l38) * l27;
		other.m[11] = -(l1 * l35 - l2 * l37 + l4 * l39) * l27;
		other.m[15] = (l1 * l36 - l2 * l38 + l3 * l39) * l27;
	}
	,reset: function() {
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			this.m[index] = 0;
		}
		return this;
	}
	,add: function(other) {
		var result = new com_babylonhx_math_Matrix();
		this.addToRef(other,result);
		return result;
	}
	,addToRef: function(other,result) {
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			result.m[index] = this.m[index] + other.m[index];
		}
		return this;
	}
	,addToSelf: function(other) {
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			var _g1 = index;
			this.m[_g1] = this.m[_g1] + other.m[index];
		}
		return this;
	}
	,setTranslation: function(vector3) {
		this.m[12] = vector3.x;
		this.m[13] = vector3.y;
		this.m[14] = vector3.z;
	}
	,multiply: function(other) {
		var result = new com_babylonhx_math_Matrix();
		this.multiplyToRef(other,result);
		return result;
	}
	,copyFrom: function(other) {
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			this.m[index] = other.m[index];
		}
	}
	,copyToArray: function(array,offset) {
		if(offset == null) offset = 0;
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			array[offset + index] = this.m[index];
		}
	}
	,multiplyToRef: function(other,result) {
		this.multiplyToArray(other,result.m,0);
	}
	,multiplyToArray: function(other,result,offset) {
		result[offset] = this.m[0] * other.m[0] + this.m[1] * other.m[4] + this.m[2] * other.m[8] + this.m[3] * other.m[12];
		result[offset + 1] = this.m[0] * other.m[1] + this.m[1] * other.m[5] + this.m[2] * other.m[9] + this.m[3] * other.m[13];
		result[offset + 2] = this.m[0] * other.m[2] + this.m[1] * other.m[6] + this.m[2] * other.m[10] + this.m[3] * other.m[14];
		result[offset + 3] = this.m[0] * other.m[3] + this.m[1] * other.m[7] + this.m[2] * other.m[11] + this.m[3] * other.m[15];
		result[offset + 4] = this.m[4] * other.m[0] + this.m[5] * other.m[4] + this.m[6] * other.m[8] + this.m[7] * other.m[12];
		result[offset + 5] = this.m[4] * other.m[1] + this.m[5] * other.m[5] + this.m[6] * other.m[9] + this.m[7] * other.m[13];
		result[offset + 6] = this.m[4] * other.m[2] + this.m[5] * other.m[6] + this.m[6] * other.m[10] + this.m[7] * other.m[14];
		result[offset + 7] = this.m[4] * other.m[3] + this.m[5] * other.m[7] + this.m[6] * other.m[11] + this.m[7] * other.m[15];
		result[offset + 8] = this.m[8] * other.m[0] + this.m[9] * other.m[4] + this.m[10] * other.m[8] + this.m[11] * other.m[12];
		result[offset + 9] = this.m[8] * other.m[1] + this.m[9] * other.m[5] + this.m[10] * other.m[9] + this.m[11] * other.m[13];
		result[offset + 10] = this.m[8] * other.m[2] + this.m[9] * other.m[6] + this.m[10] * other.m[10] + this.m[11] * other.m[14];
		result[offset + 11] = this.m[8] * other.m[3] + this.m[9] * other.m[7] + this.m[10] * other.m[11] + this.m[11] * other.m[15];
		result[offset + 12] = this.m[12] * other.m[0] + this.m[13] * other.m[4] + this.m[14] * other.m[8] + this.m[15] * other.m[12];
		result[offset + 13] = this.m[12] * other.m[1] + this.m[13] * other.m[5] + this.m[14] * other.m[9] + this.m[15] * other.m[13];
		result[offset + 14] = this.m[12] * other.m[2] + this.m[13] * other.m[6] + this.m[14] * other.m[10] + this.m[15] * other.m[14];
		result[offset + 15] = this.m[12] * other.m[3] + this.m[13] * other.m[7] + this.m[14] * other.m[11] + this.m[15] * other.m[15];
	}
	,equals: function(value) {
		return value != null && (this.m[0] == value.m[0] && this.m[1] == value.m[1] && this.m[2] == value.m[2] && this.m[3] == value.m[3] && this.m[4] == value.m[4] && this.m[5] == value.m[5] && this.m[6] == value.m[6] && this.m[7] == value.m[7] && this.m[8] == value.m[8] && this.m[9] == value.m[9] && this.m[10] == value.m[10] && this.m[11] == value.m[11] && this.m[12] == value.m[12] && this.m[13] == value.m[13] && this.m[14] == value.m[14] && this.m[15] == value.m[15]);
	}
	,clone: function() {
		return com_babylonhx_math_Matrix.FromValues(this.m[0],this.m[1],this.m[2],this.m[3],this.m[4],this.m[5],this.m[6],this.m[7],this.m[8],this.m[9],this.m[10],this.m[11],this.m[12],this.m[13],this.m[14],this.m[15]);
	}
	,decompose: function(scale,rotation,translation) {
		translation.x = this.m[12];
		translation.y = this.m[13];
		translation.z = this.m[14];
		var xs;
		if(com_babylonhx_tools_Tools.Sign(this.m[0] * this.m[1] * this.m[2] * this.m[3]) < 0) xs = -1; else xs = 1;
		var ys;
		if(com_babylonhx_tools_Tools.Sign(this.m[4] * this.m[5] * this.m[6] * this.m[7]) < 0) ys = -1; else ys = 1;
		var zs;
		if(com_babylonhx_tools_Tools.Sign(this.m[8] * this.m[9] * this.m[10] * this.m[11]) < 0) zs = -1; else zs = 1;
		scale.x = xs * Math.sqrt(this.m[0] * this.m[0] + this.m[1] * this.m[1] + this.m[2] * this.m[2]);
		scale.y = ys * Math.sqrt(this.m[4] * this.m[4] + this.m[5] * this.m[5] + this.m[6] * this.m[6]);
		scale.z = zs * Math.sqrt(this.m[8] * this.m[8] + this.m[9] * this.m[9] + this.m[10] * this.m[10]);
		if(scale.x == 0 || scale.y == 0 || scale.z == 0) {
			rotation.x = 0;
			rotation.y = 0;
			rotation.z = 0;
			rotation.w = 1;
			return false;
		}
		var rotationMatrix = com_babylonhx_math_Matrix.FromValues(this.m[0] / scale.x,this.m[1] / scale.x,this.m[2] / scale.x,0,this.m[4] / scale.y,this.m[5] / scale.y,this.m[6] / scale.y,0,this.m[8] / scale.z,this.m[9] / scale.z,this.m[10] / scale.z,0,0,0,0,1);
		com_babylonhx_math_Quaternion.FromRotationMatrixToRef(rotationMatrix,rotation);
		rotation;
		return true;
	}
	,__class__: com_babylonhx_math_Matrix
};
var com_babylonhx_math_Path3D = $hx_exports.BABYLON.Path3D = function(path,firstNormal,raw) {
	if(raw == null) raw = false;
	this._raw = false;
	this._binormals = [];
	this._normals = [];
	this._tangents = [];
	this._distances = [];
	this._curve = [];
	var _g1 = 0;
	var _g = path.length;
	while(_g1 < _g) {
		var p = _g1++;
		this._curve[p] = path[p].clone();
	}
	this._raw = raw;
	this._compute(firstNormal);
};
$hxClasses["com.babylonhx.math.Path3D"] = com_babylonhx_math_Path3D;
com_babylonhx_math_Path3D.__name__ = true;
com_babylonhx_math_Path3D.prototype = {
	getCurve: function() {
		return this._curve;
	}
	,getTangents: function() {
		return this._tangents;
	}
	,getNormals: function() {
		return this._normals;
	}
	,getBinormals: function() {
		return this._binormals;
	}
	,getDistances: function() {
		return this._distances;
	}
	,update: function(path,firstNormal) {
		var _g1 = 0;
		var _g = path.length;
		while(_g1 < _g) {
			var p = _g1++;
			this._curve[p].x = path[p].x;
			this._curve[p].y = path[p].y;
			this._curve[p].z = path[p].z;
		}
		this._compute(firstNormal);
		return this;
	}
	,_compute: function(firstNormal) {
		var l = this._curve.length;
		this._tangents[0] = this._getFirstNonNullVector(0);
		if(!this._raw) this._tangents[0].normalize();
		this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);
		if(!this._raw) this._tangents[l - 1].normalize();
		var tg0 = this._tangents[0];
		var pp0 = this._normalVector(this._curve[0],tg0,firstNormal);
		this._normals[0] = pp0;
		if(!this._raw) this._normals[0].normalize();
		this._binormals[0] = com_babylonhx_math_Vector3.Cross(tg0,this._normals[0]);
		if(!this._raw) this._binormals[0].normalize();
		this._distances[0] = 0;
		var prev = new com_babylonhx_math_Vector3(0,0,0);
		var cur = new com_babylonhx_math_Vector3(0,0,0);
		var curTang = new com_babylonhx_math_Vector3(0,0,0);
		var prevNorm = new com_babylonhx_math_Vector3(0,0,0);
		var prevBinor = new com_babylonhx_math_Vector3(0,0,0);
		var _g = 1;
		while(_g < l) {
			var i = _g++;
			prev = this._getLastNonNullVector(i);
			if(i < l - 1) {
				cur = this._getFirstNonNullVector(i);
				this._tangents[i] = new com_babylonhx_math_Vector3(prev.x + cur.x,prev.y + cur.y,prev.z + cur.z);
				this._tangents[i].normalize();
			}
			this._distances[i] = this._distances[i - 1] + Math.sqrt(prev.x * prev.x + prev.y * prev.y + prev.z * prev.z);
			curTang = this._tangents[i];
			prevNorm = this._normals[i - 1];
			prevBinor = this._binormals[i - 1];
			this._normals[i] = com_babylonhx_math_Vector3.Cross(prevBinor,curTang);
			if(!this._raw) this._normals[i].normalize();
			this._binormals[i] = com_babylonhx_math_Vector3.Cross(curTang,this._normals[i]);
			if(!this._raw) this._binormals[i].normalize();
		}
	}
	,_getFirstNonNullVector: function(index) {
		var i = 1;
		var nNVector = this._curve[index + i].subtract(this._curve[index]);
		while(Math.sqrt(nNVector.x * nNVector.x + nNVector.y * nNVector.y + nNVector.z * nNVector.z) == 0 && index + i + 1 < this._curve.length) {
			i++;
			nNVector = this._curve[index + i].subtract(this._curve[index]);
		}
		return nNVector;
	}
	,_getLastNonNullVector: function(index) {
		var i = 1;
		var nLVector = this._curve[index].subtract(this._curve[index - i]);
		while(Math.sqrt(nLVector.x * nLVector.x + nLVector.y * nLVector.y + nLVector.z * nLVector.z) == 0 && index > i + 1) {
			i++;
			nLVector = this._curve[index].subtract(this._curve[index - i]);
		}
		return nLVector;
	}
	,_normalVector: function(v0,vt,va) {
		var normal0 = new com_babylonhx_math_Vector3(0,0,0);
		if(va == null) {
			var point = new com_babylonhx_math_Vector3(0,0,0);
			if(!com_babylonhx_tools_Tools.WithinEpsilon(vt.y,1,0.001)) point = new com_babylonhx_math_Vector3(0,-1,0); else if(!com_babylonhx_tools_Tools.WithinEpsilon(vt.x,1,0.001)) point = new com_babylonhx_math_Vector3(1,0,0); else if(!com_babylonhx_tools_Tools.WithinEpsilon(vt.z,1,0.001)) point = new com_babylonhx_math_Vector3(0,0,1);
			normal0 = com_babylonhx_math_Vector3.Cross(vt,point);
		} else {
			normal0 = com_babylonhx_math_Vector3.Cross(vt,va);
			normal0.x = normal0.y * vt.z - normal0.z * vt.y;
			normal0.y = normal0.z * vt.x - normal0.x * vt.z;
			normal0.z = normal0.x * vt.y - normal0.y * vt.x;
		}
		normal0.normalize();
		return normal0;
	}
	,__class__: com_babylonhx_math_Path3D
};
var com_babylonhx_math_Plane = $hx_exports.BABYLON.Plane = function(a,b,c,d) {
	this.normal = new com_babylonhx_math_Vector3(a,b,c);
	this.d = d;
};
$hxClasses["com.babylonhx.math.Plane"] = com_babylonhx_math_Plane;
com_babylonhx_math_Plane.__name__ = true;
com_babylonhx_math_Plane.FromArray = function(array) {
	return new com_babylonhx_math_Plane(array[0],array[1],array[2],array[3]);
};
com_babylonhx_math_Plane.FromPoints = function(point1,point2,point3) {
	var result = new com_babylonhx_math_Plane(0,0,0,0);
	result.copyFromPoints(point1,point2,point3);
	return result;
};
com_babylonhx_math_Plane.FromPositionAndNormal = function(origin,normal) {
	var result = new com_babylonhx_math_Plane(0,0,0,0);
	normal.normalize();
	result.normal = normal;
	result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
	return result;
};
com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal = function(origin,normal,point) {
	var d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
	return point.x * normal.x + point.y * normal.y + point.z * normal.z + d;
};
com_babylonhx_math_Plane.prototype = {
	asArray: function() {
		return [this.normal.x,this.normal.y,this.normal.z,this.d];
	}
	,clone: function() {
		return new com_babylonhx_math_Plane(this.normal.x,this.normal.y,this.normal.z,this.d);
	}
	,normalize: function() {
		var norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z);
		var magnitude = 0.0;
		if(norm != 0) magnitude = 1.0 / norm;
		this.normal.x *= magnitude;
		this.normal.y *= magnitude;
		this.normal.z *= magnitude;
		this.d *= magnitude;
	}
	,transform: function(transformation) {
		com_babylonhx_math_Plane.transposedMatrix = com_babylonhx_math_Matrix.Transpose(transformation);
		var x = this.normal.x;
		var y = this.normal.y;
		var z = this.normal.z;
		var d = this.d;
		var normalX = x * com_babylonhx_math_Plane.transposedMatrix.m[0] + y * com_babylonhx_math_Plane.transposedMatrix.m[1] + z * com_babylonhx_math_Plane.transposedMatrix.m[2] + d * com_babylonhx_math_Plane.transposedMatrix.m[3];
		var normalY = x * com_babylonhx_math_Plane.transposedMatrix.m[4] + y * com_babylonhx_math_Plane.transposedMatrix.m[5] + z * com_babylonhx_math_Plane.transposedMatrix.m[6] + d * com_babylonhx_math_Plane.transposedMatrix.m[7];
		var normalZ = x * com_babylonhx_math_Plane.transposedMatrix.m[8] + y * com_babylonhx_math_Plane.transposedMatrix.m[9] + z * com_babylonhx_math_Plane.transposedMatrix.m[10] + d * com_babylonhx_math_Plane.transposedMatrix.m[11];
		var finalD = x * com_babylonhx_math_Plane.transposedMatrix.m[12] + y * com_babylonhx_math_Plane.transposedMatrix.m[13] + z * com_babylonhx_math_Plane.transposedMatrix.m[14] + d * com_babylonhx_math_Plane.transposedMatrix.m[15];
		return new com_babylonhx_math_Plane(normalX,normalY,normalZ,finalD);
	}
	,dotCoordinate: function(point) {
		return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d;
	}
	,copyFromPoints: function(point1,point2,point3) {
		var x1 = point2.x - point1.x;
		var y1 = point2.y - point1.y;
		var z1 = point2.z - point1.z;
		var x2 = point3.x - point1.x;
		var y2 = point3.y - point1.y;
		var z2 = point3.z - point1.z;
		var yz = y1 * z2 - z1 * y2;
		var xz = z1 * x2 - x1 * z2;
		var xy = x1 * y2 - y1 * x2;
		var pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);
		var invPyth;
		if(pyth != 0) invPyth = 1.0 / pyth; else invPyth = 0;
		this.normal.x = yz * invPyth;
		this.normal.y = xz * invPyth;
		this.normal.z = xy * invPyth;
		this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z);
	}
	,isFrontFacingTo: function(direction,epsilon) {
		var dot = com_babylonhx_math_Vector3.Dot(this.normal,direction);
		return dot <= epsilon;
	}
	,signedDistanceTo: function(point) {
		return com_babylonhx_math_Vector3.Dot(point,this.normal) + this.d;
	}
	,__class__: com_babylonhx_math_Plane
};
var com_babylonhx_math_PositionNormalTextureVertex = function(position,normal,uv) {
	if(position != null) this.position = position; else this.position = new com_babylonhx_math_Vector3(0,0,0);
	if(normal != null) this.normal = normal; else this.normal = new com_babylonhx_math_Vector3(0,1.0,0);
	if(uv != null) this.uv = uv; else this.uv = new com_babylonhx_math_Vector2(0,0);
};
$hxClasses["com.babylonhx.math.PositionNormalTextureVertex"] = com_babylonhx_math_PositionNormalTextureVertex;
com_babylonhx_math_PositionNormalTextureVertex.__name__ = true;
com_babylonhx_math_PositionNormalTextureVertex.prototype = {
	clone: function() {
		return new com_babylonhx_math_PositionNormalTextureVertex(this.position.clone(),this.normal.clone(),this.uv.clone());
	}
	,__class__: com_babylonhx_math_PositionNormalTextureVertex
};
var com_babylonhx_math_PositionNormalVertex = function(position,normal) {
	if(position != null) this.position = position; else this.position = new com_babylonhx_math_Vector3(0,0,0);
	if(normal != null) this.normal = normal; else this.normal = new com_babylonhx_math_Vector3(0,1.0,0);
};
$hxClasses["com.babylonhx.math.PositionNormalVertex"] = com_babylonhx_math_PositionNormalVertex;
com_babylonhx_math_PositionNormalVertex.__name__ = true;
com_babylonhx_math_PositionNormalVertex.prototype = {
	clone: function() {
		return new com_babylonhx_math_PositionNormalVertex(this.position.clone(),this.normal.clone());
	}
	,__class__: com_babylonhx_math_PositionNormalVertex
};
var com_babylonhx_math_Ray = $hx_exports.BABYLON.Ray = function(origin,direction,length) {
	this.origin = origin;
	this.direction = direction;
	if(length != null) this.length = length; else {
		this.length = Infinity;
	}
};
$hxClasses["com.babylonhx.math.Ray"] = com_babylonhx_math_Ray;
com_babylonhx_math_Ray.__name__ = true;
com_babylonhx_math_Ray.CreateNew = function(x,y,viewportWidth,viewportHeight,world,view,projection) {
	var start = com_babylonhx_math_Vector3.Unproject(new com_babylonhx_math_Vector3(x,y,0),viewportWidth,viewportHeight,world,view,projection);
	var end = com_babylonhx_math_Vector3.Unproject(new com_babylonhx_math_Vector3(x,y,1),viewportWidth,viewportHeight,world,view,projection);
	var direction = new com_babylonhx_math_Vector3(end.x - start.x,end.y - start.y,end.z - start.z);
	direction.normalize();
	return new com_babylonhx_math_Ray(start,direction);
};
com_babylonhx_math_Ray.CreateNewFromTo = function(origin,end,world) {
	if(world == null) world = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	var direction = new com_babylonhx_math_Vector3(end.x - origin.x,end.y - origin.y,end.z - origin.z);
	var length = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
	direction.normalize();
	return com_babylonhx_math_Ray.Transform(new com_babylonhx_math_Ray(origin,direction,length),world);
};
com_babylonhx_math_Ray.Transform = function(ray,matrix) {
	var newOrigin = com_babylonhx_math_Vector3.TransformCoordinates(ray.origin,matrix);
	var newDirection = com_babylonhx_math_Vector3.TransformNormal(ray.direction,matrix);
	return new com_babylonhx_math_Ray(newOrigin,newDirection);
};
com_babylonhx_math_Ray.prototype = {
	intersectsBoxMinMax: function(minimum,maximum) {
		var d = 0.0;
		var maxValue = Infinity;
		if(Math.abs(this.direction.x) < 0.0000001) {
			if(this.origin.x < minimum.x || this.origin.x > maximum.x) return false;
		} else {
			var inv = 1.0 / this.direction.x;
			var min = (minimum.x - this.origin.x) * inv;
			var max = (maximum.x - this.origin.x) * inv;
			if(max == -Infinity) max = Infinity;
			if(min > max) {
				var temp = min;
				min = max;
				max = temp;
			}
			d = Math.max(min,d);
			maxValue = Math.min(max,maxValue);
			if(d > maxValue) return false;
		}
		if(Math.abs(this.direction.y) < 0.0000001) {
			if(this.origin.y < minimum.y || this.origin.y > maximum.y) return false;
		} else {
			var inv1 = 1.0 / this.direction.y;
			var min1 = (minimum.y - this.origin.y) * inv1;
			var max1 = (maximum.y - this.origin.y) * inv1;
			if(max1 == -Infinity) max1 = Infinity;
			if(min1 > max1) {
				var temp1 = min1;
				min1 = max1;
				max1 = temp1;
			}
			d = Math.max(min1,d);
			maxValue = Math.min(max1,maxValue);
			if(d > maxValue) return false;
		}
		if(Math.abs(this.direction.z) < 0.0000001) {
			if(this.origin.z < minimum.z || this.origin.z > maximum.z) return false;
		} else {
			var inv2 = 1.0 / this.direction.z;
			var min2 = (minimum.z - this.origin.z) * inv2;
			var max2 = (maximum.z - this.origin.z) * inv2;
			if(max2 == -Infinity) max2 = Infinity;
			if(min2 > max2) {
				var temp2 = min2;
				min2 = max2;
				max2 = temp2;
			}
			d = Math.max(min2,d);
			maxValue = Math.min(max2,maxValue);
			if(d > maxValue) return false;
		}
		return true;
	}
	,intersectsBox: function(box) {
		return this.intersectsBoxMinMax(box.minimum,box.maximum);
	}
	,intersectsSphere: function(sphere) {
		var x = sphere.center.x - this.origin.x;
		var y = sphere.center.y - this.origin.y;
		var z = sphere.center.z - this.origin.z;
		var pyth = x * x + y * y + z * z;
		var rr = sphere.radius * sphere.radius;
		if(pyth <= rr) return true;
		var dot = x * this.direction.x + y * this.direction.y + z * this.direction.z;
		if(dot < 0.0) return false;
		var temp = pyth - dot * dot;
		return temp <= rr;
	}
	,intersectsTriangle: function(vertex0,vertex1,vertex2) {
		if(this._edge1 == null) {
			this._edge1 = new com_babylonhx_math_Vector3(0,0,0);
			this._edge2 = new com_babylonhx_math_Vector3(0,0,0);
			this._pvec = new com_babylonhx_math_Vector3(0,0,0);
			this._tvec = new com_babylonhx_math_Vector3(0,0,0);
			this._qvec = new com_babylonhx_math_Vector3(0,0,0);
		}
		vertex1.subtractToRef(vertex0,this._edge1);
		vertex2.subtractToRef(vertex0,this._edge2);
		com_babylonhx_math_Vector3.CrossToRef(this.direction,this._edge2,this._pvec);
		var det = com_babylonhx_math_Vector3.Dot(this._edge1,this._pvec);
		if(det == 0) return null;
		var invdet = 1 / det;
		this.origin.subtractToRef(vertex0,this._tvec);
		var bu = com_babylonhx_math_Vector3.Dot(this._tvec,this._pvec) * invdet;
		if(bu < 0 || bu > 1.0) return null;
		com_babylonhx_math_Vector3.CrossToRef(this._tvec,this._edge1,this._qvec);
		var bv = com_babylonhx_math_Vector3.Dot(this.direction,this._qvec) * invdet;
		if(bv < 0 || bu + bv > 1.0) return null;
		return new com_babylonhx_collisions_IntersectionInfo(bu,bv,com_babylonhx_math_Vector3.Dot(this._edge2,this._qvec) * invdet);
	}
	,__class__: com_babylonhx_math_Ray
};
var com_babylonhx_math_Space = $hxClasses["com.babylonhx.math.Space"] = { __ename__ : true, __constructs__ : ["LOCAL","WORLD"] };
com_babylonhx_math_Space.LOCAL = ["LOCAL",0];
com_babylonhx_math_Space.LOCAL.toString = $estr;
com_babylonhx_math_Space.LOCAL.__enum__ = com_babylonhx_math_Space;
com_babylonhx_math_Space.WORLD = ["WORLD",1];
com_babylonhx_math_Space.WORLD.toString = $estr;
com_babylonhx_math_Space.WORLD.__enum__ = com_babylonhx_math_Space;
var com_babylonhx_math_Vector2 = $hx_exports.BABYLON.Vector2 = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["com.babylonhx.math.Vector2"] = com_babylonhx_math_Vector2;
com_babylonhx_math_Vector2.__name__ = true;
com_babylonhx_math_Vector2.Zero = function() {
	return new com_babylonhx_math_Vector2(0,0);
};
com_babylonhx_math_Vector2.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector2(array[offset],array[offset + 1]);
};
com_babylonhx_math_Vector2.FromArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	return result;
};
com_babylonhx_math_Vector2.CatmullRom = function(value1,value2,value3,value4,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);
	var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Clamp = function(value,min,max) {
	var x = value.x;
	if(x > max.x) x = max.x; else x = x;
	if(x < min.x) x = min.x; else x = x;
	var y = value.y;
	if(y > max.y) y = max.y; else y = y;
	if(y < min.y) y = min.y; else y = y;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Hermite = function(value1,tangent1,value2,tangent2,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var part1 = 2.0 * cubed - 3.0 * squared + 1.0;
	var part2 = -2. * cubed + 3.0 * squared;
	var part3 = cubed - 2.0 * squared + amount;
	var part4 = cubed - squared;
	var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;
	var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Lerp = function(start,end,amount) {
	var x = start.x + (end.x - start.x) * amount;
	var y = start.y + (end.y - start.y) * amount;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Dot = function(left,right) {
	return left.x * right.x + left.y * right.y;
};
com_babylonhx_math_Vector2.Normalize = function(vector) {
	var newVector = new com_babylonhx_math_Vector2(vector.x,vector.y);
	newVector.normalize();
	return newVector;
};
com_babylonhx_math_Vector2.Minimize = function(left,right) {
	var x;
	if(left.x < right.x) x = left.x; else x = right.x;
	var y;
	if(left.y < right.y) y = left.y; else y = right.y;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Maximize = function(left,right) {
	var x;
	if(left.x > right.x) x = left.x; else x = right.x;
	var y;
	if(left.y > right.y) y = left.y; else y = right.y;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Transform = function(vector,transformation) {
	var x = vector.x * transformation.m[0] + vector.y * transformation.m[4];
	var y = vector.x * transformation.m[1] + vector.y * transformation.m[5];
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Distance = function(value1,value2) {
	return Math.sqrt(com_babylonhx_math_Vector2.DistanceSquared(value1,value2));
};
com_babylonhx_math_Vector2.DistanceSquared = function(value1,value2) {
	var x = value1.x - value2.x;
	var y = value1.y - value2.y;
	return x * x + y * y;
};
com_babylonhx_math_Vector2.prototype = {
	toString: function() {
		return "{X:" + this.x + " Y:" + this.y + "}";
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.x;
		array[index + 1] = this.y;
		return this;
	}
	,asArray: function() {
		var result = [];
		this.toArray(result,0);
		return result;
	}
	,copyFrom: function(source) {
		this.x = source.x;
		this.y = source.y;
		return this;
	}
	,copyFromFloats: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,add: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x + otherVector.x,this.y + otherVector.y);
	}
	,addVector3: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x + otherVector.x,this.y + otherVector.y);
	}
	,subtract: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x - otherVector.x,this.y - otherVector.y);
	}
	,subtractInPlace: function(otherVector) {
		this.x -= otherVector.x;
		this.y -= otherVector.y;
		return this;
	}
	,multiplyInPlace: function(otherVector) {
		this.x *= otherVector.x;
		this.y *= otherVector.y;
		return this;
	}
	,multiply: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x * otherVector.x,this.y * otherVector.y);
	}
	,multiplyToRef: function(otherVector,result) {
		result.x = this.x * otherVector.x;
		result.y = this.y * otherVector.y;
		return this;
	}
	,multiplyByFloats: function(x,y) {
		return new com_babylonhx_math_Vector2(this.x * x,this.y * y);
	}
	,divide: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x / otherVector.x,this.y / otherVector.y);
	}
	,divideToRef: function(otherVector,result) {
		result.x = this.x / otherVector.x;
		result.y = this.y / otherVector.y;
		return this;
	}
	,negate: function() {
		return new com_babylonhx_math_Vector2(-this.x,-this.y);
	}
	,scaleInPlace: function(scale) {
		this.x *= scale;
		this.y *= scale;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Vector2(this.x * scale,this.y * scale);
	}
	,equals: function(otherVector) {
		return otherVector != null && this.x == otherVector.x && this.y == otherVector.y;
	}
	,equalsWithEpsilon: function(otherVector,epsilon) {
		if(epsilon == null) epsilon = 0.001;
		return otherVector != null && com_babylonhx_tools_Tools.WithinEpsilon(this.x,otherVector.x,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.y,otherVector.y,epsilon);
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y);
		if(len == 0) return this;
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Vector2(this.x,this.y);
	}
	,__class__: com_babylonhx_math_Vector2
};
var com_babylonhx_math_Vector4 = $hx_exports.BABYLON.Vector4 = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["com.babylonhx.math.Vector4"] = com_babylonhx_math_Vector4;
com_babylonhx_math_Vector4.__name__ = true;
com_babylonhx_math_Vector4.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector4(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);
};
com_babylonhx_math_Vector4.FromArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
	result.w = array[offset + 3];
};
com_babylonhx_math_Vector4.FromFloatArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
	result.w = array[offset + 3];
};
com_babylonhx_math_Vector4.FromFloatsToRef = function(x,y,z,w,result) {
	result.x = x;
	result.y = y;
	result.z = z;
	result.w = w;
};
com_babylonhx_math_Vector4.Zero = function() {
	return new com_babylonhx_math_Vector4(0,0,0,0);
};
com_babylonhx_math_Vector4.Normalize = function(vector) {
	var result = new com_babylonhx_math_Vector4(0,0,0,0);
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.w = vector.w;
	result;
	result.normalize();
	return result;
};
com_babylonhx_math_Vector4.NormalizeToRef = function(vector,result) {
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.w = vector.w;
	result;
	result.normalize();
};
com_babylonhx_math_Vector4.Minimize = function(left,right) {
	var min = new com_babylonhx_math_Vector4(left.x,left.y,left.z,left.w);
	if(right.x < min.x) min.x = right.x;
	if(right.y < min.y) min.y = right.y;
	if(right.z < min.z) min.z = right.z;
	if(right.w < min.w) min.w = right.w;
	min;
	return min;
};
com_babylonhx_math_Vector4.Maximize = function(left,right) {
	var max = new com_babylonhx_math_Vector4(left.x,left.y,left.z,left.w);
	if(right.x > max.x) max.x = right.x;
	if(right.y > max.y) max.y = right.y;
	if(right.z > max.z) max.z = right.z;
	if(right.w > max.w) max.w = right.w;
	max;
	return max;
};
com_babylonhx_math_Vector4.Distance = function(value1,value2) {
	return Math.sqrt(com_babylonhx_math_Vector4.DistanceSquared(value1,value2));
};
com_babylonhx_math_Vector4.DistanceSquared = function(value1,value2) {
	var x = value1.x - value2.x;
	var y = value1.y - value2.y;
	var z = value1.z - value2.z;
	var w = value1.w - value2.w;
	return x * x + y * y + z * z + w * w;
};
com_babylonhx_math_Vector4.Center = function(value1,value2) {
	var center = new com_babylonhx_math_Vector4(value1.x + value2.x,value1.y + value2.y,value1.z + value2.z,value1.w + value2.w);
	center.x *= 0.5;
	center.y *= 0.5;
	center.z *= 0.5;
	center.w *= 0.5;
	center;
	return center;
};
com_babylonhx_math_Vector4.prototype = {
	toString: function() {
		return "{X:" + this.x + " Y:" + this.y + " Z:" + this.z + "W:" + this.w + "}";
	}
	,asArray: function() {
		var result = [];
		result[0] = this.x;
		result[1] = this.y;
		result[2] = this.z;
		result[3] = this.w;
		this;
		return result;
	}
	,set: function(x,y,z,w) {
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
		this.z = z;
		if(w != null) this.w = w;
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.x;
		array[index + 1] = this.y;
		array[index + 2] = this.z;
		array[index + 3] = this.w;
		return this;
	}
	,addInPlace: function(otherVector) {
		this.x += otherVector.x;
		this.y += otherVector.y;
		this.z += otherVector.z;
		this.w += otherVector.w;
		return this;
	}
	,add: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x + otherVector.x,this.y + otherVector.y,this.z + otherVector.z,this.w + otherVector.w);
	}
	,addToRef: function(otherVector,result) {
		result.x = this.x + otherVector.x;
		result.y = this.y + otherVector.y;
		result.z = this.z + otherVector.z;
		result.w = this.w + otherVector.w;
		return this;
	}
	,subtractInPlace: function(otherVector) {
		this.x -= otherVector.x;
		this.y -= otherVector.y;
		this.z -= otherVector.z;
		this.w -= otherVector.w;
		return this;
	}
	,subtract: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x - otherVector.x,this.y - otherVector.y,this.z - otherVector.z,this.w - otherVector.w);
	}
	,subtractToRef: function(otherVector,result) {
		result.x = this.x - otherVector.x;
		result.y = this.y - otherVector.y;
		result.z = this.z - otherVector.z;
		result.w = this.w - otherVector.w;
		return this;
	}
	,subtractFromFloats: function(x,y,z,w) {
		return new com_babylonhx_math_Vector4(this.x - x,this.y - y,this.z - z,this.w - w);
	}
	,subtractFromFloatsToRef: function(x,y,z,w,result) {
		result.x = this.x - x;
		result.y = this.y - y;
		result.z = this.z - z;
		result.w = this.w - w;
		return this;
	}
	,negate: function() {
		return new com_babylonhx_math_Vector4(-this.x,-this.y,-this.z,-this.w);
	}
	,scaleInPlace: function(scale) {
		this.x *= scale;
		this.y *= scale;
		this.z *= scale;
		this.w *= scale;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Vector4(this.x * scale,this.y * scale,this.z * scale,this.w * scale);
	}
	,scaleToRef: function(scale,result) {
		result.x = this.x * scale;
		result.y = this.y * scale;
		result.z = this.z * scale;
		result.w = this.w * scale;
		return this;
	}
	,equals: function(otherVector) {
		return otherVector != null && this.x == otherVector.x && this.y == otherVector.y && this.z == otherVector.z && this.w == otherVector.w;
	}
	,equalsWithEpsilon: function(otherVector,epsilon) {
		if(epsilon == null) epsilon = 0.001;
		return otherVector != null && com_babylonhx_tools_Tools.WithinEpsilon(this.x,otherVector.x,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.y,otherVector.y,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.z,otherVector.z,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.w,otherVector.w,epsilon);
	}
	,equalsToFloats: function(x,y,z,w) {
		return this.x == x && this.y == y && this.z == z && this.w == w;
	}
	,multiplyInPlace: function(otherVector) {
		this.x *= otherVector.x;
		this.y *= otherVector.y;
		this.z *= otherVector.z;
		this.w *= otherVector.w;
		return this;
	}
	,multiply: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x * otherVector.x,this.y * otherVector.y,this.z * otherVector.z,this.w * otherVector.w);
	}
	,multiplyToRef: function(otherVector,result) {
		result.x = this.x * otherVector.x;
		result.y = this.y * otherVector.y;
		result.z = this.z * otherVector.z;
		result.w = this.w * otherVector.w;
		return this;
	}
	,multiplyByFloats: function(x,y,z,w) {
		return new com_babylonhx_math_Vector4(this.x * x,this.y * y,this.z * z,this.w * w);
	}
	,divide: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x / otherVector.x,this.y / otherVector.y,this.z / otherVector.z,this.w / otherVector.w);
	}
	,divideToRef: function(otherVector,result) {
		result.x = this.x / otherVector.x;
		result.y = this.y / otherVector.y;
		result.z = this.z / otherVector.z;
		result.w = this.w / otherVector.w;
		return this;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,MinimizeInPlace: function(other) {
		if(other.x < this.x) this.x = other.x;
		if(other.y < this.y) this.y = other.y;
		if(other.z < this.z) this.z = other.z;
		if(other.w < this.w) this.w = other.w;
		return this;
	}
	,MaximizeInPlace: function(other) {
		if(other.x > this.x) this.x = other.x;
		if(other.y > this.y) this.y = other.y;
		if(other.z > this.z) this.z = other.z;
		if(other.w > this.w) this.w = other.w;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(len == 0) return this;
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		this.z *= num;
		this.w *= num;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(source) {
		this.x = source.x;
		this.y = source.y;
		this.z = source.z;
		this.w = source.w;
		return this;
	}
	,copyFromFloats: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,__class__: com_babylonhx_math_Vector4
};
var com_babylonhx_math_Viewport = $hx_exports.BABYLON.Viewport = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["com.babylonhx.math.Viewport"] = com_babylonhx_math_Viewport;
com_babylonhx_math_Viewport.__name__ = true;
com_babylonhx_math_Viewport.prototype = {
	toGlobal: function(engine) {
		var width = engine.getRenderWidth();
		var height = engine.getRenderHeight();
		return new com_babylonhx_math_Viewport(this.x * width,this.y * height,this.width * width,this.height * height);
	}
	,__class__: com_babylonhx_math_Viewport
};
var com_babylonhx_mesh_AbstractMesh = $hx_exports.BABYLON.AbstractMesh = function(name,scene) {
	this._isWorldMatrixFrozen = false;
	this._onAfterWorldMatrixUpdate = [];
	this._intersectionsInProgress = [];
	this._renderId = 0;
	this._isDisposed = false;
	this._pivotMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	this._isDirty = false;
	this._collisionsScalingMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._collisionsTransformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._absolutePosition = new com_babylonhx_math_Vector3(0,0,0);
	this._rotateYByPI = com_babylonhx_math_Matrix.RotationY(Math.PI);
	this._worldMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localWorld = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localPivotScalingRotation = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localPivotScaling = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localBillboard = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localTranslation = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localRotation = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localScaling = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this.edgesColor = new com_babylonhx_math_Color4(1,0,0,1);
	this.edgesWidth = 1;
	this._newPositionForCollisions = new com_babylonhx_math_Vector3(0,0,0);
	this._diffPositionForCollisions = new com_babylonhx_math_Vector3(0,0,0);
	this._oldPositionForCollisions = new com_babylonhx_math_Vector3(0,0,0);
	this._collider = new com_babylonhx_collisions_Collider();
	this.ellipsoidOffset = new com_babylonhx_math_Vector3(0,0,0);
	this.ellipsoid = new com_babylonhx_math_Vector3(0.5,1,0.5);
	this._checkCollisions = false;
	this._physicRestitution = 0;
	this._physicsFriction = 0;
	this._physicsMass = 0;
	this._physicImpostor = 0;
	this.alwaysSelectAsActiveMesh = false;
	this.layerMask = 268435455;
	this.useOctreeForCollisions = true;
	this.useOctreeForPicking = true;
	this.useOctreeForRenderingSelection = true;
	this.numBoneInfluencers = 4;
	this.computeBonesUsingShaders = true;
	this.applyFog = true;
	this.useVertexColors = true;
	this.hasVertexAlpha = false;
	this.overlayAlpha = 0.5;
	this.overlayColor = new com_babylonhx_math_Color3(1,0,0);
	this.renderOverlay = false;
	this.outlineWidth = 0.02;
	this.outlineColor = new com_babylonhx_math_Color3(1,0,0);
	this.renderOutline = false;
	this._receiveShadows = false;
	this.renderingGroupId = 0;
	this.isBlocker = false;
	this.onDispose = null;
	this.showSubMeshesBoundingBox = false;
	this.showBoundingBox = false;
	this._isPickable = false;
	this.isVisible = true;
	this.infiniteDistance = false;
	this.alphaIndex = Infinity;
	this._visibility = 1.0;
	this.billboardMode = com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE;
	this.scaling = new com_babylonhx_math_Vector3(1,1,1);
	this.rotation = new com_babylonhx_math_Vector3(0,0,0);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
	this.definedFacingForward = true;
	com_babylonhx_Node.call(this,name,scene);
	scene.addMesh(this);
};
$hxClasses["com.babylonhx.mesh.AbstractMesh"] = com_babylonhx_mesh_AbstractMesh;
com_babylonhx_mesh_AbstractMesh.__name__ = true;
com_babylonhx_mesh_AbstractMesh.__interfaces__ = [com_babylonhx_IDisposable];
com_babylonhx_mesh_AbstractMesh.__super__ = com_babylonhx_Node;
com_babylonhx_mesh_AbstractMesh.prototype = $extend(com_babylonhx_Node.prototype,{
	get_visibility: function() {
		return this._visibility;
	}
	,set_visibility: function(val) {
		this._visibility = val;
		return val;
	}
	,get_isPickable: function() {
		return this._isPickable;
	}
	,set_isPickable: function(val) {
		this._isPickable = val;
		return val;
	}
	,get_skeleton: function() {
		return this._skeleton;
	}
	,set_skeleton: function(val) {
		this._skeleton = val;
		return val;
	}
	,get_material: function() {
		return this._material;
	}
	,set_material: function(val) {
		this._material = val;
		return val;
	}
	,get_receiveShadows: function() {
		return this._receiveShadows;
	}
	,set_receiveShadows: function(val) {
		this._receiveShadows = val;
		return val;
	}
	,get_positions: function() {
		return this._positions;
	}
	,set_positions: function(val) {
		this._positions = val;
		return val;
	}
	,get_useBones: function() {
		return this.get_skeleton() != null && this._scene.skeletonsEnabled && this.isVerticesDataPresent("matricesIndices") && this.isVerticesDataPresent("matricesWeights");
	}
	,disableEdgesRendering: function() {
		if(this._edgesRenderer != null) {
			this._edgesRenderer.dispose();
			this._edgesRenderer = null;
		}
	}
	,enableEdgesRendering: function(epsilon,checkVerticesInsteadOfIndices) {
		if(checkVerticesInsteadOfIndices == null) checkVerticesInsteadOfIndices = false;
		if(epsilon == null) epsilon = 0.95;
		this.disableEdgesRendering();
		this._edgesRenderer = new com_babylonhx_rendering_EdgesRenderer(this,epsilon,checkVerticesInsteadOfIndices);
	}
	,get_isBlocked: function() {
		return false;
	}
	,getLOD: function(camera,boundingSphere) {
		return this;
	}
	,getTotalVertices: function() {
		return 0;
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return null;
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return null;
	}
	,isVerticesDataPresent: function(kind) {
		return false;
	}
	,getBoundingInfo: function() {
		if(this._masterMesh != null) return this._masterMesh.getBoundingInfo();
		if(this._boundingInfo == null) this._updateBoundingInfo();
		return this._boundingInfo;
	}
	,_preActivate: function() {
	}
	,_activate: function(renderId) {
		this._renderId = renderId;
	}
	,getWorldMatrix: function() {
		if(this._masterMesh != null) return this._masterMesh.getWorldMatrix();
		if(this._currentRenderId != this._scene._renderId) this.computeWorldMatrix();
		return this._worldMatrix;
	}
	,get_worldMatrixFromCache: function() {
		return this._worldMatrix;
	}
	,get_absolutePosition: function() {
		return this._absolutePosition;
	}
	,freezeWorldMatrix: function() {
		this._isWorldMatrixFrozen = false;
		this.computeWorldMatrix(true);
		this._isWorldMatrixFrozen = true;
	}
	,unfreezeWorldMatrix: function() {
		this._isWorldMatrixFrozen = false;
		this.computeWorldMatrix(true);
	}
	,get_isWorldMatrixFrozen: function() {
		return this._isWorldMatrixFrozen;
	}
	,rotate: function(axis,amount,space) {
		axis.normalize();
		if(this.rotationQuaternion == null) {
			this.rotationQuaternion = com_babylonhx_math_Quaternion.RotationYawPitchRoll(this.rotation.y,this.rotation.x,this.rotation.z);
			this.rotation = new com_babylonhx_math_Vector3(0,0,0);
		}
		if(space == null || space == com_babylonhx_math_Space.LOCAL) {
			var rotationQuaternion = com_babylonhx_math_Quaternion.RotationAxis(axis,amount);
			this.rotationQuaternion = this.rotationQuaternion.multiply(rotationQuaternion);
		} else {
			if(this.parent != null) {
				var invertParentWorldMatrix = this.parent.getWorldMatrix().clone();
				invertParentWorldMatrix.invertToRef(invertParentWorldMatrix);
				invertParentWorldMatrix;
				axis = com_babylonhx_math_Vector3.TransformNormal(axis,invertParentWorldMatrix);
			}
			this.rotationQuaternion = com_babylonhx_math_Quaternion.RotationAxis(axis,amount);
			this.rotationQuaternion = this.rotationQuaternion.multiply(this.rotationQuaternion);
		}
	}
	,translate: function(axis,distance,space) {
		var displacementVector = new com_babylonhx_math_Vector3(axis.x * distance,axis.y * distance,axis.z * distance);
		if(space == null || space == com_babylonhx_math_Space.LOCAL) {
			var tempV3 = this.getPositionExpressedInLocalSpace().add(displacementVector);
			this.computeWorldMatrix();
			this.position = com_babylonhx_math_Vector3.TransformNormal(tempV3,this._localWorld);
		} else this.setAbsolutePosition(((function($this) {
			var $r;
			$this.computeWorldMatrix();
			$r = $this._absolutePosition;
			return $r;
		}(this))).add(displacementVector));
	}
	,getAbsolutePosition: function() {
		this.computeWorldMatrix();
		return this._absolutePosition;
	}
	,setAbsolutePosition: function(absolutePosition) {
		if(absolutePosition == null) return;
		var absolutePositionX = 0;
		var absolutePositionY = 0;
		var absolutePositionZ = 0;
		if((absolutePosition instanceof Array) && absolutePosition.__enum__ == null) {
			if(absolutePosition.length < 3) return;
			absolutePositionX = absolutePosition[0];
			absolutePositionY = absolutePosition[1];
			absolutePositionZ = absolutePosition[2];
		} else {
			absolutePositionX = absolutePosition.x;
			absolutePositionY = absolutePosition.y;
			absolutePositionZ = absolutePosition.z;
		}
		if(this.parent != null) {
			var invertParentWorldMatrix = this.parent.getWorldMatrix().clone();
			invertParentWorldMatrix.invertToRef(invertParentWorldMatrix);
			invertParentWorldMatrix;
			var worldPosition = new com_babylonhx_math_Vector3(absolutePositionX,absolutePositionY,absolutePositionZ);
			this.position = com_babylonhx_math_Vector3.TransformCoordinates(worldPosition,invertParentWorldMatrix);
		} else {
			this.position.x = absolutePositionX;
			this.position.y = absolutePositionY;
			this.position.z = absolutePositionZ;
		}
	}
	,movePOV: function(amountRight,amountUp,amountForward) {
		this.position.addInPlace(this.calcMovePOV(amountRight,amountUp,amountForward));
	}
	,calcMovePOV: function(amountRight,amountUp,amountForward) {
		var rotMatrix = new com_babylonhx_math_Matrix();
		var rotQuaternion;
		if(this.rotationQuaternion != null) rotQuaternion = this.rotationQuaternion; else rotQuaternion = com_babylonhx_math_Quaternion.RotationYawPitchRoll(this.rotation.y,this.rotation.x,this.rotation.z);
		rotQuaternion.toRotationMatrix(rotMatrix);
		var translationDelta = new com_babylonhx_math_Vector3(0,0,0);
		var defForwardMult;
		if(this.definedFacingForward) defForwardMult = -1; else defForwardMult = 1;
		com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(amountRight * defForwardMult,amountUp,amountForward * defForwardMult,rotMatrix,translationDelta);
		return translationDelta;
	}
	,rotatePOV: function(flipBack,twirlClockwise,tiltRight) {
		this.rotation.addInPlace(this.calcRotatePOV(flipBack,twirlClockwise,tiltRight));
	}
	,calcRotatePOV: function(flipBack,twirlClockwise,tiltRight) {
		var defForwardMult;
		if(this.definedFacingForward) defForwardMult = 1; else defForwardMult = -1;
		return new com_babylonhx_math_Vector3(flipBack * defForwardMult,twirlClockwise,tiltRight * defForwardMult);
	}
	,setPivotMatrix: function(matrix) {
		this._pivotMatrix = matrix;
		this._cache.pivotMatrixUpdated = true;
	}
	,getPivotMatrix: function() {
		return this._pivotMatrix;
	}
	,_isSynchronized: function() {
		if(this._isDirty) return false;
		if(this.billboardMode != this._cache.billboardMode || this.billboardMode != com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE) return false;
		if(this._cache.pivotMatrixUpdated) return false;
		if(this.infiniteDistance) return false;
		if(!this._cache.position.equals(this.position)) return false;
		if(this.rotationQuaternion != null) {
			if(!this._cache.rotationQuaternion.equals(this.rotationQuaternion)) return false;
		} else if(!this._cache.rotation.equals(this.rotation)) return false;
		if(!this._cache.scaling.equals(this.scaling)) return false;
		return true;
	}
	,_initCache: function() {
		com_babylonhx_Node.prototype._initCache.call(this);
		this._cache.localMatrixUpdated = false;
		this._cache.position = new com_babylonhx_math_Vector3(0,0,0);
		this._cache.scaling = new com_babylonhx_math_Vector3(0,0,0);
		this._cache.rotation = new com_babylonhx_math_Vector3(0,0,0);
		this._cache.rotationQuaternion = new com_babylonhx_math_Quaternion(0,0,0,0);
		this._cache.billboardMode = -1;
	}
	,markAsDirty: function(property) {
		if(property == "rotation") this.rotationQuaternion = null;
		this._currentRenderId = Infinity;
		this._isDirty = true;
	}
	,_updateBoundingInfo: function() {
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
	}
	,_updateSubMeshesBoundingInfo: function(matrix) {
		if(this.subMeshes == null) return;
		var _g = 0;
		var _g1 = this.subMeshes;
		while(_g < _g1.length) {
			var subMesh = _g1[_g];
			++_g;
			if(subMesh._boundingInfo == null) subMesh.refreshBoundingInfo();
			subMesh._boundingInfo._update(matrix);
		}
	}
	,computeWorldMatrix: function(force) {
		if(force == null) force = false;
		if(this._isWorldMatrixFrozen) return this._worldMatrix;
		if(!force && (this._currentRenderId == this._scene._renderId || this.isSynchronized(true))) return this._worldMatrix;
		this._cache.position.copyFrom(this.position);
		this._cache.scaling.copyFrom(this.scaling);
		this._cache.pivotMatrixUpdated = false;
		this._cache.billboardMode = this.billboardMode;
		this._currentRenderId = this._scene._renderId;
		this._isDirty = false;
		com_babylonhx_math_Matrix.ScalingToRef(this.scaling.x,this.scaling.y,this.scaling.z,this._localScaling);
		if(this.rotationQuaternion != null) {
			this.rotationQuaternion.toRotationMatrix(this._localRotation);
			this._cache.rotationQuaternion.copyFrom(this.rotationQuaternion);
		} else {
			com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
			com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._localRotation);
			this._cache.rotation.copyFrom(this.rotation);
		}
		if(this.infiniteDistance && this.parent == null) {
			var camera = this._scene.activeCamera;
			if(camera != null) {
				com_babylonhx_mesh_AbstractMesh.cameraWorldMatrix = camera.getWorldMatrix();
				com_babylonhx_mesh_AbstractMesh.cameraGlobalPosition.copyFromFloats(com_babylonhx_mesh_AbstractMesh.cameraWorldMatrix.m[12],com_babylonhx_mesh_AbstractMesh.cameraWorldMatrix.m[13],com_babylonhx_mesh_AbstractMesh.cameraWorldMatrix.m[14]);
				com_babylonhx_math_Matrix.TranslationToRef(this.position.x + com_babylonhx_mesh_AbstractMesh.cameraGlobalPosition.x,this.position.y + com_babylonhx_mesh_AbstractMesh.cameraGlobalPosition.y,this.position.z + com_babylonhx_mesh_AbstractMesh.cameraGlobalPosition.z,this._localTranslation);
			}
		} else com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._localTranslation);
		this._pivotMatrix.multiplyToRef(this._localScaling,this._localPivotScaling);
		this._localPivotScaling.multiplyToRef(this._localRotation,this._localPivotScalingRotation);
		if(this.billboardMode != com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE && this._scene.activeCamera != null) {
			var localPosition = this.position.clone();
			var zero = this._scene.activeCamera.get_globalPosition().clone();
			if(this.parent != null && Object.prototype.hasOwnProperty.call(this.parent,"position")) {
				localPosition.addInPlace(this.parent.position);
				com_babylonhx_math_Matrix.TranslationToRef(localPosition.x,localPosition.y,localPosition.z,this._localTranslation);
			}
			if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_ALL) != com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_ALL) zero = this._scene.activeCamera.position; else {
				if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_X) != 0) zero.x = localPosition.x + 0.001;
				if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Y) != 0) zero.y = localPosition.y + 0.001;
				if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Z) != 0) zero.z = localPosition.z + 0.001;
			}
			com_babylonhx_math_Matrix.LookAtLHToRef(localPosition,zero,new com_babylonhx_math_Vector3(0,1.0,0),this._localBillboard);
			this._localBillboard.m[12] = 0;
			this._localBillboard.m[13] = 0;
			this._localBillboard.m[14] = 0;
			this._localBillboard.invert();
			this._localPivotScalingRotation.multiplyToRef(this._localBillboard,this._localWorld);
			this._rotateYByPI.multiplyToRef(this._localWorld,this._localPivotScalingRotation);
		}
		this._localPivotScalingRotation.multiplyToRef(this._localTranslation,this._localWorld);
		if(this.parent != null && this.parent.getWorldMatrix() != null && this.billboardMode == com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE) {
			this._parentRenderId = this.parent._currentRenderId;
			if(this._meshToBoneReferal != null) {
				if(this._localMeshReferalTransform == null) this._localMeshReferalTransform = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
				this._localWorld.multiplyToRef(this.parent.getWorldMatrix(),this._localMeshReferalTransform);
				this._localMeshReferalTransform.multiplyToRef(this._meshToBoneReferal.getWorldMatrix(),this._worldMatrix);
			} else this._localWorld.multiplyToRef(this.parent.getWorldMatrix(),this._worldMatrix);
		} else this._worldMatrix.copyFrom(this._localWorld);
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
		this._absolutePosition.copyFromFloats(this._worldMatrix.m[12],this._worldMatrix.m[13],this._worldMatrix.m[14]);
		var _g = 0;
		var _g1 = this._onAfterWorldMatrixUpdate;
		while(_g < _g1.length) {
			var callbackIndex = _g1[_g];
			++_g;
			callbackIndex(this);
		}
		return this._worldMatrix;
	}
	,registerAfterWorldMatrixUpdate: function(func) {
		this._onAfterWorldMatrixUpdate.push(func);
	}
	,unregisterAfterWorldMatrixUpdate: function(func) {
		var index = HxOverrides.indexOf(this._onAfterWorldMatrixUpdate,func,0);
		if(index > -1) this._onAfterWorldMatrixUpdate.splice(index,1);
	}
	,setPositionWithLocalVector: function(vector3) {
		this.computeWorldMatrix();
		this.position = com_babylonhx_math_Vector3.TransformNormal(vector3,this._localWorld);
	}
	,getPositionExpressedInLocalSpace: function() {
		this.computeWorldMatrix();
		var invLocalWorldMatrix = this._localWorld.clone();
		invLocalWorldMatrix.invertToRef(invLocalWorldMatrix);
		invLocalWorldMatrix;
		return com_babylonhx_math_Vector3.TransformNormal(this.position,invLocalWorldMatrix);
	}
	,locallyTranslate: function(vector3) {
		this.computeWorldMatrix();
		this.position = com_babylonhx_math_Vector3.TransformCoordinates(vector3,this._localWorld);
	}
	,lookAt: function(targetPoint,yawCor,pitchCor,rollCor) {
		if(rollCor == null) rollCor = 0;
		if(pitchCor == null) pitchCor = 0;
		if(yawCor == null) yawCor = 0;
		var dv = targetPoint.subtract(this.position);
		var yaw = -Math.atan2(dv.z,dv.x) - Math.PI / 2;
		var len = Math.sqrt(dv.x * dv.x + dv.z * dv.z);
		var pitch = Math.atan2(dv.y,len);
		this.rotationQuaternion = com_babylonhx_math_Quaternion.RotationYawPitchRoll(yaw + yawCor,pitch + pitchCor,rollCor);
	}
	,attachToBone: function(bone,affectedMesh) {
		this._meshToBoneReferal = affectedMesh;
		this.parent = bone;
	}
	,detachFromBone: function() {
		this._meshToBoneReferal = null;
		this.parent = null;
	}
	,isInFrustum: function(frustumPlanes) {
		return this._boundingInfo.isInFrustum(frustumPlanes);
	}
	,isCompletelyInFrustum: function(camera) {
		if(camera == null) camera = this._scene.activeCamera;
		var transformMatrix = camera.getViewMatrix().multiply(camera.getProjectionMatrix(false));
		if(!this._boundingInfo.isCompletelyInFrustum(com_babylonhx_math_Frustum.GetPlanes(transformMatrix))) return false;
		return true;
	}
	,intersectsMesh: function(mesh,precise) {
		if(precise == null) precise = false;
		if(this._boundingInfo == null || mesh._boundingInfo == null) return false;
		return this._boundingInfo.intersects(mesh._boundingInfo,precise);
	}
	,intersectsPoint: function(point) {
		if(this._boundingInfo == null) return false;
		return this._boundingInfo.intersectsPoint(point);
	}
	,setPhysicsState: function(impostor,options) {
		var physicsEngine = this._scene._physicsEngine;
		if(physicsEngine == null) return null;
		if(impostor != null) impostor = impostor; else impostor = 0;
		if(Object.prototype.hasOwnProperty.call(impostor,"impostor")) {
			options = impostor;
			impostor = impostor.impostor;
		}
		if(impostor == 0) {
			physicsEngine._unregisterMesh(this);
			return null;
		}
		if(options == null) {
			options.mass = 0;
			options.friction = 0.2;
			options.restitution = 0.2;
		} else {
			if(options.mass == null) options.mass = 0;
			if(options.friction == null) options.friction = 0.2;
			if(options.restitution == null) options.restitution = 0.2;
		}
		this._physicImpostor = impostor;
		this._physicsMass = options.mass;
		this._physicsFriction = options.friction;
		this._physicRestitution = options.restitution;
		return physicsEngine._registerMesh(this,impostor,options);
	}
	,getPhysicsImpostor: function() {
		return this._physicImpostor;
	}
	,getPhysicsMass: function() {
		return this._physicsMass;
	}
	,getPhysicsFriction: function() {
		return this._physicsFriction;
	}
	,getPhysicsRestitution: function() {
		return this._physicRestitution;
	}
	,getPositionInCameraSpace: function(camera) {
		if(camera == null) camera = this._scene.activeCamera;
		return com_babylonhx_math_Vector3.TransformCoordinates(this.get_absolutePosition(),camera.getViewMatrix());
	}
	,getDistanceToCamera: function(camera) {
		if(camera == null) camera = this._scene.activeCamera;
		return this.get_absolutePosition().subtract(camera.position).length();
	}
	,applyImpulse: function(force,contactPoint) {
		if(this._physicImpostor != 0) this._scene._physicsEngine._applyImpulse(this,force,contactPoint);
	}
	,setPhysicsLinkWith: function(otherMesh,pivot1,pivot2,options) {
		if(this._physicImpostor != 0) this._scene._physicsEngine._createLink(this,otherMesh,pivot1,pivot2,options);
	}
	,updatePhysicsBodyPosition: function() {
		if(this._physicImpostor != 0) this._scene._physicsEngine._updateBodyPosition(this);
	}
	,get_checkCollisions: function() {
		return this._checkCollisions;
	}
	,set_checkCollisions: function(collisionEnabled) {
		this._checkCollisions = collisionEnabled;
		if(this._scene.get_workerCollisions()) this._scene.collisionCoordinator.onMeshUpdated(this);
		return collisionEnabled;
	}
	,moveWithCollisions: function(velocity) {
		var globalPosition;
		this.computeWorldMatrix();
		globalPosition = this._absolutePosition;
		globalPosition.subtractFromFloatsToRef(0,this.ellipsoid.y,0,this._oldPositionForCollisions);
		this._oldPositionForCollisions.addInPlace(this.ellipsoidOffset);
		this._collider.radius = this.ellipsoid;
		this._scene.collisionCoordinator.getNewPosition(this._oldPositionForCollisions,velocity,this._collider,3,this,$bind(this,this._onCollisionPositionChange),this.uniqueId);
	}
	,_onCollisionPositionChange: function(collisionId,newPosition,collidedMesh) {
		if(this._scene.get_workerCollisions()) newPosition.multiplyInPlace(this._collider.radius);
		newPosition.subtractToRef(this._oldPositionForCollisions,this._diffPositionForCollisions);
		if(this._diffPositionForCollisions.length() > com_babylonhx_Engine.CollisionsEpsilon) this.position.addInPlace(this._diffPositionForCollisions);
		if(this.onCollide != null && collidedMesh != null) this.onCollide(collidedMesh);
	}
	,createOrUpdateSubmeshesOctree: function(maxCapacity,maxDepth) {
		if(maxDepth == null) maxDepth = 2;
		if(maxCapacity == null) maxCapacity = 64;
		if(this._submeshesOctree == null) this._submeshesOctree = new com_babylonhx_culling_octrees_Octree(com_babylonhx_culling_octrees_Octree.CreationFuncForSubMeshes,maxCapacity,maxDepth);
		this.computeWorldMatrix(true);
		var bbox = this.getBoundingInfo().boundingBox;
		this._submeshesOctree.update(bbox.minimumWorld,bbox.maximumWorld,this.subMeshes);
		return this._submeshesOctree;
	}
	,_collideForSubMesh: function(subMesh,transformMatrix,collider) {
		this._generatePointsArray();
		if(subMesh._lastColliderWorldVertices == null || !subMesh._lastColliderTransformMatrix.equals(transformMatrix)) {
			subMesh._lastColliderTransformMatrix = com_babylonhx_math_Matrix.FromValues(transformMatrix.m[0],transformMatrix.m[1],transformMatrix.m[2],transformMatrix.m[3],transformMatrix.m[4],transformMatrix.m[5],transformMatrix.m[6],transformMatrix.m[7],transformMatrix.m[8],transformMatrix.m[9],transformMatrix.m[10],transformMatrix.m[11],transformMatrix.m[12],transformMatrix.m[13],transformMatrix.m[14],transformMatrix.m[15]);
			subMesh._lastColliderWorldVertices = [];
			subMesh._trianglePlanes = [];
			var start = subMesh.verticesStart;
			var end = subMesh.verticesStart + subMesh.verticesCount;
			var _g = start;
			while(_g < end) {
				var i = _g++;
				subMesh._lastColliderWorldVertices.push(com_babylonhx_math_Vector3.TransformCoordinates(this._positions[i],transformMatrix));
			}
		}
		collider._collide(subMesh,subMesh._lastColliderWorldVertices,this.getIndices(),subMesh.indexStart,subMesh.indexStart + subMesh.indexCount,subMesh.verticesStart);
		if(collider.collisionFound) collider.collidedMesh = this;
	}
	,_processCollisionsForSubMeshes: function(collider,transformMatrix) {
		var subMeshes;
		var len = 0;
		if(this._submeshesOctree != null && this.useOctreeForCollisions) {
			var radius = collider.velocityWorldLength + Math.max(Math.max(collider.radius.x,collider.radius.y),collider.radius.z);
			var intersections = this._submeshesOctree.intersects(collider.basePointWorld,radius,null);
			len = intersections.length;
			subMeshes = intersections.data;
		} else {
			subMeshes = this.subMeshes;
			len = subMeshes.length;
		}
		var _g = 0;
		while(_g < len) {
			var index = _g++;
			var subMesh = subMeshes[index];
			if(len > 1 && !subMesh._boundingInfo._checkCollision(collider)) continue;
			this._collideForSubMesh(subMesh,transformMatrix,collider);
		}
	}
	,_checkCollision: function(collider) {
		if(!this._boundingInfo._checkCollision(collider)) return;
		com_babylonhx_math_Matrix.ScalingToRef(1.0 / collider.radius.x,1.0 / collider.radius.y,1.0 / collider.radius.z,this._collisionsScalingMatrix);
		this.get_worldMatrixFromCache().multiplyToRef(this._collisionsScalingMatrix,this._collisionsTransformMatrix);
		this._processCollisionsForSubMeshes(collider,this._collisionsTransformMatrix);
	}
	,_generatePointsArray: function() {
		return false;
	}
	,intersects: function(ray,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var pickingInfo = new com_babylonhx_collisions_PickingInfo();
		if(this.subMeshes == null || this._boundingInfo == null || !ray.intersectsSphere(this._boundingInfo.boundingSphere) || !ray.intersectsBox(this._boundingInfo.boundingBox)) return pickingInfo;
		if(!this._generatePointsArray()) return pickingInfo;
		var intersectInfo = null;
		var subMeshes;
		var len;
		if(this._submeshesOctree != null && this.useOctreeForPicking) {
			var worldRay = com_babylonhx_math_Ray.Transform(ray,this.getWorldMatrix());
			var intersections = this._submeshesOctree.intersectsRay(worldRay);
			len = intersections.length;
			subMeshes = intersections.data;
		} else {
			subMeshes = this.subMeshes;
			len = subMeshes.length;
		}
		var _g = 0;
		while(_g < len) {
			var index = _g++;
			var subMesh = subMeshes[index];
			if(len > 1 && !ray.intersectsBox(subMesh._boundingInfo.boundingBox)) continue;
			var currentIntersectInfo = subMesh.intersects(ray,this._positions,this.getIndices(),fastCheck);
			if(currentIntersectInfo != null) {
				if(fastCheck || intersectInfo == null || currentIntersectInfo.distance < intersectInfo.distance) {
					intersectInfo = currentIntersectInfo;
					if(fastCheck) break;
				}
			}
		}
		if(intersectInfo != null) {
			var world = this.getWorldMatrix();
			var worldOrigin = com_babylonhx_math_Vector3.TransformCoordinates(ray.origin,world);
			var direction = ray.direction.clone();
			direction = direction.scale(intersectInfo.distance);
			var worldDirection = com_babylonhx_math_Vector3.TransformNormal(direction,world);
			var pickedPoint = new com_babylonhx_math_Vector3(worldOrigin.x + worldDirection.x,worldOrigin.y + worldDirection.y,worldOrigin.z + worldDirection.z);
			pickingInfo.hit = true;
			pickingInfo.distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(worldOrigin,pickedPoint));
			pickingInfo.pickedPoint = pickedPoint;
			pickingInfo.pickedMesh = this;
			pickingInfo.bu = intersectInfo.bu;
			pickingInfo.bv = intersectInfo.bv;
			pickingInfo.faceId = intersectInfo.faceId;
			pickingInfo.subMeshId = intersectInfo.subMeshId;
			return pickingInfo;
		}
		return pickingInfo;
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		return null;
	}
	,releaseSubMeshes: function() {
		if(this.subMeshes != null) while(this.subMeshes.length > 0) this.subMeshes[0].dispose(); else this.subMeshes = [];
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		if(this._physicImpostor != 0) this.setPhysicsState(0);
		this._scene.stopAnimation(this);
		var _g1 = 0;
		var _g = this._intersectionsInProgress.length;
		while(_g1 < _g) {
			var index = _g1++;
			var other = this._intersectionsInProgress[index];
			var pos = HxOverrides.indexOf(other._intersectionsInProgress,this,0);
			other._intersectionsInProgress.splice(pos,1);
		}
		this._intersectionsInProgress = [];
		this.releaseSubMeshes();
		this._scene.removeMesh(this);
		if(!doNotRecurse) {
			var index1 = 0;
			while(index1 < this._scene.particleSystems.length) {
				if(this._scene.particleSystems[index1].emitter == this) {
					this._scene.particleSystems[index1].dispose(null);
					index1--;
				}
				++index1;
			}
			var objects = this._scene.meshes.slice(0);
			var _g11 = 0;
			var _g2 = objects.length;
			while(_g11 < _g2) {
				var index2 = _g11++;
				if(objects[index2].parent == this) objects[index2].dispose();
			}
		} else {
			var _g12 = 0;
			var _g3 = this._scene.meshes.length;
			while(_g12 < _g3) {
				var index3 = _g12++;
				var obj = this._scene.meshes[index3];
				if(obj.parent == this) {
					obj.parent = null;
					obj.computeWorldMatrix(true);
				}
			}
		}
		this._onAfterWorldMatrixUpdate = [];
		this._isDisposed = true;
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_mesh_AbstractMesh
	,__properties__: {set_checkCollisions:"set_checkCollisions",get_checkCollisions:"get_checkCollisions",get_isWorldMatrixFrozen:"get_isWorldMatrixFrozen",get_absolutePosition:"get_absolutePosition",get_worldMatrixFromCache:"get_worldMatrixFromCache",get_isBlocked:"get_isBlocked",get_useBones:"get_useBones",set_positions:"set_positions",get_positions:"get_positions",set_receiveShadows:"set_receiveShadows",get_receiveShadows:"get_receiveShadows",set_material:"set_material",get_material:"get_material",set_skeleton:"set_skeleton",get_skeleton:"get_skeleton",set_isPickable:"set_isPickable",get_isPickable:"get_isPickable",set_visibility:"set_visibility",get_visibility:"get_visibility"}
});
var com_babylonhx_mesh_IGetSetVerticesData = $hx_exports.BABYLON.IGetSetVerticesData = function() { };
$hxClasses["com.babylonhx.mesh.IGetSetVerticesData"] = com_babylonhx_mesh_IGetSetVerticesData;
com_babylonhx_mesh_IGetSetVerticesData.__name__ = true;
com_babylonhx_mesh_IGetSetVerticesData.prototype = {
	__class__: com_babylonhx_mesh_IGetSetVerticesData
};
var com_babylonhx_mesh_Geometry = $hx_exports.BABYLON.Geometry = function(id,scene,vertexData,updatable,mesh) {
	if(updatable == null) updatable = false;
	this._delayInfo = [];
	this._isDisposed = false;
	this._totalVertices = 0;
	this.delayLoadState = 0;
	this.id = id;
	this._engine = scene._engine;
	this._meshes = [];
	this._scene = scene;
	this._vertexBuffers = new haxe_ds_StringMap();
	this._indices = [];
	if(vertexData != null) this.setAllVerticesData(vertexData,updatable); else this._totalVertices = 0;
	if(mesh != null) {
		this.applyToMesh(mesh);
		mesh.computeWorldMatrix(true);
	}
};
$hxClasses["com.babylonhx.mesh.Geometry"] = com_babylonhx_mesh_Geometry;
com_babylonhx_mesh_Geometry.__name__ = true;
com_babylonhx_mesh_Geometry.__interfaces__ = [com_babylonhx_mesh_IGetSetVerticesData];
com_babylonhx_mesh_Geometry.ExtractFromMesh = function(mesh,id) {
	var geometry = mesh._geometry;
	if(geometry == null) return null;
	return geometry.copy(id);
};
com_babylonhx_mesh_Geometry.RandomId = function(size) {
	if(size == null) size = 32;
	var nchars = com_babylonhx_mesh_Geometry.UID_CHARS.length;
	var uid = new StringBuf();
	var _g = 0;
	while(_g < size) {
		var i = _g++;
		uid.add(com_babylonhx_mesh_Geometry.UID_CHARS.charAt(Std["int"](Math.random() * nchars)));
	}
	return uid.b;
};
com_babylonhx_mesh_Geometry.prototype = {
	get_extend: function() {
		return this._extend;
	}
	,getScene: function() {
		return this._scene;
	}
	,getEngine: function() {
		return this._engine;
	}
	,isReady: function() {
		return this.delayLoadState == 1 || this.delayLoadState == 0;
	}
	,setAllVerticesData: function(vertexData,updatable) {
		if(updatable == null) updatable = false;
		vertexData.applyToGeometry(this,updatable);
		this.notifyUpdate();
	}
	,setVerticesData: function(kind,data,updatable,stride) {
		if(updatable == null) updatable = false;
		if(this._vertexBuffers.exists(kind)) this._vertexBuffers.get(kind).dispose();
		var value = new com_babylonhx_mesh_VertexBuffer(this._engine,data,kind,updatable,this._meshes.length == 0,stride);
		this._vertexBuffers.set(kind,value);
		if(kind == "position") {
			stride = this._vertexBuffers.get(kind).getStrideSize();
			this._totalVertices = data.length / stride;
			this._extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,0,this._totalVertices);
			var meshes = this._meshes;
			var numOfMeshes = meshes.length;
			var _g = 0;
			while(_g < numOfMeshes) {
				var index = _g++;
				var mesh = meshes[index];
				mesh._positions = null;
				mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._extend.minimum,this._extend.maximum);
				mesh._createGlobalSubMesh();
				mesh.computeWorldMatrix(true);
			}
		}
		this.notifyUpdate();
	}
	,updateVerticesDataDirectly: function(kind,data,offset) {
		var vertexBuffer = this.getVertexBuffer(kind);
		if(vertexBuffer != null) {
			vertexBuffer.updateDirectly(data,offset);
			this.notifyUpdate();
		}
	}
	,updateVerticesData: function(kind,data,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(updateExtends == null) updateExtends = false;
		var vertexBuffer = this.getVertexBuffer(kind);
		if(vertexBuffer == null) return;
		vertexBuffer.create(data);
		if(kind == "position") {
			var extend = null;
			var stride = vertexBuffer._strideSize;
			this._totalVertices = data.length / stride;
			if(updateExtends) this._extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,0,this._totalVertices);
			var meshes = this._meshes;
			var numOfMeshes = meshes.length;
			var _g = 0;
			while(_g < numOfMeshes) {
				var index = _g++;
				var mesh = meshes[index];
				mesh._positions = null;
				if(updateExtends) {
					mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._extend.minimum,this._extend.maximum);
					var _g2 = 0;
					var _g1 = mesh.subMeshes.length;
					while(_g2 < _g1) {
						var subIndex = _g2++;
						var subMesh = mesh.subMeshes[subIndex];
						subMesh.refreshBoundingInfo();
					}
				}
			}
		}
		this.notifyUpdate();
	}
	,getTotalVertices: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return 0;
		return this._totalVertices;
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		var vertexBuffer = this.getVertexBuffer(kind);
		if(vertexBuffer == null) return null;
		var orig = vertexBuffer._data;
		if(!copyWhenShared || this._meshes.length == 1) return orig; else {
			var len = orig.length;
			var copy = [];
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				copy.push(orig[i]);
			}
			return copy;
		}
	}
	,getVertexBuffer: function(kind) {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		return this._vertexBuffers.get(kind);
	}
	,getVertexBuffers: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		return this._vertexBuffers;
	}
	,isVerticesDataPresent: function(kind) {
		if(this._vertexBuffers == null) {
			if(this._delayInfo != null) return HxOverrides.indexOf(this._delayInfo,kind,0) != -1;
			return false;
		}
		return this._vertexBuffers.get(kind) != null;
	}
	,getVerticesDataKinds: function() {
		var result = [];
		if(this._vertexBuffers == null && this._delayInfo != null) {
			var _g = 0;
			var _g1 = this._delayInfo;
			while(_g < _g1.length) {
				var kind = _g1[_g];
				++_g;
				result.push(kind);
			}
		} else {
			var $it0 = this._vertexBuffers.keys();
			while( $it0.hasNext() ) {
				var kind1 = $it0.next();
				result.push(kind1);
			}
		}
		return result;
	}
	,setIndices: function(indices,totalVertices) {
		if(totalVertices == null) totalVertices = -1;
		if(this._indexBuffer != null) this._engine._releaseBuffer(this._indexBuffer);
		this._indices = indices;
		if(this._meshes.length != 0 && this._indices != null) this._indexBuffer = this._engine.createIndexBuffer(this._indices);
		if(totalVertices != -1) this._totalVertices = totalVertices;
		var meshes = this._meshes;
		var numOfMeshes = meshes.length;
		var _g = 0;
		while(_g < numOfMeshes) {
			var index = _g++;
			meshes[index]._createGlobalSubMesh();
		}
		this.notifyUpdate();
	}
	,getTotalIndices: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return 0;
		return this._indices.length;
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		var orig = this._indices;
		if(!copyWhenShared || this._meshes.length == 1) return orig; else {
			var len = orig.length;
			var copy = [];
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				copy.push(orig[i]);
			}
			return copy;
		}
	}
	,getIndexBuffer: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		return this._indexBuffer;
	}
	,releaseForMesh: function(mesh,shouldDispose) {
		if(shouldDispose == null) shouldDispose = false;
		var meshes = this._meshes;
		var index = HxOverrides.indexOf(meshes,mesh,0);
		if(index == -1) return;
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this._vertexBuffers.get(key).dispose();
		}
		if(this._indexBuffer != null && this._engine._releaseBuffer(this._indexBuffer)) this._indexBuffer = null;
		meshes.splice(index,1);
		mesh._geometry = null;
		if(meshes.length == 0 && shouldDispose) this.dispose();
	}
	,applyToMesh: function(mesh) {
		if(mesh._geometry == this) return;
		var previousGeometry = mesh._geometry;
		if(previousGeometry != null) previousGeometry.releaseForMesh(mesh);
		var meshes = this._meshes;
		mesh._geometry = this;
		this._scene.pushGeometry(this);
		meshes.push(mesh);
		if(this.delayLoadState == 1 || this.delayLoadState == 0) this._applyToMesh(mesh); else mesh._boundingInfo = this._boundingInfo;
	}
	,_applyToMesh: function(mesh) {
		var numOfMeshes = this._meshes.length;
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var kind = $it0.next();
			if(numOfMeshes == 1) this._vertexBuffers.get(kind).create();
			this._vertexBuffers.get(kind)._buffer.references = numOfMeshes;
			if(kind == "position") {
				mesh._positions = null;
				if(this._extend == null) this._extend = com_babylonhx_tools_Tools.ExtractMinAndMax(this._vertexBuffers.get(kind).getData(),0,this._totalVertices);
				mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._extend.minimum,this._extend.maximum);
				mesh._createGlobalSubMesh();
				if(mesh._boundingInfo == null) mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(mesh.get_absolutePosition(),mesh.get_absolutePosition()); else mesh._boundingInfo = mesh._boundingInfo;
				mesh._boundingInfo._update(mesh.get_worldMatrixFromCache());
				mesh._updateSubMeshesBoundingInfo(mesh.get_worldMatrixFromCache());
			}
		}
		if(numOfMeshes == 1 && this._indices != null) this._indexBuffer = this._engine.createIndexBuffer(this._indices);
		if(this._indexBuffer != null) this._indexBuffer.references = numOfMeshes;
	}
	,notifyUpdate: function(kind) {
		if(this.onGeometryUpdated != null) this.onGeometryUpdated(this,kind);
	}
	,load: function(scene,onLoaded) {
		if(this.delayLoadState == 2) return;
		if(this.delayLoadState == 1 || this.delayLoadState == 0) {
			if(onLoaded != null) onLoaded();
			return;
		}
		this.delayLoadState = 2;
		scene._addPendingData(this);
	}
	,isDisposed: function() {
		return this._isDisposed;
	}
	,dispose: function() {
		var meshes = this._meshes;
		var numOfMeshes = meshes.length;
		var _g = 0;
		while(_g < numOfMeshes) {
			var index = _g++;
			this.releaseForMesh(meshes[index]);
		}
		this._meshes = [];
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var kind = $it0.next();
			this._vertexBuffers.get(kind).dispose();
		}
		this._vertexBuffers = new haxe_ds_StringMap();
		this._totalVertices = 0;
		if(this._indexBuffer != null) this._engine._releaseBuffer(this._indexBuffer);
		this._indexBuffer = null;
		this._indices = [];
		this.delayLoadState = 0;
		this.delayLoadingFile = null;
		this._delayLoadingFunction = null;
		this._delayInfo = [];
		this._boundingInfo = null;
		this._scene.removeGeometry(this);
		this._isDisposed = true;
	}
	,copy: function(id) {
		var vertexData = new com_babylonhx_mesh_VertexData();
		vertexData.indices = [];
		var indices = this.getIndices();
		var _g1 = 0;
		var _g = indices.length;
		while(_g1 < _g) {
			var index = _g1++;
			vertexData.indices.push(indices[index]);
		}
		var updatable = false;
		var stopChecking = false;
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var kind = $it0.next();
			vertexData.set((function($this) {
				var $r;
				var _this = $this.getVerticesData(kind);
				$r = _this.slice();
				return $r;
			}(this)),kind);
			if(!stopChecking) {
				updatable = this.getVertexBuffer(kind).isUpdatable();
				stopChecking = !updatable;
			}
		}
		var geometry = new com_babylonhx_mesh_Geometry(id,this._scene,vertexData,updatable,null);
		geometry.delayLoadState = this.delayLoadState;
		geometry.delayLoadingFile = this.delayLoadingFile;
		geometry._delayLoadingFunction = this._delayLoadingFunction;
		var _g2 = 0;
		var _g11 = this._delayInfo;
		while(_g2 < _g11.length) {
			var kind1 = _g11[_g2];
			++_g2;
			if(geometry._delayInfo != null) geometry._delayInfo = geometry._delayInfo; else geometry._delayInfo = [];
			geometry._delayInfo.push(kind1);
		}
		geometry._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._extend.minimum,this._extend.maximum);
		return geometry;
	}
	,__class__: com_babylonhx_mesh_Geometry
	,__properties__: {get_extend:"get_extend"}
};
var com_babylonhx_mesh_Mesh = $hx_exports.BABYLON.Mesh = function(name,scene,parent,source,doNotCloneChildren) {
	if(doNotCloneChildren == null) doNotCloneChildren = false;
	this._closeArray = false;
	this._closePath = false;
	this.cap = 0;
	this._areNormalsFrozen = false;
	this._sideOrientation = 0;
	this._preActivateId = -1;
	this._instancesBufferSize = 2048;
	this._batchCache = new com_babylonhx_mesh__$InstancesBatch();
	this._renderIdForInstances = [];
	this._onAfterRenderCallbacks = [];
	this._onBeforeRenderCallbacks = [];
	this._LODLevels = [];
	this.instances = [];
	this.delayLoadState = 0;
	com_babylonhx_mesh_AbstractMesh.call(this,name,scene);
	if(source != null) {
		if(source._geometry != null) source._geometry.applyToMesh(this);
		com_babylonhx_mesh_Mesh._deepCopy(source,this);
		this.id = name + "." + source.id;
		if(source != null) this.set_material(source.get_material());
		if(!doNotCloneChildren) {
			var _g1 = 0;
			var _g = scene.meshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				var mesh = scene.meshes[index];
				if(mesh.parent == source) {
					var newChild = mesh.clone(name + "." + mesh.name,this,doNotCloneChildren);
				}
			}
		}
		var _g11 = 0;
		var _g2 = scene.particleSystems.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			var system = scene.particleSystems[index1];
			if(system.emitter == source) system.clone(system.name,this);
		}
		this.computeWorldMatrix(true);
	}
	if(parent != null) this.parent = parent;
};
$hxClasses["com.babylonhx.mesh.Mesh"] = com_babylonhx_mesh_Mesh;
com_babylonhx_mesh_Mesh.__name__ = true;
com_babylonhx_mesh_Mesh.__interfaces__ = [com_babylonhx_animations_IAnimatable,com_babylonhx_mesh_IGetSetVerticesData];
com_babylonhx_mesh_Mesh._deepCopy = function(source,dest) {
	dest.__smartArrayFlags = source.__smartArrayFlags.slice();
	dest._LODLevels = source._LODLevels.slice();
	dest._absolutePosition = source._absolutePosition.clone();
	dest._batchCache = source._batchCache;
	dest._boundingInfo = source._boundingInfo;
	dest._cache = source._cache;
	dest._checkCollisions = source._checkCollisions;
	dest._childrenFlag = source._childrenFlag;
	dest._collider = source._collider;
	dest.instances = source.instances.slice();
	dest._collisionsScalingMatrix = source._collisionsScalingMatrix.clone();
	dest._collisionsTransformMatrix = source._collisionsTransformMatrix.clone();
	dest._diffPositionForCollisions = source._diffPositionForCollisions.clone();
	dest._geometry = source._geometry;
	dest._instancesBufferSize = source._instancesBufferSize;
	dest._intersectionsInProgress = source._intersectionsInProgress.slice();
	dest._isBlocked = source._isBlocked;
	dest._isDirty = source._isDirty;
	dest._isDisposed = source._isDisposed;
	dest._isEnabled = source._isEnabled;
	dest._isPickable = source._isPickable;
	dest._isReady = source._isReady;
	dest._localBillboard = source._localBillboard.clone();
	dest._localPivotScaling = source._localPivotScaling.clone();
	dest._localRotation = source._localRotation.clone();
	dest._localScaling = source._localScaling.clone();
	dest._localTranslation = source._localTranslation.clone();
	dest._localWorld = source._localWorld;
	dest._masterMesh = source._masterMesh;
	dest._newPositionForCollisions = source._newPositionForCollisions.clone();
	dest._oldPositionForCollisions = source._oldPositionForCollisions.clone();
	dest._onAfterRenderCallbacks = source._onAfterRenderCallbacks;
	dest._onAfterWorldMatrixUpdate = source._onAfterWorldMatrixUpdate;
	dest._onBeforeRenderCallbacks = source._onBeforeRenderCallbacks;
	dest._parentRenderId = source._parentRenderId;
	dest._physicImpostor = source._physicImpostor;
	dest._physicRestitution = source._physicRestitution;
	dest._physicsFriction = source._physicsFriction;
	dest._physicsMass = source._physicsMass;
	dest._pivotMatrix = source._pivotMatrix.clone();
	if(source._positions != null) dest._positions = source._positions.slice();
	dest._preActivateId = source._preActivateId;
	dest._receiveShadows = source._receiveShadows;
	dest._renderId = source._renderId;
	dest._renderIdForInstances = source._renderIdForInstances.slice();
	dest._rotateYByPI = source._rotateYByPI.clone();
	dest._scene = source._scene;
	dest._shouldGenerateFlatShading = source._shouldGenerateFlatShading;
	dest._submeshesOctree = source._submeshesOctree;
	dest._visibility = source._visibility;
	dest._visibleInstances = source._visibleInstances;
	dest._waitingActions = source._waitingActions;
	dest._waitingParentId = source._waitingParentId;
	dest._worldMatricesInstancesBuffer = source._worldMatricesInstancesBuffer;
	dest._worldMatrix = source._worldMatrix.clone();
	dest.definedFacingForward = source.definedFacingForward;
	dest.position = source.position.clone();
	dest.rotation = source.rotation.clone();
	if(source.rotationQuaternion != null) dest.rotationQuaternion = source.rotationQuaternion.clone();
	dest.scaling = source.scaling.clone();
	dest.billboardMode = source.billboardMode;
	dest.alphaIndex = source.alphaIndex;
	dest.infiniteDistance = source.infiniteDistance;
	dest.isVisible = source.isVisible;
	dest.showBoundingBox = source.showBoundingBox;
	dest.showSubMeshesBoundingBox = source.showSubMeshesBoundingBox;
	dest.onDispose = source.onDispose;
	dest.isBlocker = source.isBlocker;
	dest.renderingGroupId = source.renderingGroupId;
	dest.actionManager = source.actionManager;
	dest.renderOutline = source.renderOutline;
	dest.outlineColor = source.outlineColor.clone();
	dest.outlineWidth = source.outlineWidth;
	dest.renderOverlay = source.renderOverlay;
	dest.overlayColor = source.overlayColor.clone();
	dest.overlayAlpha = source.overlayAlpha;
	dest.hasVertexAlpha = source.hasVertexAlpha;
	dest.useVertexColors = source.useVertexColors;
	dest.applyFog = source.applyFog;
	dest.useOctreeForRenderingSelection = source.useOctreeForRenderingSelection;
	dest.useOctreeForPicking = source.useOctreeForPicking;
	dest.useOctreeForCollisions = source.useOctreeForCollisions;
	dest.layerMask = source.layerMask;
	dest.ellipsoid = source.ellipsoid.clone();
	dest.ellipsoidOffset = source.ellipsoidOffset.clone();
};
com_babylonhx_mesh_Mesh.CreateRibbon = function(name,pathArray,closeArray,closePath,offset,scene,updatable,sideOrientation,instance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(offset == null) offset = 0;
	if(closePath == null) closePath = false;
	if(closeArray == null) closeArray = false;
	var options = { pathArray : pathArray, closeArray : closeArray, closePath : closePath, offset : offset, instance : instance, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateRibbon(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateDisc = function(name,radius,tessellation,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { radius : radius, tessellation : tessellation, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateDisc(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateBox = function(name,size,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { width : size, height : size, depth : size, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateBox(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateSphere = function(name,segments,diameter,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { segments : segments, diameterX : diameter, diameterY : diameter, diameterZ : diameter, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateSphere(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateCylinder = function(name,height,diameterTop,diameterBottom,tessellation,subdivisions,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { height : height, diameterTop : diameterTop, diameterBottom : diameterBottom, tessellation : tessellation, subdivisions : subdivisions, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateCylinder(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateTorus = function(name,diameter,thickness,tessellation,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { diameter : diameter, thickness : thickness, tessellation : tessellation, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateTorus(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateTorusKnot = function(name,radius,tube,radialSegments,tubularSegments,p,q,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { radius : radius, tube : tube, radialSegments : radialSegments, tubularSegments : tubularSegments, p : p, q : q, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateTorusKnot(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateLines = function(name,points,scene,updatable,instance) {
	if(updatable == null) updatable = false;
	var options = { points : points, updatable : updatable, instance : instance};
	return com_babylonhx_mesh_MeshBuilder.CreateLines(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateDashedLines = function(name,points,dashSize,gapSize,dashNb,scene,updatable,instance) {
	if(updatable == null) updatable = false;
	var options = { points : points, dashSize : dashSize, gapSize : gapSize, dashNb : dashNb, updatable : updatable, instance : instance};
	return com_babylonhx_mesh_MeshBuilder.CreateDashedLines(name,options,scene);
};
com_babylonhx_mesh_Mesh.ExtrudeShape = function(name,shape,path,scale,rotation,cap,scene,updatable,sideOrientation,extrudedInstance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(cap == null) cap = 0;
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var options = { shape : shape, path : path, scale : scale, rotation : rotation, cap : cap, sideOrientation : sideOrientation, extrudedInstance : extrudedInstance, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.ExtrudeShape(name,options,scene);
};
com_babylonhx_mesh_Mesh.ExtrudeShapeCustom = function(name,shape,path,scaleFunction,rotationFunction,ribbonCloseArray,ribbonClosePath,cap,scene,updatable,sideOrientation,extrudedInstance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(cap == null) cap = 0;
	if(ribbonClosePath == null) ribbonClosePath = false;
	if(ribbonCloseArray == null) ribbonCloseArray = false;
	var options = { shape : shape, path : path, scaleFunction : scaleFunction, rotationFunction : rotationFunction, ribbonCloseArray : ribbonCloseArray, ribbonClosePath : ribbonClosePath, cap : cap, sideOrientation : sideOrientation, extrudedInstance : extrudedInstance, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.ExtrudeShapeCustom(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateLathe = function(name,shape,radius,tessellation,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(tessellation == null) tessellation = 0;
	if(radius == null) radius = 1;
	var options = { shape : shape, radius : radius, tesselation : tessellation, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateLathe(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreatePlane = function(name,size,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { width : size, height : size, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreatePlane(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateGround = function(name,width,height,subdivisions,scene,updatable) {
	if(updatable == null) updatable = false;
	var options = { width : width, height : height, subdivision : subdivisions, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateGround(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateTiledGround = function(name,xmin,zmin,xmax,zmax,subdivisions,precision,scene,updatable) {
	if(updatable == null) updatable = false;
	var options = { xmin : xmin, zmin : zmin, xmax : xmax, zmax : zmax, subdivisions : subdivisions, precision : precision, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateTiledGround(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateGroundFromHeightMap = function(name,url,width,height,subdivisions,minHeight,maxHeight,scene,updatable,onReady) {
	if(updatable == null) updatable = false;
	var options = { width : width, height : height, subdivisions : subdivisions, minHeight : minHeight, maxHeight : maxHeight, updatable : updatable, onReady : onReady};
	return com_babylonhx_mesh_MeshBuilder.CreateGroundFromHeightMap(name,url,options,scene);
};
com_babylonhx_mesh_Mesh.CreateTube = function(name,path,radius,tessellation,radiusFunction,cap,scene,updatable,sideOrientation,instance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { path : path, radius : radius, tessellation : tessellation, radiusFunction : radiusFunction, arc : 1, cap : cap, updatable : updatable, sideOrientation : sideOrientation, instance : instance};
	return com_babylonhx_mesh_MeshBuilder.CreateTube(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreatePolyhedron = function(name,options,scene) {
	return com_babylonhx_mesh_MeshBuilder.CreatePolyhedron(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateIcoSphere = function(name,options,scene) {
	return com_babylonhx_mesh_MeshBuilder.CreateIcoSphere(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateDecal = function(name,sourceMesh,position,normal,size,angle) {
	if(angle == null) angle = 0;
	var options = { position : position, normal : normal, size : size, angle : angle};
	return com_babylonhx_mesh_MeshBuilder.CreateDecal(name,sourceMesh,options);
};
com_babylonhx_mesh_Mesh.MinMax = function(meshes) {
	var minVector = null;
	var maxVector = null;
	var _g = 0;
	while(_g < meshes.length) {
		var mesh = meshes[_g];
		++_g;
		var boundingBox = mesh.getBoundingInfo().boundingBox;
		if(minVector == null) {
			minVector = boundingBox.minimumWorld;
			maxVector = boundingBox.maximumWorld;
			continue;
		}
		minVector.MinimizeInPlace(boundingBox.minimumWorld);
		maxVector.MaximizeInPlace(boundingBox.maximumWorld);
	}
	return { minimum : minVector, maximum : maxVector};
};
com_babylonhx_mesh_Mesh.Center = function(meshesOrMinMaxVector) {
	var minMaxVector;
	if(meshesOrMinMaxVector.min != null) minMaxVector = meshesOrMinMaxVector; else minMaxVector = com_babylonhx_mesh_Mesh.MinMax(meshesOrMinMaxVector);
	return com_babylonhx_math_Vector3.Center(minMaxVector.minimum,minMaxVector.maximum);
};
com_babylonhx_mesh_Mesh.MergeMeshes = function(meshes,disposeSource,allow32BitsIndices,meshSubclass) {
	if(allow32BitsIndices == null) allow32BitsIndices = false;
	if(disposeSource == null) disposeSource = true;
	if(!allow32BitsIndices) {
		var totalVertices = 0;
		var _g1 = 0;
		var _g = meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(meshes[index] != null) {
				totalVertices += meshes[index].getTotalVertices();
				if(totalVertices > 65536) {
					haxe_Log.trace("Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices",{ fileName : "Mesh.hx", lineNumber : 1832, className : "com.babylonhx.mesh.Mesh", methodName : "MergeMeshes"});
					return null;
				}
			}
		}
	}
	var vertexData = null;
	var otherVertexData = null;
	var source = null;
	var _g11 = 0;
	var _g2 = meshes.length;
	while(_g11 < _g2) {
		var index1 = _g11++;
		if(meshes[index1] != null) {
			meshes[index1].computeWorldMatrix(true);
			otherVertexData = com_babylonhx_mesh_VertexData.ExtractFromMesh(meshes[index1],true);
			otherVertexData.transform(meshes[index1].getWorldMatrix());
			if(vertexData != null) vertexData.merge(otherVertexData); else {
				vertexData = otherVertexData;
				source = meshes[index1];
			}
		}
	}
	if(meshSubclass == null) meshSubclass = new com_babylonhx_mesh_Mesh(source.name + "_merged",source._scene);
	vertexData.applyToMesh(meshSubclass);
	meshSubclass.set_material(source.get_material());
	meshSubclass.set_checkCollisions(source.get_checkCollisions());
	if(disposeSource) {
		var _g12 = 0;
		var _g3 = meshes.length;
		while(_g12 < _g3) {
			var index2 = _g12++;
			if(meshes[index2] != null) meshes[index2].dispose();
		}
	}
	return meshSubclass;
};
com_babylonhx_mesh_Mesh.__super__ = com_babylonhx_mesh_AbstractMesh;
com_babylonhx_mesh_Mesh.prototype = $extend(com_babylonhx_mesh_AbstractMesh.prototype,{
	get_hasLODLevels: function() {
		return this._LODLevels.length > 0;
	}
	,_sortLODLevels: function() {
		this._LODLevels.sort(function(a,b) {
			if(a.distance < b.distance) return 1;
			if(a.distance > b.distance) return -1;
			return 0;
		});
	}
	,addLODLevel: function(distance,mesh) {
		if(mesh != null && mesh._masterMesh != null) {
			haxe_Log.trace("You cannot use a mesh as LOD level twice",{ fileName : "Mesh.hx", lineNumber : 310, className : "com.babylonhx.mesh.Mesh", methodName : "addLODLevel"});
			return this;
		}
		var level = new com_babylonhx_mesh_MeshLODLevel(distance,mesh);
		this._LODLevels.push(level);
		if(mesh != null) mesh._masterMesh = this;
		this._sortLODLevels();
		return this;
	}
	,getLODLevelAtDistance: function(distance) {
		var _g1 = 0;
		var _g = this._LODLevels.length;
		while(_g1 < _g) {
			var index = _g1++;
			var level = this._LODLevels[index];
			if(level.distance == distance) return level.mesh;
		}
		return null;
	}
	,removeLODLevel: function(mesh) {
		var _g1 = 0;
		var _g = this._LODLevels.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._LODLevels[index].mesh == mesh) {
				this._LODLevels.splice(index,1);
				if(mesh != null) mesh._masterMesh = null;
			}
		}
		this._sortLODLevels();
		return this;
	}
	,getLOD: function(camera,boundingSphere) {
		if(this._LODLevels == null || this._LODLevels.length == 0) return this;
		var distanceToCamera = (boundingSphere != null?boundingSphere:this.getBoundingInfo().boundingSphere).centerWorld.subtract(camera.position).length();
		if(this._LODLevels[this._LODLevels.length - 1].distance > distanceToCamera) {
			if(this.onLODLevelSelection != null) this.onLODLevelSelection(distanceToCamera,this,this._LODLevels[this._LODLevels.length - 1].mesh);
			return this;
		}
		var _g1 = 0;
		var _g = this._LODLevels.length;
		while(_g1 < _g) {
			var index = _g1++;
			var level = this._LODLevels[index];
			if(level.distance < distanceToCamera) {
				if(level.mesh != null) {
					level.mesh._preActivate();
					level.mesh._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
				}
				if(this.onLODLevelSelection != null) this.onLODLevelSelection(distanceToCamera,this,level.mesh);
				return level.mesh;
			}
		}
		if(this.onLODLevelSelection != null) this.onLODLevelSelection(distanceToCamera,this,this);
		return this;
	}
	,get_geometry: function() {
		return this._geometry;
	}
	,getTotalVertices: function() {
		if(this._geometry == null) return 0;
		return this._geometry.getTotalVertices();
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		if(this._geometry == null) return null;
		return this._geometry.getVerticesData(kind,copyWhenShared);
	}
	,getVertexBuffer: function(kind) {
		if(this._geometry == null) return null;
		return this._geometry.getVertexBuffer(kind);
	}
	,isVerticesDataPresent: function(kind) {
		if(this._geometry == null) {
			if(this._delayInfo != null) return HxOverrides.indexOf(this._delayInfo,kind,0) != -1;
			return false;
		}
		return this._geometry.isVerticesDataPresent(kind);
	}
	,getVerticesDataKinds: function() {
		if(this._geometry == null) {
			var result = [];
			if(this._delayInfo != null) {
				var _g = 0;
				var _g1 = this._delayInfo;
				while(_g < _g1.length) {
					var kind = _g1[_g];
					++_g;
					result.push(kind);
				}
			}
			return result;
		}
		return this._geometry.getVerticesDataKinds();
	}
	,getTotalIndices: function() {
		if(this._geometry == null) return 0;
		return this._geometry.getTotalIndices();
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		if(this._geometry == null) return [];
		return this._geometry.getIndices(copyWhenShared);
	}
	,get_isBlocked: function() {
		return this._masterMesh != null;
	}
	,isReady: function() {
		if(this.delayLoadState == 2) return false;
		return com_babylonhx_mesh_AbstractMesh.prototype.isReady.call(this);
	}
	,isDisposed: function() {
		return this._isDisposed;
	}
	,get_sideOrientation: function() {
		return this._sideOrientation;
	}
	,set_sideOrientation: function(value) {
		this._sideOrientation = value;
		return value;
	}
	,get_areNormalsFrozen: function() {
		return this._areNormalsFrozen;
	}
	,freezeNormals: function() {
		this._areNormalsFrozen = true;
	}
	,unfreezeNormals: function() {
		this._areNormalsFrozen = false;
	}
	,_preActivate: function() {
		var sceneRenderId = this._scene._renderId;
		if(this._preActivateId == sceneRenderId) return;
		this._preActivateId = sceneRenderId;
		this._visibleInstances = null;
	}
	,_registerInstanceForRenderId: function(instance,renderId) {
		if(this._visibleInstances == null) this._visibleInstances = new com_babylonhx_mesh__$VisibleInstances(renderId,this._renderId);
		if(!this._visibleInstances.map.h.hasOwnProperty(renderId)) this._visibleInstances.map.h[renderId] = [];
		this._visibleInstances.map.h[renderId].push(instance);
	}
	,refreshBoundingInfo: function() {
		var data = this.getVerticesData("position");
		if(data != null) {
			var extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,0,this.getTotalVertices());
			this._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
		}
		if(this.subMeshes != null) {
			var _g1 = 0;
			var _g = this.subMeshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.subMeshes[index].refreshBoundingInfo();
			}
		}
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
	}
	,_createGlobalSubMesh: function() {
		var totalVertices = this.getTotalVertices();
		if(totalVertices == 0 || this.getIndices() == null) return null;
		this.releaseSubMeshes();
		return new com_babylonhx_mesh_SubMesh(0,0,totalVertices,0,this.getTotalIndices(),this);
	}
	,subdivide: function(count) {
		if(count < 1) return;
		var totalIndices = this.getTotalIndices();
		var subdivisionSize = totalIndices / count | 0;
		var offset = 0;
		while(subdivisionSize % 3 != 0) subdivisionSize++;
		this.releaseSubMeshes();
		var _g = 0;
		while(_g < count) {
			var index = _g++;
			if(offset >= totalIndices) break;
			com_babylonhx_mesh_SubMesh.CreateFromIndices(0,offset,Std["int"](Math.min(subdivisionSize,totalIndices - offset)),this);
			offset += subdivisionSize;
		}
		this.synchronizeInstances();
	}
	,setVerticesData: function(kind,data,updatable,stride) {
		if(updatable == null) updatable = false;
		if(this._geometry == null) {
			var vertexData = new com_babylonhx_mesh_VertexData();
			vertexData.set(data,kind);
			var scene = this._scene;
			new com_babylonhx_mesh_Geometry(com_babylonhx_mesh_Geometry.RandomId(),scene,vertexData,updatable,this);
		} else this._geometry.setVerticesData(kind,data,updatable,stride);
	}
	,updateVerticesData: function(kind,data,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(updateExtends == null) updateExtends = false;
		if(this._geometry == null) return;
		if(!makeItUnique) this._geometry.updateVerticesData(kind,data,updateExtends); else {
			this.makeGeometryUnique();
			this.updateVerticesData(kind,data,updateExtends,false);
		}
	}
	,updateVerticesDataDirectly: function(kind,data,offset,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(offset == null) offset = 0;
		if(this._geometry == null) return;
		if(!makeItUnique) this._geometry.updateVerticesDataDirectly(kind,data,offset); else {
			this.makeGeometryUnique();
			this.updateVerticesDataDirectly(kind,data,offset,false);
		}
	}
	,updateMeshPositions: function(positionFunction,computeNormals) {
		if(computeNormals == null) computeNormals = true;
		var positions = this.getVerticesData("position");
		positionFunction(positions);
		this.updateVerticesData("position",positions,false,false);
		if(computeNormals) {
			var indices = this.getIndices();
			var normals = this.getVerticesData("normal");
			com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
			this.updateVerticesData("normal",normals,false,false);
		}
	}
	,makeGeometryUnique: function() {
		if(this._geometry == null) return;
		var geometry = this._geometry.copy(com_babylonhx_mesh_Geometry.RandomId());
		geometry.applyToMesh(this);
	}
	,setIndices: function(indices,totalVertices) {
		if(totalVertices == null) totalVertices = -1;
		if(this._geometry == null) {
			var vertexData = new com_babylonhx_mesh_VertexData();
			vertexData.indices = indices;
			var scene = this._scene;
			new com_babylonhx_mesh_Geometry(com_babylonhx_mesh_Geometry.RandomId(),scene,vertexData,false,this);
		} else this._geometry.setIndices(indices,totalVertices);
	}
	,_bind: function(subMesh,effect,fillMode) {
		var engine = this._scene._engine;
		var indexBufferToBind = null;
		switch(fillMode) {
		case 2:
			indexBufferToBind = null;
			break;
		case 1:
			indexBufferToBind = subMesh.getLinesIndexBuffer(this.getIndices(),engine);
			break;
		case 0:
			indexBufferToBind = this._geometry.getIndexBuffer();
			break;
		default:
			indexBufferToBind = this._geometry.getIndexBuffer();
		}
		engine.bindMultiBuffers(this._geometry.getVertexBuffers(),indexBufferToBind,effect);
	}
	,_draw: function(subMesh,fillMode,instancesCount) {
		if(this._geometry == null || this._geometry.getVertexBuffers() == null || this._geometry.getIndexBuffer() == null) return;
		var engine = this._scene._engine;
		switch(fillMode) {
		case 2:
			engine.drawPointClouds(subMesh.verticesStart,subMesh.verticesCount,instancesCount);
			break;
		case 1:
			engine.draw(false,0,subMesh.linesIndexCount,instancesCount);
			break;
		default:
			engine.draw(true,subMesh.indexStart,subMesh.indexCount,instancesCount);
		}
	}
	,registerBeforeRender: function(func) {
		this._onBeforeRenderCallbacks.push(func);
	}
	,unregisterBeforeRender: function(func) {
		var index = HxOverrides.indexOf(this._onBeforeRenderCallbacks,func,0);
		if(index > -1) this._onBeforeRenderCallbacks.splice(index,1);
	}
	,registerAfterRender: function(func) {
		this._onAfterRenderCallbacks.push(func);
	}
	,unregisterAfterRender: function(func) {
		var index = HxOverrides.indexOf(this._onAfterRenderCallbacks,func,0);
		if(index > -1) this._onAfterRenderCallbacks.splice(index,1);
	}
	,_getInstancesRenderList: function(subMeshId) {
		var scene = this._scene;
		this._batchCache.mustReturn = false;
		this._batchCache.renderSelf[subMeshId] = this.isEnabled() && this.isVisible;
		this._batchCache.visibleInstances[subMeshId] = null;
		if(this._visibleInstances != null) {
			var currentRenderId = scene._renderId;
			this._batchCache.visibleInstances[subMeshId] = this._visibleInstances.map.h[currentRenderId];
			var selfRenderId = this._renderId;
			if(this._batchCache.visibleInstances[subMeshId] == null && this._visibleInstances.defaultRenderId > 0) {
				this._batchCache.visibleInstances[subMeshId] = this._visibleInstances.map.h[this._visibleInstances.defaultRenderId];
				currentRenderId = Math.max(this._visibleInstances.defaultRenderId,currentRenderId);
				selfRenderId = Math.max(this._visibleInstances.selfDefaultRenderId,currentRenderId);
			}
			if(this._batchCache.visibleInstances[subMeshId] != null && this._batchCache.visibleInstances[subMeshId].length > 0) {
				if(this._renderIdForInstances[subMeshId] == currentRenderId) {
					this._batchCache.mustReturn = true;
					return this._batchCache;
				}
				if(currentRenderId != selfRenderId) this._batchCache.renderSelf[subMeshId] = false;
			}
			this._renderIdForInstances[subMeshId] = currentRenderId;
		}
		return this._batchCache;
	}
	,_renderWithInstances: function(subMesh,fillMode,batch,effect,engine) {
		var visibleInstances = batch.visibleInstances[subMesh._id];
		var matricesCount = visibleInstances.length + 1;
		var bufferSize = matricesCount * 16 * 4;
		while(this._instancesBufferSize < bufferSize) this._instancesBufferSize *= 2;
		if(this._worldMatricesInstancesBuffer == null || this._worldMatricesInstancesBuffer.capacity < this._instancesBufferSize) {
			if(this._worldMatricesInstancesBuffer != null) engine.deleteInstancesBuffer(this._worldMatricesInstancesBuffer);
			this._worldMatricesInstancesBuffer = engine.createInstancesBuffer(this._instancesBufferSize);
			var elements = this._instancesBufferSize / 4 | 0;
			var this1;
			if(elements != null) this1 = new Float32Array(elements); else this1 = null;
			this._worldMatricesInstancesArray = this1;
		}
		var offset = 0;
		var instancesCount = 0;
		var world = this.getWorldMatrix();
		if(batch.renderSelf[subMesh._id]) {
			world.copyToArray(this._worldMatricesInstancesArray,offset);
			offset += 16;
			instancesCount++;
		}
		if(visibleInstances != null) {
			var _g1 = 0;
			var _g = visibleInstances.length;
			while(_g1 < _g) {
				var instanceIndex = _g1++;
				var instance = visibleInstances[instanceIndex];
				instance.getWorldMatrix().copyToArray(this._worldMatricesInstancesArray,offset);
				offset += 16;
				instancesCount++;
			}
		}
		var offsetLocation0 = effect.getAttributeLocationByName("world0");
		var offsetLocation1 = effect.getAttributeLocationByName("world1");
		var offsetLocation2 = effect.getAttributeLocationByName("world2");
		var offsetLocation3 = effect.getAttributeLocationByName("world3");
		var offsetLocations = [offsetLocation0,offsetLocation1,offsetLocation2,offsetLocation3];
		engine.updateAndBindInstancesBuffer(this._worldMatricesInstancesBuffer,this._worldMatricesInstancesArray,offsetLocations);
		this._draw(subMesh,fillMode,instancesCount);
		engine.unBindInstancesBuffer(this._worldMatricesInstancesBuffer,offsetLocations);
	}
	,_processRendering: function(subMesh,effect,fillMode,batch,hardwareInstancedRendering,onBeforeDraw) {
		var scene = this._scene;
		var engine = scene._engine;
		if(hardwareInstancedRendering) this._renderWithInstances(subMesh,fillMode,batch,effect,engine); else {
			if(batch.renderSelf[subMesh._id]) {
				if(onBeforeDraw != null) onBeforeDraw(false,this.getWorldMatrix());
				this._draw(subMesh,fillMode);
			}
			if(batch.visibleInstances[subMesh._id] != null) {
				var _g1 = 0;
				var _g = batch.visibleInstances[subMesh._id].length;
				while(_g1 < _g) {
					var instanceIndex = _g1++;
					var instance = batch.visibleInstances[subMesh._id][instanceIndex];
					var world = instance.getWorldMatrix();
					if(onBeforeDraw != null) onBeforeDraw(true,world);
					this._draw(subMesh,fillMode);
				}
			}
		}
	}
	,render: function(subMesh,enableAlphaMode) {
		var scene = this._scene;
		var batch = this._getInstancesRenderList(subMesh._id);
		if(batch.mustReturn) return;
		if(this._geometry == null || this._geometry.getVertexBuffers() == null || this._geometry.getIndexBuffer() == null) return;
		var _g1 = 0;
		var _g = this._onBeforeRenderCallbacks.length;
		while(_g1 < _g) {
			var callbackIndex = _g1++;
			this._onBeforeRenderCallbacks[callbackIndex](this);
		}
		var engine = scene._engine;
		var hardwareInstancedRendering = engine.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null && (batch.visibleInstances.length > subMesh._id && batch.visibleInstances[subMesh._id] != null);
		var effectiveMaterial = subMesh.getMaterial();
		if(effectiveMaterial == null || !effectiveMaterial.isReady(this,hardwareInstancedRendering)) return;
		var savedDepthWrite = engine._depthCullingState.get_depthMask();
		if(this.renderOutline) {
			engine._depthCullingState.set_depthMask(false);
			scene._outlineRenderer.render(subMesh,batch);
			engine._depthCullingState.set_depthMask(savedDepthWrite);
		}
		effectiveMaterial._preBind();
		var effect = effectiveMaterial.getEffect();
		var fillMode;
		if(scene.forcePointsCloud) fillMode = 2; else if(scene.forceWireframe) fillMode = 1; else fillMode = effectiveMaterial.get_fillMode();
		this._bind(subMesh,effect,fillMode);
		var world = this.getWorldMatrix();
		effectiveMaterial.bind(world,this);
		if(enableAlphaMode) engine.setAlphaMode(effectiveMaterial.alphaMode);
		this._processRendering(subMesh,effect,fillMode,batch,hardwareInstancedRendering,function(isInstance,world1) {
			if(isInstance) effectiveMaterial.bindOnlyWorldMatrix(world1);
		});
		effectiveMaterial.unbind();
		if(this.renderOutline && savedDepthWrite) {
			engine._depthCullingState.set_depthMask(true);
			lime_graphics_opengl_GL.context.colorMask(false,false,false,false);
			scene._outlineRenderer.render(subMesh,batch);
			lime_graphics_opengl_GL.context.colorMask(true,true,true,true);
		}
		if(this.renderOverlay) {
			var currentMode = engine._alphaMode;
			if(engine._alphaMode == 2) null; else {
				switch(2) {
				case 0:
					engine._depthCullingState.set_depthMask(true);
					engine._alphaState.set_alphaBlend(false);
					break;
				case 2:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 6:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 1:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 3:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 4:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 5:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				}
				engine._alphaMode = 2;
			}
			scene._outlineRenderer.render(subMesh,batch,true);
			if(engine._alphaMode == currentMode) null; else {
				switch(currentMode) {
				case 0:
					engine._depthCullingState.set_depthMask(true);
					engine._alphaState.set_alphaBlend(false);
					break;
				case 2:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 6:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 1:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 3:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 4:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 5:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				}
				engine._alphaMode = currentMode;
			}
		}
		var _g11 = 0;
		var _g2 = this._onAfterRenderCallbacks.length;
		while(_g11 < _g2) {
			var callbackIndex1 = _g11++;
			this._onAfterRenderCallbacks[callbackIndex1](this);
		}
	}
	,getEmittedParticleSystems: function() {
		var results = [];
		var _g1 = 0;
		var _g = this._scene.particleSystems.length;
		while(_g1 < _g) {
			var index = _g1++;
			var particleSystem = this._scene.particleSystems[index];
			if(particleSystem.emitter == this) results.push(particleSystem);
		}
		return results;
	}
	,getHierarchyEmittedParticleSystems: function() {
		var results = [];
		var descendants = this.getDescendants();
		descendants.push(this);
		var _g1 = 0;
		var _g = this._scene.particleSystems.length;
		while(_g1 < _g) {
			var index = _g1++;
			var particleSystem = this._scene.particleSystems[index];
			if((function($this) {
				var $r;
				var x = particleSystem.emitter;
				$r = HxOverrides.indexOf(descendants,x,0);
				return $r;
			}(this)) != -1) results.push(particleSystem);
		}
		return results;
	}
	,getChildren: function() {
		var results = [];
		var _g1 = 0;
		var _g = this._scene.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this._scene.meshes[index];
			if(mesh.parent == this) results.push(mesh);
		}
		return results;
	}
	,_checkDelayState: function() {
		var that = this;
		var scene = this._scene;
		if(this._geometry != null) this._geometry.load(scene); else if(that.delayLoadState == 4) {
			that.delayLoadState = 2;
			scene._addPendingData(that);
			var getBinaryData = this.delayLoadingFile.indexOf(".babylonbinarymeshdata") != -1;
		}
	}
	,isInFrustum: function(frustumPlanes) {
		if(this.delayLoadState == 2) return false;
		if(!com_babylonhx_mesh_AbstractMesh.prototype.isInFrustum.call(this,frustumPlanes)) return false;
		this._checkDelayState();
		return true;
	}
	,setMaterialByID: function(id) {
		var materials = this._scene.materials;
		var _g1 = 0;
		var _g = materials.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(materials[index].id == id) {
				this.set_material(materials[index]);
				return;
			}
		}
		var multiMaterials = this._scene.multiMaterials;
		var _g11 = 0;
		var _g2 = multiMaterials.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			if(multiMaterials[index1].id == id) {
				this.set_material(multiMaterials[index1]);
				return;
			}
		}
	}
	,getAnimatables: function() {
		var results = [];
		if(this.get_material() != null) results.push(this.get_material());
		if(this.get_skeleton() != null) results.push(this.get_skeleton());
		return results;
	}
	,bakeTransformIntoVertices: function(transform) {
		if(!this.isVerticesDataPresent("position")) return;
		this._positions = null;
		var data = this.getVerticesData("position");
		var temp = [];
		var index = 0;
		while(index < data.length) {
			com_babylonhx_math_Vector3.TransformCoordinates(new com_babylonhx_math_Vector3(data[index],data[index + 1],data[index + 2]),transform).toArray(temp,index);
			index += 3;
		}
		this.setVerticesData("position",temp,this.getVertexBuffer("position").isUpdatable());
		if(!this.isVerticesDataPresent("normal")) return;
		data = this.getVerticesData("normal");
		temp = [];
		index = 0;
		while(index < data.length) {
			com_babylonhx_math_Vector3.TransformNormal(new com_babylonhx_math_Vector3(data[index],data[index + 1],data[index + 2]),transform).normalize().toArray(temp,index);
			index += 3;
		}
		this.setVerticesData("normal",temp,this.getVertexBuffer("normal").isUpdatable());
		if(transform.m[0] * transform.m[5] * transform.m[10] < 0) this.flipFaces();
	}
	,bakeCurrentTransformIntoVertices: function() {
		this.bakeTransformIntoVertices(this.computeWorldMatrix(true));
		this.scaling.copyFromFloats(1,1,1);
		this.position.copyFromFloats(0,0,0);
		this.rotation.copyFromFloats(0,0,0);
		if(this.rotationQuaternion != null) this.rotationQuaternion = new com_babylonhx_math_Quaternion(0,0,0,1);
		this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,_resetPointsArrayCache: function() {
		this._positions = null;
	}
	,_generatePointsArray: function() {
		if(this._positions != null) return true;
		this._positions = [];
		var data = this.getVerticesData("position");
		if(data == null) return false;
		var index = 0;
		while(index < data.length) {
			this._positions.push(new com_babylonhx_math_Vector3(data[index],data[index + 1],data[index + 2]));
			index += 3;
		}
		return true;
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		return new com_babylonhx_mesh_Mesh(name,this._scene,newParent,this,doNotCloneChildren);
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		if(this._geometry != null) this._geometry.releaseForMesh(this,true);
		if(this._worldMatricesInstancesBuffer != null) {
			this._scene._engine.deleteInstancesBuffer(this._worldMatricesInstancesBuffer);
			this._worldMatricesInstancesBuffer = null;
		}
		while(this.instances.length > 0) this.instances[0].dispose();
		com_babylonhx_mesh_AbstractMesh.prototype.dispose.call(this,doNotRecurse);
	}
	,applyDisplacementMap: function(url,minHeight,maxHeight,onSuccess,invert) {
		if(invert == null) invert = false;
		var _g = this;
		var scene = this._scene;
		var onload = function(img) {
			_g.applyDisplacementMapFromBuffer(img.data,img.width,img.height,minHeight,maxHeight,invert);
			if(onSuccess != null) onSuccess(_g);
		};
		com_babylonhx_tools_Tools.LoadImage(url,onload);
	}
	,applyDisplacementMapFromBuffer: function(buffer,heightMapWidth,heightMapHeight,minHeight,maxHeight,invert) {
		if(invert == null) invert = false;
		if(!this.isVerticesDataPresent("position") || !this.isVerticesDataPresent("normal") || !this.isVerticesDataPresent("uv") || !this.getVertexBuffer("position").isUpdatable() || !this.getVertexBuffer("normal").isUpdatable()) {
			haxe_Log.trace("Cannot call applyDisplacementMap:Given mesh is not complete. Position, Normal or UV are missing or not updatable!",{ fileName : "Mesh.hx", lineNumber : 1167, className : "com.babylonhx.mesh.Mesh", methodName : "applyDisplacementMapFromBuffer"});
			return;
		}
		var positions = this.getVerticesData("position");
		var normals = this.getVerticesData("normal");
		var uvs = this.getVerticesData("uv");
		var position = new com_babylonhx_math_Vector3(0,0,0);
		var normal = new com_babylonhx_math_Vector3(0,0,0);
		var uv = new com_babylonhx_math_Vector2(0,0);
		var index = 0;
		while(index < positions.length) {
			position.x = positions[index];
			position.y = positions[index + 1];
			position.z = positions[index + 2];
			normal.x = normals[index];
			normal.y = normals[index + 1];
			normal.z = normals[index + 2];
			com_babylonhx_math_Vector2.FromArrayToRef(uvs,index / 3 * 2 | 0,uv);
			var u = Std["int"](Math.abs(uv.x) * heightMapWidth % heightMapWidth);
			var v = Std["int"](Math.abs(uv.y) * heightMapHeight % heightMapHeight);
			var pos = (u + v * heightMapWidth) * 4 | 0;
			var r = _$UInt_UInt_$Impl_$.toFloat(buffer[pos]) / 255.0;
			var g = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 1]) / 255.0;
			var b = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 2]) / 255.0;
			var gradient = r * 0.3 + g * 0.59 + b * 0.11;
			normal.normalize();
			normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);
			if(invert) {
				normal.x *= -1;
				normal.y *= -1;
				normal.z *= -1;
				normal;
			}
			position = new com_babylonhx_math_Vector3(position.x + normal.x,position.y + normal.y,position.z + normal.z);
			positions[index] = position.x;
			positions[index + 1] = position.y;
			positions[index + 2] = position.z;
			index += 3;
		}
		com_babylonhx_mesh_VertexData.ComputeNormals(positions,this.getIndices(),normals);
		this.updateVerticesData("position",positions);
		this.updateVerticesData("normal",normals);
	}
	,convertToFlatShadedMesh: function() {
		var kinds = this.getVerticesDataKinds();
		var vbs = new haxe_ds_StringMap();
		var data = new haxe_ds_StringMap();
		var newdata = new haxe_ds_StringMap();
		var updatableNormals = false;
		var kindIndex = 0;
		while(kindIndex < kinds.length) {
			var kind = kinds[kindIndex];
			var vertexBuffer = this.getVertexBuffer(kind);
			if(kind == "normal") {
				updatableNormals = vertexBuffer._updatable;
				kinds.splice(kindIndex,1);
				kindIndex--;
				continue;
			}
			{
				if(__map_reserved[kind] != null) vbs.setReserved(kind,vertexBuffer); else vbs.h[kind] = vertexBuffer;
				vertexBuffer;
			}
			var v = (__map_reserved[kind] != null?vbs.getReserved(kind):vbs.h[kind]).getData();
			if(__map_reserved[kind] != null) data.setReserved(kind,v); else data.h[kind] = v;
			v;
			var v1 = [];
			if(__map_reserved[kind] != null) newdata.setReserved(kind,v1); else newdata.h[kind] = v1;
			v1;
			kindIndex++;
		}
		var previousSubmeshes = this.subMeshes.slice(0);
		var indices = this.getIndices();
		var totalIndices = this.getTotalIndices();
		var _g = 0;
		while(_g < totalIndices) {
			var index1 = _g++;
			var vertexIndex = indices[index1];
			var _g2 = 0;
			var _g1 = kinds.length;
			while(_g2 < _g1) {
				var kindIndex1 = _g2++;
				var kind1 = kinds[kindIndex1];
				var stride = (__map_reserved[kind1] != null?vbs.getReserved(kind1):vbs.h[kind1]).getStrideSize();
				var _g3 = 0;
				while(_g3 < stride) {
					var offset = _g3++;
					(__map_reserved[kind1] != null?newdata.getReserved(kind1):newdata.h[kind1]).push((__map_reserved[kind1] != null?data.getReserved(kind1):data.h[kind1])[vertexIndex * stride + offset]);
				}
			}
		}
		var normals = [];
		var positions;
		positions = __map_reserved.position != null?newdata.getReserved("position"):newdata.h["position"];
		var index = 0;
		while(index < totalIndices) {
			indices[index] = index;
			indices[index + 1] = index + 1;
			indices[index + 2] = index + 2;
			var p1 = com_babylonhx_math_Vector3.FromArray(positions,index * 3);
			var p2 = com_babylonhx_math_Vector3.FromArray(positions,(index + 1) * 3);
			var p3 = com_babylonhx_math_Vector3.FromArray(positions,(index + 2) * 3);
			var p1p2 = new com_babylonhx_math_Vector3(p1.x - p2.x,p1.y - p2.y,p1.z - p2.z);
			var p3p2 = new com_babylonhx_math_Vector3(p3.x - p2.x,p3.y - p2.y,p3.z - p2.z);
			var normal = com_babylonhx_math_Vector3.Normalize(com_babylonhx_math_Vector3.Cross(p1p2,p3p2));
			var _g4 = 0;
			while(_g4 < 3) {
				var localIndex = _g4++;
				normals.push(normal.x);
				normals.push(normal.y);
				normals.push(normal.z);
			}
			index += 3;
		}
		this.setIndices(indices);
		this.setVerticesData("normal",normals,updatableNormals);
		var _g11 = 0;
		var _g5 = kinds.length;
		while(_g11 < _g5) {
			var kindIndex2 = _g11++;
			var kind2 = kinds[kindIndex2];
			this.setVerticesData(kind2,__map_reserved[kind2] != null?newdata.getReserved(kind2):newdata.h[kind2],(__map_reserved[kind2] != null?vbs.getReserved(kind2):vbs.h[kind2]).isUpdatable());
		}
		this.releaseSubMeshes();
		var _g12 = 0;
		var _g6 = previousSubmeshes.length;
		while(_g12 < _g6) {
			var submeshIndex = _g12++;
			var previousOne = previousSubmeshes[submeshIndex];
			var subMesh = new com_babylonhx_mesh_SubMesh(previousOne.materialIndex,previousOne.indexStart,previousOne.indexCount,previousOne.indexStart,previousOne.indexCount,this);
		}
		this.synchronizeInstances();
	}
	,flipFaces: function(flipNormals) {
		if(flipNormals == null) flipNormals = false;
		var vertex_data = com_babylonhx_mesh_VertexData.ExtractFromMesh(this);
		if(flipNormals && this.isVerticesDataPresent("normal")) {
			var _g1 = 0;
			var _g = vertex_data.normals.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				vertex_data.normals[i1] *= -1;
			}
		}
		var temp = 0;
		var i = 0;
		while(i < vertex_data.indices.length) {
			temp = vertex_data.indices[i + 1];
			vertex_data.indices[i + 1] = vertex_data.indices[i + 2];
			vertex_data.indices[i + 2] = temp;
			i += 3;
		}
		vertex_data.applyToMesh(this);
	}
	,createInstance: function(name) {
		return new com_babylonhx_mesh_InstancedMesh(name,this);
	}
	,synchronizeInstances: function() {
		var _g1 = 0;
		var _g = this.instances.length;
		while(_g1 < _g) {
			var instanceIndex = _g1++;
			var instance = this.instances[instanceIndex];
			instance._syncSubMeshes();
		}
	}
	,simplify: function(settings,parallelProcessing,simplificationType,successCallback) {
		if(simplificationType == null) simplificationType = 0;
		if(parallelProcessing == null) parallelProcessing = true;
		this._scene.simplificationQueue.addTask(new com_babylonhx_mesh_simplification_SimplificationTask(settings,simplificationType,this,successCallback,parallelProcessing));
	}
	,optimizeIndices: function(successCallback) {
		var _g = this;
		var indices = this.getIndices();
		var positions = this.getVerticesData("position");
		var vectorPositions = [];
		var pos = 0;
		while(pos < positions.length) {
			vectorPositions.push(new com_babylonhx_math_Vector3(positions[pos],positions[pos + 1],positions[pos + 2]));
			pos += 3;
		}
		var dupes = [];
		com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(vectorPositions.length,40,function(iteration) {
			var realPos = vectorPositions.length - 1 - iteration;
			var testedPosition = vectorPositions[realPos];
			var _g1 = 0;
			while(_g1 < realPos) {
				var j = _g1++;
				var againstPosition = vectorPositions[j];
				if(againstPosition != null && testedPosition.x == againstPosition.x && testedPosition.y == againstPosition.y && testedPosition.z == againstPosition.z) {
					dupes[realPos] = j;
					break;
				}
			}
		},function() {
			var _g11 = 0;
			var _g2 = indices.length;
			while(_g11 < _g2) {
				var i = _g11++;
				indices[i] = dupes[indices[i]];
			}
			var originalSubMeshes = _g.subMeshes.slice(0);
			_g.setIndices(indices);
			_g.subMeshes = originalSubMeshes;
			if(successCallback != null) successCallback(_g);
		});
	}
	,setPositionsForCPUSkinning: function() {
		var source = null;
		if(this._sourcePositions == null) {
			source = this.getVerticesData("position");
			this._sourcePositions = source;
			if(!this.getVertexBuffer("position").isUpdatable()) this.setVerticesData("position",source,true);
		}
		return this._sourcePositions;
	}
	,setNormalsForCPUSkinning: function() {
		var source = null;
		if(this._sourceNormals == null) {
			source = this.getVerticesData("normal");
			this._sourceNormals = source;
			if(!this.getVertexBuffer("normal").isUpdatable()) this.setVerticesData("normal",source,true);
		}
		return this._sourceNormals;
	}
	,applySkeleton: function(skeleton) {
		if(!this.isVerticesDataPresent("position")) return this;
		if(!this.isVerticesDataPresent("normal")) return this;
		if(!this.isVerticesDataPresent("matricesIndices")) return this;
		if(!this.isVerticesDataPresent("matricesWeights")) return this;
		if(this._sourcePositions == null) {
			var source = this.getVerticesData("position");
			this._sourcePositions = source;
			if(!this.getVertexBuffer("position").isUpdatable()) this.setVerticesData("position",source,true);
		}
		if(this._sourceNormals == null) {
			var source1 = this.getVerticesData("normal");
			this._sourceNormals = source1;
			if(!this.getVertexBuffer("normal").isUpdatable()) this.setVerticesData("normal",source1,true);
		}
		var positionsData = this.getVerticesData("position");
		var normalsData = this.getVerticesData("normal");
		var matricesIndicesData = this.getVerticesData("matricesIndices");
		var matricesWeightsData = this.getVerticesData("matricesWeights");
		var needExtras = this.numBoneInfluencers > 4;
		var matricesIndicesExtraData;
		if(needExtras) matricesIndicesExtraData = this.getVerticesData("matricesIndicesExtra"); else matricesIndicesExtraData = null;
		var matricesWeightsExtraData;
		if(needExtras) matricesWeightsExtraData = this.getVerticesData("matricesWeightsExtra"); else matricesWeightsExtraData = null;
		var skeletonMatrices = skeleton._transformMatrices;
		var tempVector3 = new com_babylonhx_math_Vector3(0,0,0);
		var finalMatrix = new com_babylonhx_math_Matrix();
		var tempMatrix = new com_babylonhx_math_Matrix();
		var matWeightIdx = 0;
		var index = 0;
		while(index < positionsData.length) {
			var _g = 0;
			while(_g < 4) {
				var inf = _g++;
				var weight = matricesWeightsData[matWeightIdx + inf];
				if(weight > 0) {
					com_babylonhx_math_Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices,matricesIndicesData[matWeightIdx + inf] * 16,weight,tempMatrix);
					finalMatrix.addToSelf(tempMatrix);
				} else break;
			}
			matWeightIdx += 4;
			if(needExtras) {
				var _g1 = 0;
				while(_g1 < 4) {
					var inf1 = _g1++;
					var weight1 = matricesWeightsExtraData[matWeightIdx + inf1];
					if(weight1 > 0) {
						com_babylonhx_math_Matrix.FromFloat32ArrayToRefScaled((function($this) {
							var $r;
							var this1;
							if(skeletonMatrices != null) this1 = new Float32Array(skeletonMatrices); else this1 = null;
							$r = this1;
							return $r;
						}(this)),matricesIndicesExtraData[matWeightIdx + inf1] * 16,weight1,tempMatrix);
						finalMatrix.addToSelf(tempMatrix);
					} else break;
				}
			}
			com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(this._sourcePositions[index],this._sourcePositions[index + 1],this._sourcePositions[index + 2],finalMatrix,tempVector3);
			positionsData[index] = tempVector3.x;
			positionsData[index + 1] = tempVector3.y;
			positionsData[index + 2] = tempVector3.z;
			com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef(this._sourceNormals[index],this._sourceNormals[index + 1],this._sourceNormals[index + 2],finalMatrix,tempVector3);
			normalsData[index] = tempVector3.x;
			normalsData[index + 1] = tempVector3.y;
			normalsData[index + 2] = tempVector3.z;
			finalMatrix.reset();
			index += 3;
		}
		this.updateVerticesData("position",positionsData);
		this.updateVerticesData("normal",normalsData);
		return this;
	}
	,__class__: com_babylonhx_mesh_Mesh
	,__properties__: $extend(com_babylonhx_mesh_AbstractMesh.prototype.__properties__,{get_geometry:"get_geometry",get_hasLODLevels:"get_hasLODLevels",get_areNormalsFrozen:"get_areNormalsFrozen",set_sideOrientation:"set_sideOrientation",get_sideOrientation:"get_sideOrientation"})
});
var com_babylonhx_mesh_GroundMesh = $hx_exports.BABYLON.GroundMesh = function(name,scene) {
	this._worldInverse = new com_babylonhx_math_Matrix();
	this.generateOctree = false;
	com_babylonhx_mesh_Mesh.call(this,name,scene);
};
$hxClasses["com.babylonhx.mesh.GroundMesh"] = com_babylonhx_mesh_GroundMesh;
com_babylonhx_mesh_GroundMesh.__name__ = true;
com_babylonhx_mesh_GroundMesh.__super__ = com_babylonhx_mesh_Mesh;
com_babylonhx_mesh_GroundMesh.prototype = $extend(com_babylonhx_mesh_Mesh.prototype,{
	optimize: function(chunksCount,octreeBlocksSize) {
		if(octreeBlocksSize == null) octreeBlocksSize = 32;
		this._subdivisions = chunksCount;
		this.subdivide(this._subdivisions);
		this.createOrUpdateSubmeshesOctree(octreeBlocksSize,null);
	}
	,getHeightAtCoordinates: function(x,z) {
		var ray = new com_babylonhx_math_Ray(new com_babylonhx_math_Vector3(x,this.getBoundingInfo().boundingBox.maximumWorld.y + 1,z),new com_babylonhx_math_Vector3(0,-1,0));
		this.getWorldMatrix().invertToRef(this._worldInverse);
		ray = com_babylonhx_math_Ray.Transform(ray,this._worldInverse);
		var pickInfo = this.intersects(ray);
		if(pickInfo.hit) return pickInfo.pickedPoint.y;
		return 0;
	}
	,__class__: com_babylonhx_mesh_GroundMesh
});
var com_babylonhx_mesh_InstancedMesh = $hx_exports.BABYLON.InstancedMesh = function(name,source) {
	com_babylonhx_mesh_AbstractMesh.call(this,name,source._scene);
	source.instances.push(this);
	this._sourceMesh = source;
	this.position.copyFrom(source.position);
	this.rotation.copyFrom(source.rotation);
	this.scaling.copyFrom(source.scaling);
	if(source.rotationQuaternion != null) this.rotationQuaternion = source.rotationQuaternion.clone();
	this.infiniteDistance = source.infiniteDistance;
	this._pivotMatrix = source._pivotMatrix;
	this._cache.pivotMatrixUpdated = true;
	this.refreshBoundingInfo();
	this._syncSubMeshes();
};
$hxClasses["com.babylonhx.mesh.InstancedMesh"] = com_babylonhx_mesh_InstancedMesh;
com_babylonhx_mesh_InstancedMesh.__name__ = true;
com_babylonhx_mesh_InstancedMesh.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_mesh_InstancedMesh.__super__ = com_babylonhx_mesh_AbstractMesh;
com_babylonhx_mesh_InstancedMesh.prototype = $extend(com_babylonhx_mesh_AbstractMesh.prototype,{
	get_receiveShadows: function() {
		return this._sourceMesh.get_receiveShadows();
	}
	,get_material: function() {
		return this._sourceMesh.get_material();
	}
	,get_visibility: function() {
		return this._sourceMesh.get_visibility();
	}
	,get_skeleton: function() {
		return this._sourceMesh.get_skeleton();
	}
	,getTotalVertices: function() {
		return this._sourceMesh.getTotalVertices();
	}
	,get_sourceMesh: function() {
		return this._sourceMesh;
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return this._sourceMesh.getVerticesData(kind,copyWhenShared);
	}
	,isVerticesDataPresent: function(kind) {
		return this._sourceMesh.isVerticesDataPresent(kind);
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return this._sourceMesh.getIndices(copyWhenShared);
	}
	,get_positions: function() {
		return this._sourceMesh._positions;
	}
	,refreshBoundingInfo: function() {
		var meshBB = this._sourceMesh.getBoundingInfo();
		this._boundingInfo = new com_babylonhx_culling_BoundingInfo(meshBB.minimum.clone(),meshBB.maximum.clone());
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
	}
	,_preActivate: function() {
		if(this._currentLOD != null) this._currentLOD._preActivate();
	}
	,_activate: function(renderId) {
		if(this._currentLOD != null) this.get_sourceMesh()._registerInstanceForRenderId(this,renderId);
	}
	,getLOD: function(camera,boundingSphere) {
		this._currentLOD = this.get_sourceMesh().getLOD(this._scene.activeCamera,this.getBoundingInfo().boundingSphere);
		if(this._currentLOD == this.get_sourceMesh()) return this;
		return this._currentLOD;
	}
	,_syncSubMeshes: function() {
		this.releaseSubMeshes();
		if(this._sourceMesh.subMeshes != null) {
			var _g1 = 0;
			var _g = this._sourceMesh.subMeshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				this._sourceMesh.subMeshes[index].clone(this,this._sourceMesh);
			}
		}
	}
	,_generatePointsArray: function() {
		return this._sourceMesh._generatePointsArray();
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		var result = this._sourceMesh.createInstance(name);
		this.refreshBoundingInfo();
		if(newParent != null) result.parent = newParent;
		if(!doNotCloneChildren) {
			var _g1 = 0;
			var _g = this._scene.meshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				var mesh = this._scene.meshes[index];
				if(mesh.parent == this) mesh.clone(mesh.name,result);
			}
		}
		result.computeWorldMatrix(true);
		return result;
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		HxOverrides.remove(this._sourceMesh.instances,this);
		com_babylonhx_mesh_AbstractMesh.prototype.dispose.call(this,doNotRecurse);
	}
	,__class__: com_babylonhx_mesh_InstancedMesh
	,__properties__: $extend(com_babylonhx_mesh_AbstractMesh.prototype.__properties__,{get_sourceMesh:"get_sourceMesh"})
});
var com_babylonhx_mesh_LinesMesh = $hx_exports.BABYLON.LinesMesh = function(name,scene,parent,source,doNotCloneChildren) {
	if(doNotCloneChildren == null) doNotCloneChildren = false;
	this.gapSize = 0;
	this.dashSize = 0;
	this.alpha = 1;
	this.color = new com_babylonhx_math_Color3(1,1,1);
	com_babylonhx_mesh_Mesh.call(this,name,scene,parent,source,doNotCloneChildren);
	this._colorShader = new com_babylonhx_materials_ShaderMaterial("colorShader",scene,"color",{ attributes : ["position"], uniforms : ["worldViewProjection","color"], needAlphaBlending : true});
};
$hxClasses["com.babylonhx.mesh.LinesMesh"] = com_babylonhx_mesh_LinesMesh;
com_babylonhx_mesh_LinesMesh.__name__ = true;
com_babylonhx_mesh_LinesMesh.__super__ = com_babylonhx_mesh_Mesh;
com_babylonhx_mesh_LinesMesh.prototype = $extend(com_babylonhx_mesh_Mesh.prototype,{
	get_material: function() {
		return this._colorShader;
	}
	,get_isPickable: function() {
		return false;
	}
	,get_checkCollisions: function() {
		return false;
	}
	,_bind: function(subMesh,effect,fillMode) {
		var engine = this._scene._engine;
		var indexToBind = this._geometry.getIndexBuffer();
		engine.bindBuffers(this._geometry.getVertexBuffer("position").getBuffer(),indexToBind,[3],12,this._colorShader.getEffect());
		this._colorShader.setColor4("color",this.color.toColor4(this.alpha));
	}
	,_draw: function(subMesh,fillMode,instancesCount) {
		if(this._geometry == null || this._geometry.getVertexBuffers() == null || this._geometry.getIndexBuffer() == null) return;
		var engine = this._scene._engine;
		engine.draw(false,subMesh.indexStart,subMesh.indexCount);
	}
	,intersects: function(ray,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		return null;
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		this._colorShader.dispose();
		com_babylonhx_mesh_Mesh.prototype.dispose.call(this,doNotRecurse);
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		return new com_babylonhx_mesh_LinesMesh(name,this._scene,newParent,this,doNotCloneChildren);
	}
	,__class__: com_babylonhx_mesh_LinesMesh
});
var com_babylonhx_mesh_VertexData = $hx_exports.BABYLON.VertexData = function() {
};
$hxClasses["com.babylonhx.mesh.VertexData"] = com_babylonhx_mesh_VertexData;
com_babylonhx_mesh_VertexData.__name__ = true;
com_babylonhx_mesh_VertexData.ExtractFromMesh = function(mesh,copyWhenShared) {
	if(copyWhenShared == null) copyWhenShared = false;
	return com_babylonhx_mesh_VertexData._ExtractFrom(mesh,copyWhenShared);
};
com_babylonhx_mesh_VertexData.ExtractFromGeometry = function(geometry,copyWhenShared) {
	if(copyWhenShared == null) copyWhenShared = false;
	return com_babylonhx_mesh_VertexData._ExtractFrom(geometry,copyWhenShared);
};
com_babylonhx_mesh_VertexData._ExtractFrom = function(meshOrGeometry,copyWhenShared) {
	if(copyWhenShared == null) copyWhenShared = false;
	var result = new com_babylonhx_mesh_VertexData();
	if(meshOrGeometry.isVerticesDataPresent("position")) result.positions = meshOrGeometry.getVerticesData("position",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("normal")) result.normals = meshOrGeometry.getVerticesData("normal",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv")) result.uvs = meshOrGeometry.getVerticesData("uv",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv2")) result.uv2s = meshOrGeometry.getVerticesData("uv2",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv3")) result.uv3s = meshOrGeometry.getVerticesData("uv3",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv4")) result.uv4s = meshOrGeometry.getVerticesData("uv4",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv5")) result.uv5s = meshOrGeometry.getVerticesData("uv5",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv6")) result.uv6s = meshOrGeometry.getVerticesData("uv6",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("color")) result.colors = meshOrGeometry.getVerticesData("color",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("matricesIndices")) result.matricesIndices = meshOrGeometry.getVerticesData("matricesIndices",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("matricesWeights")) result.matricesWeights = meshOrGeometry.getVerticesData("matricesWeights",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("matricesIndicesExtra")) result.matricesIndicesExtra = meshOrGeometry.getVerticesData("matricesIndicesExtra",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("matricesWeightsExtra")) result.matricesWeightsExtra = meshOrGeometry.getVerticesData("matricesWeightsExtra",copyWhenShared);
	result.indices = meshOrGeometry.getIndices(copyWhenShared);
	return result;
};
com_babylonhx_mesh_VertexData.CreateRibbon = function(options) {
	var pathArray = options.pathArray;
	var closeArray;
	if(options.closeArray != null) closeArray = options.closeArray; else closeArray = false;
	var closePath;
	if(options.closePath != null) closePath = options.closePath; else closePath = false;
	var defaultOffset = Math.floor(pathArray[0].length / 2);
	var offset;
	if(options.offset != null) offset = options.offset; else offset = defaultOffset;
	if(offset > defaultOffset) offset = defaultOffset; else offset = Math.floor(offset);
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var us = [];
	var vs = [];
	var uTotalDistance = [];
	var vTotalDistance = [];
	var minlg = 0;
	var vectlg = 0;
	var dist = 0;
	var lg = [];
	var idx = [];
	var p = 0;
	var i = 0;
	var j = 0;
	if(pathArray.length < 2) {
		var ar1 = [];
		var ar2 = [];
		var _g1 = 0;
		var _g = pathArray[0].length - offset;
		while(_g1 < _g) {
			var i1 = _g1++;
			ar1.push(pathArray[0][i1]);
			ar2.push(pathArray[0][i1 + offset]);
		}
		pathArray = [ar1,ar2];
	}
	var idc = 0;
	var closePathCorr;
	if(closePath) closePathCorr = 1; else closePathCorr = 0;
	var path = [];
	var l = 0;
	minlg = pathArray[0].length;
	var _g11 = 0;
	var _g2 = pathArray.length;
	while(_g11 < _g2) {
		var p1 = _g11++;
		uTotalDistance[p1] = 0;
		us[p1] = [0];
		path = pathArray[p1];
		l = path.length;
		if(minlg < l) minlg = minlg; else minlg = l;
		j = 0;
		while(j < l) {
			positions.push(path[j].x);
			positions.push(path[j].y);
			positions.push(path[j].z);
			if(j > 0) {
				var vectlg1 = path[j].subtract(path[j - 1]).length();
				var dist1 = vectlg1 + uTotalDistance[p1];
				us[p1].push(dist1);
				uTotalDistance[p1] = dist1;
			}
			j++;
		}
		if(closePath) {
			j--;
			positions.push(path[0].x);
			positions.push(path[0].y);
			positions.push(path[0].z);
			vectlg = path[j].subtract(path[0]).length();
			dist = vectlg + uTotalDistance[p1];
			us[p1].push(dist);
			uTotalDistance[p1] = dist;
		}
		lg[p1] = l + closePathCorr;
		idx[p1] = idc;
		idc += l + closePathCorr;
	}
	var path1 = [];
	var path2 = [];
	var vertex1;
	var vertex2;
	var _g12 = 0;
	var _g3 = minlg + closePathCorr;
	while(_g12 < _g3) {
		var i2 = _g12++;
		vTotalDistance[i2] = 0;
		vs[i2] = [0];
		var _g31 = 0;
		var _g21 = pathArray.length - 1;
		while(_g31 < _g21) {
			var p2 = _g31++;
			path1 = pathArray[p2];
			path2 = pathArray[p2 + 1];
			if(i2 == minlg) {
				vertex1 = path1[0];
				vertex2 = path2[0];
			} else {
				vertex1 = path1[i2];
				vertex2 = path2[i2];
			}
			vectlg = new com_babylonhx_math_Vector3(vertex2.x - vertex1.x,vertex2.y - vertex1.y,vertex2.z - vertex1.z).length();
			dist = vectlg + vTotalDistance[i2];
			vs[i2].push(dist);
			vTotalDistance[i2] = dist;
		}
		if(closeArray) {
			path1 = pathArray[p];
			path2 = pathArray[0];
			vectlg = path2[i2].subtract(path1[i2]).length();
			dist = vectlg + vTotalDistance[i2];
			vTotalDistance[i2] = dist;
		}
	}
	var u = 0;
	var v = 0;
	var _g13 = 0;
	var _g4 = pathArray.length;
	while(_g13 < _g4) {
		var p3 = _g13++;
		var _g32 = 0;
		var _g22 = minlg + closePathCorr;
		while(_g32 < _g22) {
			var i3 = _g32++;
			u = us[p3][i3] / uTotalDistance[p3];
			v = vs[i3][p3] / vTotalDistance[i3];
			uvs.push(u);
			uvs.push(v);
		}
	}
	p = 0;
	var pi = 0;
	var l1 = lg[p] - 1;
	var l2 = lg[p + 1] - 1;
	var min;
	if(l1 < l2) min = l1; else min = l2;
	var shft = idx[1] - idx[0];
	var path1nb;
	if(closeArray) path1nb = lg.length; else path1nb = lg.length - 1;
	while(pi <= min && p < path1nb) {
		indices.push(pi);
		indices.push(pi + shft);
		indices.push(pi + 1);
		indices.push(pi + shft + 1);
		indices.push(pi + 1);
		indices.push(pi + shft);
		pi += 1;
		if(pi == min) {
			p++;
			if(p == lg.length - 1) {
				shft = idx[0] - idx[p];
				l1 = lg[p] - 1;
				l2 = lg[0] - 1;
			} else {
				shft = idx[p + 1] - idx[p];
				l1 = lg[p] - 1;
				l2 = lg[p + 1] - 1;
			}
			pi = idx[p];
			if(l1 < l2) min = l1 + pi; else min = l2 + pi;
		}
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	if(closePath) {
		var indexFirst = 0;
		var indexLast = 0;
		var _g14 = 0;
		var _g5 = pathArray.length;
		while(_g14 < _g5) {
			var p4 = _g14++;
			indexFirst = idx[p4] * 3;
			if(p4 + 1 < pathArray.length) indexLast = (idx[p4 + 1] - 1) * 3; else indexLast = normals.length - 3;
			normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;
			normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;
			normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;
			normals[indexLast] = normals[indexFirst];
			normals[indexLast + 1] = normals[indexFirst + 1];
			normals[indexLast + 2] = normals[indexFirst + 2];
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	if(closePath) vertexData._idx = idx;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateBox = function(options) {
	var normalsSource = [new com_babylonhx_math_Vector3(0,0,1),new com_babylonhx_math_Vector3(0,0,-1),new com_babylonhx_math_Vector3(1,0,0),new com_babylonhx_math_Vector3(-1,0,0),new com_babylonhx_math_Vector3(0,1,0),new com_babylonhx_math_Vector3(0,-1,0)];
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var width = options.width;
	var height = options.height;
	var depth = options.depth;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var faceUV;
	if(options.faceUV != null) faceUV = options.faceUV; else faceUV = [];
	var faceColors = options.faceColors;
	var colors = [];
	var _g = 0;
	while(_g < 6) {
		var f = _g++;
		if(faceUV[f] == null) faceUV[f] = new com_babylonhx_math_Vector4(0,0,1,1);
		if(faceColors != null && faceColors[f] == null) faceColors[f] = new com_babylonhx_math_Color4(1,1,1,1);
	}
	var scaleVector = new com_babylonhx_math_Vector3(width / 2,height / 2,depth / 2);
	var _g1 = 0;
	var _g2 = normalsSource.length;
	while(_g1 < _g2) {
		var index = _g1++;
		var normal = normalsSource[index];
		var side1 = new com_babylonhx_math_Vector3(normal.y,normal.z,normal.x);
		var side2 = com_babylonhx_math_Vector3.Cross(normal,side1);
		var verticesLength = positions.length / 3 | 0;
		indices.push(verticesLength);
		indices.push(verticesLength + 1);
		indices.push(verticesLength + 2);
		indices.push(verticesLength);
		indices.push(verticesLength + 2);
		indices.push(verticesLength + 3);
		var vertex = new com_babylonhx_math_Vector3(normal.x - side1.x,normal.y - side1.y,normal.z - side1.z).subtract(side2).multiply(scaleVector);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(1.0);
		uvs.push(1.0);
		if(faceColors != null) {
			colors.push(faceColors[index].r);
			colors.push(faceColors[index].g);
			colors.push(faceColors[index].b);
			colors.push(faceColors[index].a);
		}
		vertex = new com_babylonhx_math_Vector3(normal.x - side1.x,normal.y - side1.y,normal.z - side1.z).add(side2).multiply(scaleVector);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(0.0);
		uvs.push(1.0);
		if(faceColors != null) {
			colors.push(faceColors[index].r);
			colors.push(faceColors[index].g);
			colors.push(faceColors[index].b);
			colors.push(faceColors[index].a);
		}
		vertex = new com_babylonhx_math_Vector3(normal.x + side1.x,normal.y + side1.y,normal.z + side1.z).add(side2).multiply(scaleVector);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(0.0);
		uvs.push(0.0);
		if(faceColors != null) {
			colors.push(faceColors[index].r);
			colors.push(faceColors[index].g);
			colors.push(faceColors[index].b);
			colors.push(faceColors[index].a);
		}
		vertex = new com_babylonhx_math_Vector3(normal.x + side1.x,normal.y + side1.y,normal.z + side1.z).subtract(side2).multiply(scaleVector);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(1.0);
		uvs.push(0.0);
		if(faceColors != null) {
			colors.push(faceColors[index].r);
			colors.push(faceColors[index].g);
			colors.push(faceColors[index].b);
			colors.push(faceColors[index].a);
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	if(faceColors != null && faceColors.length > 0) {
		var totalColors;
		if(sideOrientation == 2) totalColors = colors.concat(colors); else totalColors = colors;
		vertexData.colors = totalColors;
	}
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateSphere = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var segments;
	if(options.segments != null) segments = options.segments; else segments = 32;
	var diameterX;
	if(options.diameterX != null) diameterX = options.diameterX; else diameterX = 1;
	var diameterY;
	if(options.diameterY != null) diameterY = options.diameterY; else diameterY = 1;
	var diameterZ;
	if(options.diameterZ != null) diameterZ = options.diameterZ; else diameterZ = 1;
	var arc;
	if(options.arc != null) arc = options.arc; else arc = 1.0;
	if(arc < 0) arc = 1.0;
	var slice;
	if(options.slice) slice = options.slice; else slice = 1.0;
	if(slice < 0) slice = 1.0;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var radius = new com_babylonhx_math_Vector3(diameterX / 2,diameterY / 2,diameterZ / 2);
	var totalZRotationSteps = 2 + segments;
	var totalYRotationSteps = 2 * totalZRotationSteps;
	var _g1 = 0;
	var _g = totalZRotationSteps + 1;
	while(_g1 < _g) {
		var zRotationStep = _g1++;
		var normalizedZ = zRotationStep / totalZRotationSteps;
		var angleZ = normalizedZ * Math.PI;
		var _g3 = 0;
		var _g2 = totalYRotationSteps + 1;
		while(_g3 < _g2) {
			var yRotationStep = _g3++;
			var normalizedY = yRotationStep / totalYRotationSteps;
			var angleY = normalizedY * Math.PI * 2;
			var rotationZ = com_babylonhx_math_Matrix.RotationZ(-angleZ);
			var rotationY = com_babylonhx_math_Matrix.RotationY(angleY);
			var afterRotZ = com_babylonhx_math_Vector3.TransformCoordinates(new com_babylonhx_math_Vector3(0,1.0,0),rotationZ);
			var complete = com_babylonhx_math_Vector3.TransformCoordinates(afterRotZ,rotationY);
			var vertex = new com_babylonhx_math_Vector3(complete.x * radius.x,complete.y * radius.y,complete.z * radius.z);
			var normal = com_babylonhx_math_Vector3.Normalize(vertex);
			positions.push(vertex.x);
			positions.push(vertex.y);
			positions.push(vertex.z);
			normals.push(normal.x);
			normals.push(normal.y);
			normals.push(normal.z);
			uvs.push(normalizedY);
			uvs.push(normalizedZ);
		}
		if(zRotationStep > 0) {
			var verticesCount = positions.length / 3;
			var firstIndex = verticesCount - 2 * (totalYRotationSteps + 1) | 0;
			while(firstIndex + totalYRotationSteps + 2 < verticesCount) {
				indices.push(firstIndex);
				indices.push(firstIndex + 1);
				indices.push(firstIndex + totalYRotationSteps + 1);
				indices.push(firstIndex + totalYRotationSteps + 1);
				indices.push(firstIndex + 1);
				indices.push(firstIndex + totalYRotationSteps + 2);
				++firstIndex;
			}
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateCylinder = function(options) {
	var height;
	if(options.height != null) height = options.height; else height = 2;
	var diameterTop;
	if(options.diameterTop != null) diameterTop = options.diameterTop; else diameterTop = 1;
	var diameterBottom;
	if(options.diameterBottom != null) diameterBottom = options.diameterBottom; else diameterBottom = 1;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 24;
	var subdivisions;
	if(options.subdivisions != null) subdivisions = options.subdivisions; else subdivisions = 1;
	var hasRings;
	if(options.hasRings != null) hasRings = options.hasRings; else hasRings = false;
	var enclose;
	if(options.enclose != null) enclose = options.enclose; else enclose = false;
	var arc;
	if(options.arc != null) arc = options.arc; else arc = 1.0;
	if(arc <= 0 || arc > 1) arc = 1;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var faceUV;
	if(options.faceUV != null) faceUV = options.faceUV; else faceUV = [];
	var faceColors;
	if(options.faceColors != null) faceColors = options.faceColors; else faceColors = null;
	var quadNb;
	if(arc != 1 && enclose) quadNb = 2; else quadNb = 0;
	var ringNb;
	if(hasRings) ringNb = subdivisions; else ringNb = 1;
	var colorNb = 2 + (1 + quadNb) * ringNb;
	var _g3 = 0;
	while(_g3 < colorNb) {
		var f = _g3++;
		if(faceColors != null && faceColors[f] == null) faceColors[f] = new com_babylonhx_math_Color4(1,1,1,1);
	}
	var _g4 = 0;
	while(_g4 < 3) {
		var f1 = _g4++;
		if(faceUV != null && faceUV[f1] == null) faceUV[f1] = new com_babylonhx_math_Vector4(0,0,1,1);
	}
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var colors = [];
	var angle_step = Math.PI * 2 * arc / tessellation;
	var angle = 0;
	var h = 0;
	var radius = 0;
	var tan = (diameterBottom - diameterTop) / 2 / height;
	var ringVertex = new com_babylonhx_math_Vector3(0,0,0);
	var ringNormal = new com_babylonhx_math_Vector3(0,0,0);
	var ringFirstVertex = new com_babylonhx_math_Vector3(0,0,0);
	var ringFirstNormal = new com_babylonhx_math_Vector3(0,0,0);
	var quadNormal = new com_babylonhx_math_Vector3(0,0,0);
	var Y = com_babylonhx_math_Axis.Y;
	var ringIdx = 1;
	var c = 1;
	var _g11 = 0;
	var _g5 = subdivisions + 1;
	while(_g11 < _g5) {
		var i6 = _g11++;
		h = i6 / subdivisions;
		radius = (h * (diameterTop - diameterBottom) + diameterBottom) / 2;
		if(hasRings && i6 != 0 && i6 != subdivisions) ringIdx = 2; else ringIdx = 1;
		var _g21 = 0;
		while(_g21 < ringIdx) {
			var r = _g21++;
			if(hasRings) c += r;
			if(enclose) c += 2 * r;
			var _g41 = 0;
			var _g31 = tessellation + 1;
			while(_g41 < _g31) {
				var j = _g41++;
				angle = j * angle_step;
				ringVertex.x = Math.cos(-angle) * radius;
				ringVertex.y = -height / 2 + h * height;
				ringVertex.z = Math.sin(-angle) * radius;
				if(diameterTop == 0 && i6 == subdivisions) {
					ringNormal.x = normals[normals.length - (tessellation + 1) * 3];
					ringNormal.y = normals[normals.length - (tessellation + 1) * 3 + 1];
					ringNormal.z = normals[normals.length - (tessellation + 1) * 3 + 2];
				} else {
					ringNormal.x = ringVertex.x;
					ringNormal.z = ringVertex.z;
					ringNormal.y = Math.sqrt(ringNormal.x * ringNormal.x + ringNormal.z * ringNormal.z) * tan;
					ringNormal.normalize();
				}
				if(j == 0) {
					ringFirstVertex.x = ringVertex.x;
					ringFirstVertex.y = ringVertex.y;
					ringFirstVertex.z = ringVertex.z;
					ringFirstNormal.x = ringNormal.x;
					ringFirstNormal.y = ringNormal.y;
					ringFirstNormal.z = ringNormal.z;
				}
				positions.push(ringVertex.x);
				positions.push(ringVertex.y);
				positions.push(ringVertex.z);
				normals.push(ringNormal.x);
				normals.push(ringNormal.y);
				normals.push(ringNormal.z);
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x) * j / tessellation);
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y) * h);
				if(faceColors != null) {
					colors.push(faceColors[c].r);
					colors.push(faceColors[c].g);
					colors.push(faceColors[c].b);
					colors.push(faceColors[c].a);
				}
			}
			if(arc != 1 && enclose) {
				positions.push(ringVertex.x);
				positions.push(ringVertex.y);
				positions.push(ringVertex.z);
				positions.push(0);
				positions.push(ringVertex.y);
				positions.push(0);
				positions.push(0);
				positions.push(ringVertex.y);
				positions.push(0);
				positions.push(ringFirstVertex.x);
				positions.push(ringFirstVertex.y);
				positions.push(ringFirstVertex.z);
				quadNormal.x = Y.y * ringNormal.z - Y.z * ringNormal.y;
				quadNormal.y = Y.z * ringNormal.x - Y.x * ringNormal.z;
				quadNormal.z = Y.x * ringNormal.y - Y.y * ringNormal.x;
				quadNormal.normalize();
				normals.push(quadNormal.x);
				normals.push(quadNormal.y);
				normals.push(quadNormal.z);
				normals.push(quadNormal.x);
				normals.push(quadNormal.y);
				normals.push(quadNormal.z);
				quadNormal.x = ringFirstNormal.y * Y.z - ringFirstNormal.z * Y.y;
				quadNormal.y = ringFirstNormal.z * Y.x - ringFirstNormal.x * Y.z;
				quadNormal.z = ringFirstNormal.x * Y.y - ringFirstNormal.y * Y.x;
				quadNormal.normalize();
				normals.push(quadNormal.x);
				normals.push(quadNormal.y);
				normals.push(quadNormal.z);
				normals.push(quadNormal.x);
				normals.push(quadNormal.y);
				normals.push(quadNormal.z);
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x));
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y));
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x));
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y));
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x));
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y));
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x));
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y));
				colors.push(faceColors[c + 1].r);
				colors.push(faceColors[c + 1].g);
				colors.push(faceColors[c + 1].b);
				colors.push(faceColors[c + 1].a);
				colors.push(faceColors[c + 1].r);
				colors.push(faceColors[c + 1].g);
				colors.push(faceColors[c + 1].b);
				colors.push(faceColors[c + 1].a);
				colors.push(faceColors[c + 2].r);
				colors.push(faceColors[c + 2].g);
				colors.push(faceColors[c + 2].b);
				colors.push(faceColors[c + 2].a);
				colors.push(faceColors[c + 2].r);
				colors.push(faceColors[c + 2].g);
				colors.push(faceColors[c + 2].b);
				colors.push(faceColors[c + 2].a);
			}
		}
	}
	var e;
	if(arc != 1 && enclose) e = tessellation + 4; else e = tessellation;
	var i = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var i3 = 0;
	var _g6 = 0;
	while(_g6 < subdivisions) {
		var s = _g6++;
		var _g12 = 0;
		while(_g12 < tessellation) {
			var j1 = _g12++;
			var i01 = i * (e + 1) + j1;
			var i11 = (i + 1) * (e + 1) + j1;
			var i21 = i * (e + 1) + (j1 + 1);
			var i31 = (i + 1) * (e + 1) + (j1 + 1);
			indices.push(i01);
			indices.push(i11);
			indices.push(i21);
			indices.push(i31);
			indices.push(i21);
			indices.push(i11);
		}
		if(arc != 1 && enclose) {
			indices.push(i0 + 2);
			indices.push(i1 + 2);
			indices.push(i2 + 2);
			indices.push(i3 + 2);
			indices.push(i2 + 2);
			indices.push(i1 + 2);
			indices.push(i0 + 4);
			indices.push(i1 + 4);
			indices.push(i2 + 4);
			indices.push(i3 + 4);
			indices.push(i2 + 4);
			indices.push(i1 + 4);
		}
		if(hasRings) i = i + 2; else i = i + 1;
	}
	var createCylinderCap = function(isTop) {
		var radius1;
		if(isTop) radius1 = diameterTop / 2; else radius1 = diameterBottom / 2;
		if(radius1 == 0) return;
		var angle1 = 0;
		var circleVector = null;
		var u;
		if(isTop) u = faceUV[2]; else u = faceUV[0];
		var c1 = null;
		if(faceColors != null) if(isTop) c1 = faceColors[2]; else c1 = faceColors[0];
		var vbase = positions.length / 3 | 0;
		var offset;
		if(isTop) offset = height / 2; else offset = -height / 2;
		var center = new com_babylonhx_math_Vector3(0,offset,0);
		positions.push(center.x);
		positions.push(center.y);
		positions.push(center.z);
		normals.push(0);
		normals.push(isTop?1:-1);
		normals.push(0);
		uvs.push(u.x + (u.z - u.x) * 0.5);
		uvs.push(u.y + (u.w - u.y) * 0.5);
		if(faceColors != null) {
			colors.push(c1.r);
			colors.push(c1.g);
			colors.push(c1.b);
			colors.push(c1.a);
		}
		var textureScale = new com_babylonhx_math_Vector2(0.5,0.5);
		var _g1 = 0;
		var _g = tessellation + 1;
		while(_g1 < _g) {
			var i4 = _g1++;
			angle1 = Math.PI * 2 * i4 * arc / tessellation;
			var cos = Math.cos(-angle1);
			var sin = Math.sin(-angle1);
			circleVector = new com_babylonhx_math_Vector3(cos * radius1,offset,sin * radius1);
			var textureCoordinate = new com_babylonhx_math_Vector2(cos * textureScale.x + 0.5,sin * textureScale.y + 0.5);
			positions.push(circleVector.x);
			positions.push(circleVector.y);
			positions.push(circleVector.z);
			normals.push(0);
			normals.push(isTop?1:-1);
			normals.push(0);
			uvs.push(u.x + (u.z - u.x) * textureCoordinate.x);
			uvs.push(u.y + (u.w - u.y) * textureCoordinate.y);
			if(faceColors != null) {
				colors.push(c1.r);
				colors.push(c1.g);
				colors.push(c1.b);
				colors.push(c1.a);
			}
		}
		var _g2 = 0;
		while(_g2 < tessellation) {
			var i5 = _g2++;
			if(!isTop) {
				indices.push(vbase);
				indices.push(vbase + (i5 + 1));
				indices.push(vbase + (i5 + 2));
			} else {
				indices.push(vbase);
				indices.push(vbase + (i5 + 2));
				indices.push(vbase + (i5 + 1));
			}
		}
	};
	createCylinderCap(false);
	createCylinderCap(true);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	if(faceColors != null) vertexData.colors = colors;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CylinderOptions = function(options) {
	var height;
	if(options.height != null) height = options.height; else height = 2;
	var diameterTop;
	if(options.diameterTop != null) diameterTop = options.diameterTop; else diameterTop = 1;
	var diameterBottom;
	if(options.diameterBottom != null) diameterBottom = options.diameterBottom; else diameterBottom = 1;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 24;
	var subdivisions;
	if(options.subdivisions != null) subdivisions = options.subdivisions; else subdivisions = 1;
	var hasRings;
	if(options.hasRings != null) hasRings = options.hasRings; else hasRings = false;
	var arc;
	if(options.arc != null) arc = options.arc; else arc = 1.0;
	if(arc <= 0 || arc > 1) arc = 1.0;
	var sideOrientation = options.sideOrientation;
	var faceUV;
	if(options.faceUV != null) faceUV = options.faceUV; else faceUV = [];
	var faceColors = options.faceColors;
	var _g3 = 0;
	while(_g3 < 3) {
		var f = _g3++;
		if(faceColors != null && faceColors[f] == null) faceColors[f] = new com_babylonhx_math_Color4(1,1,1,1);
		if(faceUV != null && faceUV[f] == null) faceUV[f] = new com_babylonhx_math_Vector4(0,0,1,1);
	}
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var colors = [];
	var angle_step = Math.PI * 2 / tessellation;
	var angle = 0;
	var h = 0;
	var radius = 0;
	var tan = (diameterBottom - diameterTop) / 2 / height;
	var ringVertex = new com_babylonhx_math_Vector3(0,0,0);
	var ringNormal = new com_babylonhx_math_Vector3(0,0,0);
	var ringIdx = 1;
	var _g11 = 0;
	var _g4 = subdivisions + 1;
	while(_g11 < _g4) {
		var i3 = _g11++;
		h = i3 / subdivisions;
		radius = (h * (diameterTop - diameterBottom) + diameterBottom) / 2;
		if(hasRings && i3 != 0 && i3 != subdivisions) ringIdx = 2; else ringIdx = 1;
		var _g21 = 0;
		while(_g21 < ringIdx) {
			var r = _g21++;
			var _g41 = 0;
			var _g31 = tessellation + 1;
			while(_g41 < _g31) {
				var j = _g41++;
				angle = j * angle_step;
				ringVertex.x = Math.cos(-angle) * radius;
				ringVertex.y = -height / 2 + h * height;
				ringVertex.z = Math.sin(-angle) * radius;
				if(diameterTop == 0 && i3 == subdivisions) {
					ringNormal.x = normals[normals.length - (tessellation + 1) * 3];
					ringNormal.y = normals[normals.length - (tessellation + 1) * 3 + 1];
					ringNormal.z = normals[normals.length - (tessellation + 1) * 3 + 2];
				} else {
					ringNormal.x = ringVertex.x;
					ringNormal.z = ringVertex.z;
					ringNormal.y = Math.sqrt(ringNormal.x * ringNormal.x + ringNormal.z * ringNormal.z) * tan;
					ringNormal.normalize();
				}
				positions.push(ringVertex.x);
				positions.push(ringVertex.y);
				positions.push(ringVertex.z);
				normals.push(ringNormal.x);
				normals.push(ringNormal.y);
				normals.push(ringNormal.z);
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x) * j / tessellation);
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y) * h);
				if(faceColors != null) {
					colors.push(faceColors[1].r);
					colors.push(faceColors[1].g);
					colors.push(faceColors[1].b);
					colors.push(faceColors[1].a);
				}
			}
		}
	}
	var i = 0;
	var _g5 = 0;
	while(_g5 < subdivisions) {
		var s = _g5++;
		var _g12 = 0;
		while(_g12 < tessellation) {
			var j1 = _g12++;
			var i0 = i * (tessellation + 1) + j1;
			var i11 = (i + 1) * (tessellation + 1) + j1;
			var i21 = i * (tessellation + 1) + (j1 + 1);
			var i31 = (i + 1) * (tessellation + 1) + (j1 + 1);
			indices.push(i0);
			indices.push(i11);
			indices.push(i21);
			indices.push(i31);
			indices.push(i21);
			indices.push(i11);
		}
		if(hasRings) i = i + 2; else i = i + 1;
	}
	var createCylinderCap = function(isTop) {
		var radius1;
		if(isTop) radius1 = diameterTop / 2; else radius1 = diameterBottom / 2;
		if(radius1 == 0) return;
		var angle1 = 0;
		var circleVector = null;
		var u;
		if(isTop) u = faceUV[2]; else u = faceUV[0];
		var c = null;
		if(faceColors != null) if(isTop) c = faceColors[2]; else c = faceColors[0];
		var vbase = positions.length / 3 | 0;
		var offset;
		if(isTop) offset = height / 2; else offset = -height / 2;
		var center = new com_babylonhx_math_Vector3(0,offset,0);
		positions.push(center.x);
		positions.push(center.y);
		positions.push(center.z);
		normals.push(0);
		normals.push(isTop?1:-1);
		normals.push(0);
		uvs.push(u.x + (u.z - u.x) * 0.5);
		uvs.push(u.y + (u.w - u.y) * 0.5);
		if(faceColors != null) {
			colors.push(c.r);
			colors.push(c.g);
			colors.push(c.b);
			colors.push(c.a);
		}
		var textureScale = new com_babylonhx_math_Vector2(0.5,0.5);
		var _g1 = 0;
		var _g = tessellation + 1;
		while(_g1 < _g) {
			var i1 = _g1++;
			angle1 = Math.PI * 2 * i1 * arc / tessellation;
			var cos = Math.cos(-angle1);
			var sin = Math.sin(-angle1);
			circleVector = new com_babylonhx_math_Vector3(cos * radius1,offset,sin * radius1);
			var textureCoordinate = new com_babylonhx_math_Vector2(cos * textureScale.x + 0.5,sin * textureScale.y + 0.5);
			positions.push(circleVector.x);
			positions.push(circleVector.y);
			positions.push(circleVector.z);
			normals.push(0);
			normals.push(isTop?1:-1);
			normals.push(0);
			uvs.push(u.x + (u.z - u.x) * textureCoordinate.x);
			uvs.push(u.y + (u.w - u.y) * textureCoordinate.y);
			if(faceColors != null) {
				colors.push(c.r);
				colors.push(c.g);
				colors.push(c.b);
				colors.push(c.a);
			}
		}
		var _g2 = 0;
		while(_g2 < tessellation) {
			var i2 = _g2++;
			if(!isTop) {
				indices.push(vbase);
				indices.push(vbase + (i2 + 1));
				indices.push(vbase + (i2 + 2));
			} else {
				indices.push(vbase);
				indices.push(vbase + (i2 + 2));
				indices.push(vbase + (i2 + 1));
			}
		}
	};
	createCylinderCap(false);
	createCylinderCap(true);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	if(faceColors != null) vertexData.colors = colors;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateTorus = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var diameter;
	if(options.diameter != null) diameter = options.diameter; else diameter = 1;
	var thickness;
	if(options.thickness != null) thickness = options.thickness; else thickness = 0.5;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 16;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var stride = tessellation + 1;
	var _g1 = 0;
	var _g = tessellation + 1;
	while(_g1 < _g) {
		var i = _g1++;
		var u = i / tessellation;
		var outerAngle = i * Math.PI * 2.0 / tessellation - Math.PI / 2.0;
		var transform = com_babylonhx_math_Matrix.Translation(diameter / 2.0,0,0).multiply(com_babylonhx_math_Matrix.RotationY(outerAngle));
		var _g3 = 0;
		var _g2 = tessellation + 1;
		while(_g3 < _g2) {
			var j = _g3++;
			var v = 1 - j / tessellation;
			var innerAngle = j * Math.PI * 2.0 / tessellation + Math.PI;
			var dx = Math.cos(innerAngle);
			var dy = Math.sin(innerAngle);
			var normal = new com_babylonhx_math_Vector3(dx,dy,0);
			var position = normal.scale(thickness / 2);
			var textureCoordinate = new com_babylonhx_math_Vector2(u,v);
			position = com_babylonhx_math_Vector3.TransformCoordinates(position,transform);
			normal = com_babylonhx_math_Vector3.TransformNormal(normal,transform);
			positions.push(position.x);
			positions.push(position.y);
			positions.push(position.z);
			normals.push(normal.x);
			normals.push(normal.y);
			normals.push(normal.z);
			uvs.push(textureCoordinate.x);
			uvs.push(textureCoordinate.y);
			var nextI = (i + 1) % stride;
			var nextJ = (j + 1) % stride;
			indices.push(i * stride + j);
			indices.push(i * stride + nextJ);
			indices.push(nextI * stride + j);
			indices.push(i * stride + nextJ);
			indices.push(nextI * stride + nextJ);
			indices.push(nextI * stride + j);
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateLines = function(options) {
	var indices = [];
	var positions = [];
	var points = options.points;
	var _g1 = 0;
	var _g = points.length;
	while(_g1 < _g) {
		var index = _g1++;
		positions.push(points[index].x);
		positions.push(points[index].y);
		positions.push(points[index].z);
		if(index > 0) {
			indices.push(index - 1);
			indices.push(index);
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateDashedLines = function(options) {
	var positions = [];
	var indices = [];
	var dashSize;
	if(options.dashSize != null) dashSize = options.dashSize; else dashSize = 3;
	var gapSize;
	if(options.gapSize != null) gapSize = options.gapSize; else gapSize = 1;
	var dashNb;
	if(options.dashNb != null) dashNb = options.dashNb; else dashNb = 200;
	var points = options.points;
	var curvect = new com_babylonhx_math_Vector3(0,0,0);
	var lg = 0;
	var nb = 0;
	var shft = 0;
	var dashshft = 0;
	var curshft = 0;
	var idx = 0;
	var _g1 = 0;
	var _g = points.length - 1;
	while(_g1 < _g) {
		var i = _g1++;
		points[i + 1].subtractToRef(points[i],curvect);
		lg += Math.sqrt(curvect.x * curvect.x + curvect.y * curvect.y + curvect.z * curvect.z);
	}
	shft = lg / dashNb;
	dashshft = dashSize * shft / (dashSize + gapSize);
	var _g11 = 0;
	var _g2 = points.length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		points[i1 + 1].subtractToRef(points[i1],curvect);
		nb = Math.floor(Math.sqrt(curvect.x * curvect.x + curvect.y * curvect.y + curvect.z * curvect.z) / shft);
		curvect.normalize();
		var _g21 = 0;
		while(_g21 < nb) {
			var j = _g21++;
			curshft = shft * j;
			positions.push(points[i1].x + curshft * curvect.x);
			positions.push(points[i1].y + curshft * curvect.y);
			positions.push(points[i1].z + curshft * curvect.z);
			positions.push(points[i1].x + (curshft + dashshft) * curvect.x);
			positions.push(points[i1].y + (curshft + dashshft) * curvect.y);
			positions.push(points[i1].z + (curshft + dashshft) * curvect.z);
			indices.push(idx);
			indices.push(idx + 1);
			idx += 2;
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.positions = positions;
	vertexData.indices = indices;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateGround = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var width;
	if(options.width != null) width = options.width; else width = 1;
	var height;
	if(options.height != null) height = options.height; else height = 1;
	var subdivisions;
	if(options.subdivision != null) subdivisions = options.subdivision; else subdivisions = 1;
	var _g1 = 0;
	var _g = subdivisions + 1;
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = 0;
		var _g2 = subdivisions + 1;
		while(_g3 < _g2) {
			var col = _g3++;
			var position = new com_babylonhx_math_Vector3(col * width / subdivisions - width / 2.0,0,(subdivisions - row) * height / subdivisions - height / 2.0);
			var normal = new com_babylonhx_math_Vector3(0,1.0,0);
			positions.push(position.x);
			positions.push(position.y);
			positions.push(position.z);
			normals.push(normal.x);
			normals.push(normal.y);
			normals.push(normal.z);
			uvs.push(col / subdivisions);
			uvs.push(1.0 - row / subdivisions);
		}
	}
	var _g4 = 0;
	while(_g4 < subdivisions) {
		var row1 = _g4++;
		var _g11 = 0;
		while(_g11 < subdivisions) {
			var col1 = _g11++;
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + row1 * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
			indices.push(col1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateTiledGround = function(options) {
	var xmin = options.xmin;
	var zmin = options.zmin;
	var xmax = options.xmax;
	var zmax = options.zmax;
	var subdivisions;
	if(options.subdivision != null) subdivisions = options.subdivision; else subdivisions = { w : 1, h : 1};
	var precision;
	if(options.precision != null) precision = options.precision; else precision = { w : 1, h : 1};
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	if(subdivisions.w < 1) subdivisions.h = 1; else subdivisions.h = subdivisions.h;
	if(subdivisions.w < 1) subdivisions.w = 1; else subdivisions.w = subdivisions.w;
	if(precision.w < 1) precision.w = 1; else precision.w = precision.w;
	if(precision.h < 1) precision.h = 1; else precision.h = precision.h;
	var tileSize_w = (xmax - xmin) / subdivisions.w;
	var tileSize_h = (zmax - zmin) / subdivisions.h;
	var applyTile = function(xTileMin,zTileMin,xTileMax,zTileMax) {
		var base = positions.length / 3;
		var rowLength = precision.w + 1;
		var _g1 = 0;
		var _g = precision.h;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = 0;
			var _g2 = precision.w;
			while(_g3 < _g2) {
				var col = _g3++;
				var square_0 = base + col + row * rowLength | 0;
				var square_1 = base + (col + 1) + row * rowLength | 0;
				var square_2 = base + (col + 1) + (row + 1) * rowLength | 0;
				var square_3 = base + col + (row + 1) * rowLength | 0;
				indices.push(square_1);
				indices.push(square_2);
				indices.push(square_3);
				indices.push(square_0);
				indices.push(square_1);
				indices.push(square_3);
			}
		}
		var position = new com_babylonhx_math_Vector3(0,0,0);
		var normal = new com_babylonhx_math_Vector3(0,1.0,0);
		var _g11 = 0;
		var _g4 = precision.h + 1;
		while(_g11 < _g4) {
			var row1 = _g11++;
			position.z = row1 * (zTileMax - zTileMin) / precision.h + zTileMin;
			var _g31 = 0;
			var _g21 = precision.w + 1;
			while(_g31 < _g21) {
				var col1 = _g31++;
				position.x = col1 * (xTileMax - xTileMin) / precision.w + xTileMin;
				position.y = 0;
				positions.push(position.x);
				positions.push(position.y);
				positions.push(position.z);
				normals.push(normal.x);
				normals.push(normal.y);
				normals.push(normal.z);
				uvs.push(col1 / precision.w);
				uvs.push(row1 / precision.h);
			}
		}
	};
	var _g12 = 0;
	var _g5 = subdivisions.h;
	while(_g12 < _g5) {
		var tileRow = _g12++;
		var _g32 = 0;
		var _g22 = subdivisions.w;
		while(_g32 < _g22) {
			var tileCol = _g32++;
			applyTile(xmin + tileCol * tileSize_w,zmin + tileRow * tileSize_h,xmin + (tileCol + 1) * tileSize_w,zmin + (tileRow + 1) * tileSize_h);
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateGroundFromHeightMap = function(options) {
	var width = options.width;
	var height = options.height;
	var subdivisions = options.subdivisions;
	var minHeight = options.minHeight;
	var maxHeight = options.maxHeight;
	var buffer = options.buffer;
	var bufferWidth = options.bufferWidth;
	var bufferHeight = options.bufferHeight;
	haxe_Log.trace(buffer.length,{ fileName : "VertexData.hx", lineNumber : 1647, className : "com.babylonhx.mesh.VertexData", methodName : "CreateGroundFromHeightMap"});
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var _g1 = 0;
	var _g = subdivisions + 1;
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = 0;
		var _g2 = subdivisions + 1;
		while(_g3 < _g2) {
			var col = _g3++;
			var position = new com_babylonhx_math_Vector3(col * width / subdivisions - width / 2.0,0,(subdivisions - row) * height / subdivisions - height / 2.0);
			var heightMapX = (position.x + width / 2) / width * (bufferWidth - 1) | 0;
			var heightMapY = (1.0 - (position.z + height / 2) / height) * (bufferHeight - 1) | 0;
			var pos = (heightMapX + heightMapY * bufferWidth) * 4 | 0;
			var r = _$UInt_UInt_$Impl_$.toFloat(buffer[pos]) / 255.0;
			var g = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 1]) / 255.0;
			var b = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 2]) / 255.0;
			var gradient = r * 0.3 + g * 0.59 + b * 0.11;
			position.y = minHeight + (maxHeight - minHeight) * gradient;
			positions.push(position.x);
			positions.push(position.y);
			positions.push(position.z);
			normals.push(0);
			normals.push(0);
			normals.push(0);
			uvs.push(col / subdivisions);
			uvs.push(1.0 - row / subdivisions);
		}
	}
	var _g4 = 0;
	while(_g4 < subdivisions) {
		var row1 = _g4++;
		var _g11 = 0;
		while(_g11 < subdivisions) {
			var col1 = _g11++;
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + row1 * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
			indices.push(col1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
		}
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreatePlane = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var width;
	if(options.width != null) width = options.width; else width = 1;
	var height;
	if(options.height != null) height = options.height; else height = 1;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var halfWidth = width / 2;
	var halfHeight = height / 2;
	positions.push(-halfWidth);
	positions.push(-halfHeight);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(0.0);
	uvs.push(0.0);
	positions.push(halfWidth);
	positions.push(-halfHeight);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(1.0);
	uvs.push(0.0);
	positions.push(halfWidth);
	positions.push(halfHeight);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(1.0);
	uvs.push(1.0);
	positions.push(-halfWidth);
	positions.push(halfHeight);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(0.0);
	uvs.push(1.0);
	indices.push(0);
	indices.push(1);
	indices.push(2);
	indices.push(0);
	indices.push(2);
	indices.push(3);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateDisc = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var radius;
	if(options.radius != null) radius = options.radius; else radius = 0.5;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 64;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	positions.push(0);
	positions.push(0);
	positions.push(0);
	uvs.push(0.5);
	uvs.push(0.5);
	var step = Math.PI * 2 / tessellation;
	var a = 0.0;
	while(a < Math.PI * 2) {
		var x = Math.cos(a);
		var y = Math.sin(a);
		var u = (x + 1) / 2;
		var v = (1 - y) / 2;
		positions.push(radius * x);
		positions.push(radius * y);
		positions.push(0);
		uvs.push(u);
		uvs.push(v);
		a += step;
	}
	positions.push(positions[3]);
	positions.push(positions[4]);
	positions.push(positions[5]);
	uvs.push(uvs[2]);
	uvs.push(uvs[3]);
	var vertexNb = positions.length / 3 | 0;
	var _g1 = 1;
	var _g = vertexNb - 1;
	while(_g1 < _g) {
		var i = _g1++;
		indices.push(i + 1);
		indices.push(0);
		indices.push(i);
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateIcoSphere = function(options) {
	var sideOrientation = options.sideOrientation;
	var radius;
	if(options.radius != null) radius = options.radius; else radius = 1;
	var flat;
	if(options.flat == null) flat = true; else flat = options.flat;
	var subdivisions;
	if(options.subdivisions != null) subdivisions = options.subdivisions; else subdivisions = 4;
	var radiusX;
	if(options.radiusX != null) radiusX = options.radiusX; else radiusX = radius;
	var radiusY;
	if(options.radiusY != null) radiusY = options.radiusY; else radiusY = radius;
	var radiusZ;
	if(options.radiusZ != null) radiusZ = options.radiusZ; else radiusZ = radius;
	var t = (1 + Math.sqrt(5)) / 2;
	var ico_vertices = [-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,-t,0,1,-t,0,-1,t,0,1,t,t,0,1,t,0,-1,-t,0,1,-t,0,-1];
	var ico_indices = [0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];
	var ico_vertexuv = [4,1,2,1,6,3,5,4,4,3,3,2,7,4,3,0,1,0,0,1,5,0,5,2];
	var ustep = 0.0947265625;
	var vstep = 0.1640625;
	var uoffset = 0.048828125;
	var voffset = 0.0498046875;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var current_indice = 0;
	var face_vertex_pos = [];
	var face_vertex_uv = [];
	var _g = 0;
	while(_g < 3) {
		var v012 = _g++;
		face_vertex_pos[v012] = new com_babylonhx_math_Vector3(0,0,0);
		face_vertex_uv[v012] = new com_babylonhx_math_Vector2(0,0);
	}
	var _g1 = 0;
	while(_g1 < 20) {
		var face = _g1++;
		var _g11 = 0;
		while(_g11 < 3) {
			var v0121 = _g11++;
			var v_id = ico_indices[3 * face + v0121];
			face_vertex_pos[v0121].copyFromFloats(ico_vertices[3 * v_id],ico_vertices[3 * v_id + 1],ico_vertices[3 * v_id + 2]);
			face_vertex_pos[v0121].normalize().scaleInPlace(radius);
			var fix = 0;
			if(face == 5 && v0121 == 2) fix = 1;
			if(face == 15 && v0121 == 1) fix = 2;
			if(face == 10 && v0121 == 1) fix = 3;
			if(face == 14 && v0121 == 2) fix = 4;
			if(face == 4 && v0121 == 1) fix = 1;
			if(face == 7 && v0121 == 1) fix = 2;
			if(face == 17 && v0121 == 2) fix = 3;
			if(face == 8 && v0121 == 0) fix = 4;
			if(face == 8 && v0121 == 1) fix = 5;
			if(face == 18 && v0121 == 0) fix = 5;
			if(face == 13 && v0121 == 2) fix = 5;
			if(face == 14 && v0121 == 1) fix = 5;
			if(face == 18 && v0121 == 2) fix = 5;
			face_vertex_uv[v0121].copyFromFloats((ico_vertexuv[2 * v_id] + fix) * ustep + uoffset,(ico_vertexuv[2 * v_id + 1] + fix) * vstep + voffset);
		}
		var interp_vertex = function(i1,i2,c1,c2) {
			var pos_x0 = com_babylonhx_math_Vector3.Lerp(face_vertex_pos[0],face_vertex_pos[2],i2 / subdivisions);
			var pos_x1 = com_babylonhx_math_Vector3.Lerp(face_vertex_pos[1],face_vertex_pos[2],i2 / subdivisions);
			var pos_interp;
			if(subdivisions == i2) pos_interp = face_vertex_pos[2]; else pos_interp = com_babylonhx_math_Vector3.Lerp(pos_x0,pos_x1,i1 / (subdivisions - i2));
			pos_interp.normalize();
			pos_interp.x *= radiusX;
			pos_interp.y *= radiusY;
			pos_interp.z *= radiusZ;
			var vertex_normal = null;
			if(flat) {
				var centroid_x0 = com_babylonhx_math_Vector3.Lerp(face_vertex_pos[0],face_vertex_pos[2],c2 / subdivisions);
				var centroid_x1 = com_babylonhx_math_Vector3.Lerp(face_vertex_pos[1],face_vertex_pos[2],c2 / subdivisions);
				var centroid_interp = com_babylonhx_math_Vector3.Lerp(centroid_x0,centroid_x1,c1 / (subdivisions - c2));
				vertex_normal = com_babylonhx_math_Vector3.Normalize(centroid_interp);
			} else vertex_normal = com_babylonhx_math_Vector3.Normalize(pos_interp);
			var uv_x0 = com_babylonhx_math_Vector2.Lerp(face_vertex_uv[0],face_vertex_uv[2],i2 / subdivisions);
			var uv_x1 = com_babylonhx_math_Vector2.Lerp(face_vertex_uv[1],face_vertex_uv[2],i2 / subdivisions);
			var uv_interp;
			if(subdivisions == i2) uv_interp = face_vertex_uv[2]; else uv_interp = com_babylonhx_math_Vector2.Lerp(uv_x0,uv_x1,i1 / (subdivisions - i2));
			positions.push(pos_interp.x);
			positions.push(pos_interp.y);
			positions.push(pos_interp.z);
			normals.push(vertex_normal.x);
			normals.push(vertex_normal.y);
			normals.push(vertex_normal.z);
			uvs.push(uv_interp.x);
			uvs.push(uv_interp.y);
			indices.push(current_indice);
			current_indice++;
		};
		var _g12 = 0;
		while(_g12 < subdivisions) {
			var i21 = _g12++;
			var i11 = 0;
			while(i11 + i21 < subdivisions) {
				interp_vertex(i11,i21,i11 + 0.33333333333333331,i21 + 0.33333333333333331);
				interp_vertex(i11 + 1,i21,i11 + 0.33333333333333331,i21 + 0.33333333333333331);
				interp_vertex(i11,i21 + 1,i11 + 0.33333333333333331,i21 + 0.33333333333333331);
				if(i11 + i21 + 1 < subdivisions) {
					interp_vertex(i11 + 1,i21,i11 + 0.66666666666666663,i21 + 0.66666666666666663);
					interp_vertex(i11 + 1,i21 + 1,i11 + 0.66666666666666663,i21 + 0.66666666666666663);
					interp_vertex(i11,i21 + 1,i11 + 0.66666666666666663,i21 + 0.66666666666666663);
				}
				++i11;
			}
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreatePolyhedron = function(options) {
	var polyhedra = [];
	polyhedra[0] = { vertex : [[0,0,1.732051],[1.632993,0,-0.5773503],[-0.8164966,1.414214,-0.5773503],[-0.8164966,-1.414214,-0.5773503]], face : [[0,1,2],[0,2,3],[0,3,1],[1,3,2]]};
	polyhedra[1] = { vertex : [[0,0,1.414214],[1.414214,0,0],[0,1.414214,0],[-1.414214,0,0],[0,-1.414214,0],[0,0,-1.414214]], face : [[0,1,2],[0,2,3],[0,3,4],[0,4,1],[1,4,5],[1,5,2],[2,5,3],[3,5,4]]};
	polyhedra[2] = { vertex : [[0,0,1.070466],[0.7136442,0,0.7978784],[-0.3568221,0.618034,0.7978784],[-0.3568221,-0.618034,0.7978784],[0.7978784,0.618034,0.3568221],[0.7978784,-0.618034,0.3568221],[-0.9341724,0.381966,0.3568221],[0.1362939,1,0.3568221],[0.1362939,-1,0.3568221],[-0.9341724,-0.381966,0.3568221],[0.9341724,0.381966,-0.3568221],[0.9341724,-0.381966,-0.3568221],[-0.7978784,0.618034,-0.3568221],[-0.1362939,1,-0.3568221],[-0.1362939,-1,-0.3568221],[-0.7978784,-0.618034,-0.3568221],[0.3568221,0.618034,-0.7978784],[0.3568221,-0.618034,-0.7978784],[-0.7136442,0,-0.7978784],[0,0,-1.070466]], face : [[0,1,4,7,2],[0,2,6,9,3],[0,3,8,5,1],[1,5,11,10,4],[2,7,13,12,6],[3,9,15,14,8],[4,10,16,13,7],[5,8,14,17,11],[6,12,18,15,9],[10,11,17,19,16],[12,13,16,19,18],[14,15,18,19,17]]};
	polyhedra[3] = { vertex : [[0,0,1.175571],[1.051462,0,0.5257311],[0.3249197,1,0.5257311],[-0.8506508,0.618034,0.5257311],[-0.8506508,-0.618034,0.5257311],[0.3249197,-1,0.5257311],[0.8506508,0.618034,-0.5257311],[0.8506508,-0.618034,-0.5257311],[-0.3249197,1,-0.5257311],[-1.051462,0,-0.5257311],[-0.3249197,-1,-0.5257311],[0,0,-1.175571]], face : [[0,1,2],[0,2,3],[0,3,4],[0,4,5],[0,5,1],[1,5,7],[1,7,6],[1,6,2],[2,6,8],[2,8,3],[3,8,9],[3,9,4],[4,9,10],[4,10,5],[5,10,7],[6,7,11],[6,11,8],[7,10,11],[8,11,9],[9,11,10]]};
	polyhedra[4] = { vertex : [[0,0,1.070722],[0.7148135,0,0.7971752],[-0.104682,0.7071068,0.7971752],[-0.6841528,0.2071068,0.7971752],[-0.104682,-0.7071068,0.7971752],[0.6101315,0.7071068,0.5236279],[1.04156,0.2071068,0.1367736],[0.6101315,-0.7071068,0.5236279],[-0.3574067,1,0.1367736],[-0.7888348,-0.5,0.5236279],[-0.9368776,0.5,0.1367736],[-0.3574067,-1,0.1367736],[0.3574067,1,-0.1367736],[0.9368776,-0.5,-0.1367736],[0.7888348,0.5,-0.5236279],[0.3574067,-1,-0.1367736],[-0.6101315,0.7071068,-0.5236279],[-1.04156,-0.2071068,-0.1367736],[-0.6101315,-0.7071068,-0.5236279],[0.104682,0.7071068,-0.7971752],[0.6841528,-0.2071068,-0.7971752],[0.104682,-0.7071068,-0.7971752],[-0.7148135,0,-0.7971752],[0,0,-1.070722]], face : [[0,2,3],[1,6,5],[4,9,11],[7,15,13],[8,16,10],[12,14,19],[17,22,18],[20,21,23],[0,1,5,2],[0,3,9,4],[0,4,7,1],[1,7,13,6],[2,5,12,8],[2,8,10,3],[3,10,17,9],[4,11,15,7],[5,6,14,12],[6,13,20,14],[8,12,19,16],[9,17,18,11],[10,16,22,17],[11,18,21,15],[13,15,21,20],[14,20,23,19],[16,19,23,22],[18,22,23,21]]};
	polyhedra[5] = { vertex : [[0,0,1.322876],[1.309307,0,0.1889822],[-0.9819805,0.8660254,0.1889822],[0.1636634,-1.299038,0.1889822],[0.3273268,0.8660254,-0.9449112],[-0.8183171,-0.4330127,-0.9449112]], face : [[0,3,1],[2,4,5],[0,1,4,2],[0,2,5,3],[1,3,5,4]]};
	polyhedra[6] = { vertex : [[0,0,1.159953],[1.013464,0,0.5642542],[-0.3501431,0.9510565,0.5642542],[-0.7715208,-0.6571639,0.5642542],[0.6633206,0.9510565,-0.03144481],[0.8682979,-0.6571639,-0.3996071],[-1.121664,0.2938926,-0.03144481],[-0.2348831,-1.063314,-0.3996071],[0.5181548,0.2938926,-0.9953061],[-0.5850262,-0.112257,-0.9953061]], face : [[0,1,4,2],[0,2,6,3],[1,5,8,4],[3,6,9,7],[5,7,9,8],[0,3,7,5,1],[2,4,8,9,6]]};
	polyhedra[7] = { vertex : [[0,0,1.118034],[0.8944272,0,0.6708204],[-0.2236068,0.8660254,0.6708204],[-0.7826238,-0.4330127,0.6708204],[0.6708204,0.8660254,0.2236068],[1.006231,-0.4330127,-0.2236068],[-1.006231,0.4330127,0.2236068],[-0.6708204,-0.8660254,-0.2236068],[0.7826238,0.4330127,-0.6708204],[0.2236068,-0.8660254,-0.6708204],[-0.8944272,0,-0.6708204],[0,0,-1.118034]], face : [[0,1,4,2],[0,2,6,3],[1,5,8,4],[3,6,10,7],[5,9,11,8],[7,10,11,9],[0,3,7,9,5,1],[2,4,8,11,10,6]]};
	polyhedra[8] = { vertex : [[-0.729665,0.670121,0.319155],[-0.655235,-0.29213,-0.754096],[-0.093922,-0.607123,0.537818],[0.702196,0.595691,0.485187],[0.776626,-0.36656,-0.588064]], face : [[1,4,2],[0,1,2],[3,0,2],[4,3,2],[4,1,0,3]]};
	polyhedra[9] = { vertex : [[-0.868849,-0.100041,0.61257],[-0.329458,0.976099,0.28078],[-0.26629,-0.013796,-0.477654],[-0.13392,-1.034115,0.229829],[0.738834,0.707117,-0.307018],[0.859683,-0.535264,-0.338508]], face : [[3,0,2],[5,3,2],[4,5,2],[1,4,2],[0,1,2],[0,3,5,4,1]]};
	polyhedra[10] = { vertex : [[-0.610389,0.243975,0.531213],[-0.187812,-0.48795,-0.664016],[-0.187812,0.9759,-0.664016],[0.187812,-0.9759,0.664016],[0.798201,0.243975,0.132803]], face : [[1,3,0],[3,4,0],[3,1,4],[0,2,1],[0,4,2],[2,4,1]]};
	polyhedra[11] = { vertex : [[-1.028778,0.392027,-0.048786],[-0.640503,-0.646161,0.621837],[-0.125162,-0.395663,-0.540059],[0.004683,0.888447,-0.651988],[0.125161,0.395663,0.540059],[0.632925,-0.791376,0.433102],[1.031672,0.157063,-0.354165]], face : [[3,2,0],[2,1,0],[2,5,1],[0,4,3],[0,1,4],[4,1,5],[2,3,6],[3,4,6],[5,2,6],[4,5,6]]};
	polyhedra[12] = { vertex : [[-0.669867,0.334933,-0.529576],[-0.669867,0.334933,0.529577],[-0.4043,1.212901,0],[-0.334933,-0.669867,-0.529576],[-0.334933,-0.669867,0.529577],[0.334933,0.669867,-0.529576],[0.334933,0.669867,0.529577],[0.4043,-1.212901,0],[0.669867,-0.334933,-0.529576],[0.669867,-0.334933,0.529577]], face : [[8,9,7],[6,5,2],[3,8,7],[5,0,2],[4,3,7],[0,1,2],[9,4,7],[1,6,2],[9,8,5,6],[8,3,0,5],[3,4,1,0],[4,9,6,1]]};
	polyhedra[13] = { vertex : [[-0.931836,0.219976,-0.264632],[-0.636706,0.318353,0.692816],[-0.613483,-0.735083,-0.264632],[-0.326545,0.979634,0],[-0.318353,-0.636706,0.692816],[-0.159176,0.477529,-0.856368],[0.159176,-0.477529,-0.856368],[0.318353,0.636706,0.692816],[0.326545,-0.979634,0],[0.613482,0.735082,-0.264632],[0.636706,-0.318353,0.692816],[0.931835,-0.219977,-0.264632]], face : [[11,10,8],[7,9,3],[6,11,8],[9,5,3],[2,6,8],[5,0,3],[4,2,8],[0,1,3],[10,4,8],[1,7,3],[10,11,9,7],[11,6,5,9],[6,2,0,5],[2,4,1,0],[4,10,7,1]]};
	polyhedra[14] = { vertex : [[-0.93465,0.300459,-0.271185],[-0.838689,-0.260219,-0.516017],[-0.711319,0.717591,0.128359],[-0.710334,-0.156922,0.080946],[-0.599799,0.556003,-0.725148],[-0.503838,-0.004675,-0.969981],[-0.487004,0.26021,0.48049],[-0.460089,-0.750282,-0.512622],[-0.376468,0.973135,-0.325605],[-0.331735,-0.646985,0.084342],[-0.254001,0.831847,0.530001],[-0.125239,-0.494738,-0.966586],[0.029622,0.027949,0.730817],[0.056536,-0.982543,-0.262295],[0.08085,1.087391,0.076037],[0.125583,-0.532729,0.485984],[0.262625,0.599586,0.780328],[0.391387,-0.726999,-0.716259],[0.513854,-0.868287,0.139347],[0.597475,0.85513,0.326364],[0.641224,0.109523,0.783723],[0.737185,-0.451155,0.538891],[0.848705,-0.612742,-0.314616],[0.976075,0.365067,0.32976],[1.072036,-0.19561,0.084927]], face : [[15,18,21],[12,20,16],[6,10,2],[3,0,1],[9,7,13],[2,8,4,0],[0,4,5,1],[1,5,11,7],[7,11,17,13],[13,17,22,18],[18,22,24,21],[21,24,23,20],[20,23,19,16],[16,19,14,10],[10,14,8,2],[15,9,13,18],[12,15,21,20],[6,12,16,10],[3,6,2,0],[9,3,1,7],[9,15,12,6,3],[22,17,11,5,4,8,14,19,23,24]]};
	var type;
	if(options.type != null) type = options.type; else type = 0;
	if(type < 0) type = 0;
	if(type >= polyhedra.length) type = polyhedra.length - 1;
	var size;
	if(options.size != null) size = options.size; else size = 1;
	var sizeX;
	if(options.sizeX != null) sizeX = options.sizeX; else sizeX = size;
	var sizeY;
	if(options.sizeY != null) sizeY = options.sizeY; else sizeY = size;
	var sizeZ;
	if(options.sizeZ != null) sizeZ = options.sizeZ; else sizeZ = size;
	var data;
	if(options.custom != null) data = options.custom; else data = polyhedra[type];
	var nbfaces = data.face.length;
	var faceUV;
	if(options.faceUV != null) faceUV = options.faceUV; else faceUV = [];
	var faceColors;
	if(options.faceColors != null) faceColors = options.faceColors; else faceColors = [];
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var positions = [];
	var indices = [];
	var normals = [];
	var uvs = [];
	var colors = [];
	var index = 0;
	var faceIdx = 0;
	var indexes = [];
	var u = 0;
	var v = 0;
	var ang = 0;
	var x = 0;
	var y = 0;
	var tmp = 0;
	var _g = 0;
	while(_g < nbfaces) {
		var f = _g++;
		if(faceColors != null && faceColors[f] == null) faceColors[f] = new com_babylonhx_math_Color4(1,1,1,1);
		if(faceUV != null && faceUV[f] == null) faceUV[f] = new com_babylonhx_math_Vector4(0,0,1,1);
	}
	var _g1 = 0;
	while(_g1 < nbfaces) {
		var f1 = _g1++;
		var fl = data.face[f1].length;
		ang = 2 * Math.PI / fl;
		x = 0.5 * Math.tan(ang / 2);
		y = 0.5;
		var _g11 = 0;
		while(_g11 < fl) {
			var i = _g11++;
			positions.push(data.vertex[data.face[f1][i]][0] * sizeX);
			positions.push(data.vertex[data.face[f1][i]][1] * sizeY);
			positions.push(data.vertex[data.face[f1][i]][2] * sizeZ);
			indexes.push(index);
			index++;
			u = faceUV[f1].x + (faceUV[f1].z - faceUV[f1].x) * (0.5 + x);
			v = faceUV[f1].y + (faceUV[f1].w - faceUV[f1].y) * (y - 0.5);
			uvs.push(u);
			uvs.push(v);
			tmp = x * Math.cos(ang) - y * Math.sin(ang);
			y = x * Math.sin(ang) + y * Math.cos(ang);
			x = tmp;
			if(faceColors[f1] != null) {
				colors.push(faceColors[f1].r);
				colors.push(faceColors[f1].g);
				colors.push(faceColors[f1].b);
				colors.push(faceColors[f1].a);
			}
		}
		var _g2 = 0;
		var _g12 = fl - 2;
		while(_g2 < _g12) {
			var i1 = _g2++;
			indices.push(indexes[faceIdx]);
			indices.push(indexes[i1 + 2 + faceIdx]);
			indices.push(indexes[i1 + 1 + faceIdx]);
		}
		faceIdx += fl;
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.positions = positions;
	vertexData.indices = indices;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	if(faceColors.length > 0) vertexData.colors = colors;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateTorusKnot = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var radius;
	if(options.radius != null) radius = options.radius; else radius = 2;
	var tube;
	if(options.tube != null) tube = options.tube; else tube = 0.5;
	var radialSegments;
	if(options.radialSegments != null) radialSegments = options.radialSegments; else radialSegments = 32;
	var tubularSegments;
	if(options.tubularSegments != null) tubularSegments = options.tubularSegments; else tubularSegments = 32;
	var p;
	if(options.p != null) p = options.p; else p = 2;
	var q;
	if(options.q != null) q = options.q; else q = 3;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var getPos = function(angle) {
		var cu = Math.cos(angle);
		var su = Math.sin(angle);
		var quOverP = q / p * angle;
		var cs = Math.cos(quOverP);
		var tx = radius * (2 + cs) * 0.5 * cu;
		var ty = radius * (2 + cs) * su * 0.5;
		var tz = radius * Math.sin(quOverP) * 0.5;
		return new com_babylonhx_math_Vector3(tx,ty,tz);
	};
	var _g1 = 0;
	var _g = radialSegments + 1;
	while(_g1 < _g) {
		var i = _g1++;
		var modI = i % radialSegments;
		var u = modI / radialSegments * 2 * p * Math.PI;
		var p1 = getPos(u);
		var p2 = getPos(u + 0.01);
		var tang = new com_babylonhx_math_Vector3(p2.x - p1.x,p2.y - p1.y,p2.z - p1.z);
		var n = new com_babylonhx_math_Vector3(p2.x + p1.x,p2.y + p1.y,p2.z + p1.z);
		var bitan = com_babylonhx_math_Vector3.Cross(tang,n);
		n = com_babylonhx_math_Vector3.Cross(bitan,tang);
		bitan.normalize();
		n.normalize();
		var _g2 = 0;
		while(_g2 < tubularSegments) {
			var j = _g2++;
			var modJ = j % tubularSegments;
			var v = modJ / tubularSegments * 2 * Math.PI;
			var cx = -tube * Math.cos(v);
			var cy = tube * Math.sin(v);
			positions.push(p1.x + cx * n.x + cy * bitan.x);
			positions.push(p1.y + cx * n.y + cy * bitan.y);
			positions.push(p1.z + cx * n.z + cy * bitan.z);
			uvs.push(i / radialSegments);
			uvs.push(j / tubularSegments);
		}
	}
	var _g3 = 0;
	while(_g3 < radialSegments) {
		var i1 = _g3++;
		var _g11 = 0;
		while(_g11 < tubularSegments) {
			var j1 = _g11++;
			var jNext = (j1 + 1) % tubularSegments;
			var a = i1 * tubularSegments + j1;
			var b = (i1 + 1) * tubularSegments + j1;
			var c = (i1 + 1) * tubularSegments + jNext;
			var d = i1 * tubularSegments + jNext;
			indices.push(d);
			indices.push(b);
			indices.push(a);
			indices.push(d);
			indices.push(c);
			indices.push(b);
		}
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.ComputeNormals = function(positions,indices,normals) {
	var index = 0;
	var p1p2x = 0.0;
	var p1p2y = 0.0;
	var p1p2z = 0.0;
	var p3p2x = 0.0;
	var p3p2y = 0.0;
	var p3p2z = 0.0;
	var faceNormalx = 0.0;
	var faceNormaly = 0.0;
	var faceNormalz = 0.0;
	var length = 0.0;
	var i1 = 0;
	var i2 = 0;
	var i3 = 0;
	var _g1 = 0;
	var _g = positions.length;
	while(_g1 < _g) {
		var index1 = _g1++;
		normals[index1] = 0.0;
	}
	var nbFaces = indices.length / 3 | 0;
	var _g2 = 0;
	while(_g2 < nbFaces) {
		var index2 = _g2++;
		i1 = indices[index2 * 3];
		i2 = indices[index2 * 3 + 1];
		i3 = indices[index2 * 3 + 2];
		p1p2x = positions[i1 * 3] - positions[i2 * 3];
		p1p2y = positions[i1 * 3 + 1] - positions[i2 * 3 + 1];
		p1p2z = positions[i1 * 3 + 2] - positions[i2 * 3 + 2];
		p3p2x = positions[i3 * 3] - positions[i2 * 3];
		p3p2y = positions[i3 * 3 + 1] - positions[i2 * 3 + 1];
		p3p2z = positions[i3 * 3 + 2] - positions[i2 * 3 + 2];
		faceNormalx = p1p2y * p3p2z - p1p2z * p3p2y;
		faceNormaly = p1p2z * p3p2x - p1p2x * p3p2z;
		faceNormalz = p1p2x * p3p2y - p1p2y * p3p2x;
		length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);
		if(length == 0) length = 1.0; else length = length;
		faceNormalx /= length;
		faceNormaly /= length;
		faceNormalz /= length;
		normals[i1 * 3] += faceNormalx;
		normals[i1 * 3 + 1] += faceNormaly;
		normals[i1 * 3 + 2] += faceNormalz;
		normals[i2 * 3] += faceNormalx;
		normals[i2 * 3 + 1] += faceNormaly;
		normals[i2 * 3 + 2] += faceNormalz;
		normals[i3 * 3] += faceNormalx;
		normals[i3 * 3 + 1] += faceNormaly;
		normals[i3 * 3 + 2] += faceNormalz;
	}
	var nl = normals.length / 3 | 0;
	var _g3 = 0;
	while(_g3 < nl) {
		var index3 = _g3++;
		faceNormalx = normals[index3 * 3];
		faceNormaly = normals[index3 * 3 + 1];
		faceNormalz = normals[index3 * 3 + 2];
		length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);
		if(length == 0) length = 1.0; else length = length;
		faceNormalx /= length;
		faceNormaly /= length;
		faceNormalz /= length;
		normals[index3 * 3] = faceNormalx;
		normals[index3 * 3 + 1] = faceNormaly;
		normals[index3 * 3 + 2] = faceNormalz;
	}
};
com_babylonhx_mesh_VertexData._ComputeSides = function(sideOrientation,positions,indices,normals,uvs) {
	if(sideOrientation == null) sideOrientation = 0;
	var li = indices.length;
	var ln = normals.length;
	switch(sideOrientation) {
	case 0:
		break;
	case 1:
		var tmp = 0;
		var i = 0;
		while(i < li) {
			tmp = indices[i];
			indices[i] = indices[i + 2];
			indices[i + 2] = tmp;
			i += 3;
		}
		var _g = 0;
		while(_g < ln) {
			var n = _g++;
			normals[n] = -normals[n];
		}
		break;
	case 2:
		var lp = positions.length;
		var l = lp / 3 | 0;
		var _g1 = 0;
		while(_g1 < lp) {
			var p = _g1++;
			positions[lp + p] = positions[p];
		}
		var i1 = 0;
		while(i1 < li) {
			indices[i1 + li] = indices[i1 + 2] + l;
			indices[i1 + 1 + li] = indices[i1 + 1] + l;
			indices[i1 + 2 + li] = indices[i1] + l;
			i1 += 3;
		}
		var _g2 = 0;
		while(_g2 < ln) {
			var n1 = _g2++;
			normals[ln + n1] = -normals[n1];
		}
		var lu = uvs.length;
		var _g3 = 0;
		while(_g3 < lu) {
			var u = _g3++;
			uvs[u + lu] = uvs[u];
		}
		break;
	}
};
com_babylonhx_mesh_VertexData.prototype = {
	set: function(data,kind) {
		switch(kind) {
		case "position":
			this.positions = data;
			break;
		case "normal":
			this.normals = data;
			break;
		case "uv":
			this.uvs = data;
			break;
		case "uv2":
			this.uv2s = data;
			break;
		case "uv3":
			this.uv3s = data;
			break;
		case "uv4":
			this.uv4s = data;
			break;
		case "uv5":
			this.uv5s = data;
			break;
		case "uv6":
			this.uv6s = data;
			break;
		case "color":
			this.colors = data;
			break;
		case "matricesIndices":
			this.matricesIndices = data;
			break;
		case "matricesWeights":
			this.matricesWeights = data;
			break;
		case "matricesIndicesExtra":
			this.matricesIndicesExtra = data;
			break;
		case "matricesWeightsExtra":
			this.matricesWeightsExtra = data;
			break;
		default:
		}
	}
	,applyToMesh: function(mesh,updatable) {
		if(updatable == null) updatable = false;
		this._applyTo(mesh,updatable);
	}
	,applyToGeometry: function(geometry,updatable) {
		if(updatable == null) updatable = false;
		this._applyTo(geometry,updatable);
	}
	,updateMesh: function(mesh,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		this._update(mesh);
	}
	,updateGeometry: function(geometry,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		this._update(geometry);
	}
	,_applyTo: function(meshOrGeometry,updatable) {
		if(updatable == null) updatable = false;
		if(this.positions != null) meshOrGeometry.setVerticesData("position",this.positions,updatable);
		if(this.normals != null) meshOrGeometry.setVerticesData("normal",this.normals,updatable);
		if(this.uvs != null) meshOrGeometry.setVerticesData("uv",this.uvs,updatable);
		if(this.uv2s != null) meshOrGeometry.setVerticesData("uv2",this.uv2s,updatable);
		if(this.uv3s != null) meshOrGeometry.setVerticesData("uv3",this.uv3s,updatable);
		if(this.uv4s != null) meshOrGeometry.setVerticesData("uv4",this.uv4s,updatable);
		if(this.uv5s != null) meshOrGeometry.setVerticesData("uv5",this.uv5s,updatable);
		if(this.uv6s != null) meshOrGeometry.setVerticesData("uv6",this.uv6s,updatable);
		if(this.colors != null) meshOrGeometry.setVerticesData("color",this.colors,updatable);
		if(this.matricesIndices != null) meshOrGeometry.setVerticesData("matricesIndices",this.matricesIndices,updatable);
		if(this.matricesWeights != null) meshOrGeometry.setVerticesData("matricesWeights",this.matricesWeights,updatable);
		if(this.matricesIndicesExtra != null) meshOrGeometry.setVerticesData("matricesIndicesExtra",this.matricesIndicesExtra,updatable);
		if(this.matricesWeightsExtra != null) meshOrGeometry.setVerticesData("matricesWeightsExtra",this.matricesWeightsExtra,updatable);
		if(this.indices != null) meshOrGeometry.setIndices(this.indices);
	}
	,_update: function(meshOrGeometry,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(this.positions != null) meshOrGeometry.updateVerticesData("position",this.positions,updateExtends,makeItUnique);
		if(this.normals != null) meshOrGeometry.updateVerticesData("normal",this.normals,updateExtends,makeItUnique);
		if(this.uvs != null) meshOrGeometry.updateVerticesData("uv",this.uvs,updateExtends,makeItUnique);
		if(this.uv2s != null) meshOrGeometry.updateVerticesData("uv2",this.uv2s,updateExtends,makeItUnique);
		if(this.uv3s != null) meshOrGeometry.updateVerticesData("uv3",this.uv3s,updateExtends,makeItUnique);
		if(this.uv4s != null) meshOrGeometry.updateVerticesData("uv4",this.uv4s,updateExtends,makeItUnique);
		if(this.uv5s != null) meshOrGeometry.updateVerticesData("uv5",this.uv5s,updateExtends,makeItUnique);
		if(this.uv6s != null) meshOrGeometry.updateVerticesData("uv6",this.uv6s,updateExtends,makeItUnique);
		if(this.colors != null) meshOrGeometry.updateVerticesData("color",this.colors,updateExtends,makeItUnique);
		if(this.matricesIndices != null) meshOrGeometry.updateVerticesData("matricesIndices",this.matricesIndices,updateExtends,makeItUnique);
		if(this.matricesWeights != null) meshOrGeometry.updateVerticesData("matricesWeights",this.matricesWeights,updateExtends,makeItUnique);
		if(this.matricesIndicesExtra != null) meshOrGeometry.updateVerticesData("matricesIndicesExtra",this.matricesIndicesExtra,updateExtends,makeItUnique);
		if(this.matricesWeightsExtra != null) meshOrGeometry.updateVerticesData("matricesWeightsExtra",this.matricesWeightsExtra,updateExtends,makeItUnique);
		if(this.indices != null) meshOrGeometry.setIndices(this.indices);
	}
	,transform: function(matrix) {
		if(this.positions != null) {
			var position = new com_babylonhx_math_Vector3(0,0,0);
			var index = 0;
			while(index < this.positions.length) {
				com_babylonhx_math_Vector3.FromArrayToRef(this.positions,index,position);
				com_babylonhx_math_Vector3.TransformCoordinatesToRef(position,matrix,com_babylonhx_mesh_VertexData.transformed);
				this.positions[index] = com_babylonhx_mesh_VertexData.transformed.x;
				this.positions[index + 1] = com_babylonhx_mesh_VertexData.transformed.y;
				this.positions[index + 2] = com_babylonhx_mesh_VertexData.transformed.z;
				index += 3;
			}
		}
		if(this.normals != null) {
			var normal = new com_babylonhx_math_Vector3(0,0,0);
			var index1 = 0;
			while(index1 < this.normals.length) {
				com_babylonhx_math_Vector3.FromArrayToRef(this.normals,index1,normal);
				com_babylonhx_math_Vector3.TransformNormalToRef(normal,matrix,com_babylonhx_mesh_VertexData.transformed);
				this.normals[index1] = com_babylonhx_mesh_VertexData.transformed.x;
				this.normals[index1 + 1] = com_babylonhx_mesh_VertexData.transformed.y;
				this.normals[index1 + 2] = com_babylonhx_mesh_VertexData.transformed.z;
				index1 += 3;
			}
		}
	}
	,merge: function(other) {
		if(other.indices != null) {
			if(this.indices == null) this.indices = [];
			var offset;
			offset = (this.positions != null?this.positions.length / 3:0) | 0;
			var _g1 = 0;
			var _g = other.indices.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.indices.push(other.indices[index] + offset);
			}
		}
		if(other.positions != null) {
			if(this.positions == null) this.positions = [];
			var _g11 = 0;
			var _g2 = other.positions.length;
			while(_g11 < _g2) {
				var index1 = _g11++;
				this.positions.push(other.positions[index1]);
			}
		}
		if(other.normals != null) {
			if(this.normals == null) this.normals = [];
			var _g12 = 0;
			var _g3 = other.normals.length;
			while(_g12 < _g3) {
				var index2 = _g12++;
				this.normals.push(other.normals[index2]);
			}
		}
		if(other.uvs != null) {
			if(this.uvs == null) this.uvs = [];
			var _g13 = 0;
			var _g4 = other.uvs.length;
			while(_g13 < _g4) {
				var index3 = _g13++;
				this.uvs.push(other.uvs[index3]);
			}
		}
		if(other.uv2s != null) {
			if(this.uv2s == null) this.uv2s = [];
			var _g14 = 0;
			var _g5 = other.uv2s.length;
			while(_g14 < _g5) {
				var index4 = _g14++;
				this.uv2s.push(other.uv2s[index4]);
			}
		}
		if(other.uv3s != null) {
			if(this.uv3s == null) this.uv3s = [];
			var _g15 = 0;
			var _g6 = other.uv3s.length;
			while(_g15 < _g6) {
				var index5 = _g15++;
				this.uv3s.push(other.uv3s[index5]);
			}
		}
		if(other.uv4s != null) {
			if(this.uv4s == null) this.uv4s = [];
			var _g16 = 0;
			var _g7 = other.uv4s.length;
			while(_g16 < _g7) {
				var index6 = _g16++;
				this.uv4s.push(other.uv4s[index6]);
			}
		}
		if(other.uv5s != null) {
			if(this.uv5s == null) this.uv5s = [];
			var _g17 = 0;
			var _g8 = other.uv5s.length;
			while(_g17 < _g8) {
				var index7 = _g17++;
				this.uv5s.push(other.uv5s[index7]);
			}
		}
		if(other.uv6s != null) {
			if(this.uv6s == null) this.uv6s = [];
			var _g18 = 0;
			var _g9 = other.uv6s.length;
			while(_g18 < _g9) {
				var index8 = _g18++;
				this.uv6s.push(other.uv6s[index8]);
			}
		}
		if(other.matricesIndices != null) {
			if(this.matricesIndices == null) this.matricesIndices = [];
			var _g19 = 0;
			var _g10 = other.matricesIndices.length;
			while(_g19 < _g10) {
				var index9 = _g19++;
				this.matricesIndices.push(other.matricesIndices[index9]);
			}
		}
		if(other.matricesWeights != null) {
			if(this.matricesWeights == null) this.matricesWeights = [];
			var _g110 = 0;
			var _g20 = other.matricesWeights.length;
			while(_g110 < _g20) {
				var index10 = _g110++;
				this.matricesWeights.push(other.matricesWeights[index10]);
			}
		}
		if(other.matricesIndicesExtra != null) {
			if(this.matricesIndicesExtra == null) this.matricesIndicesExtra = [];
			var _g111 = 0;
			var _g21 = other.matricesIndicesExtra.length;
			while(_g111 < _g21) {
				var index11 = _g111++;
				this.matricesIndicesExtra.push(other.matricesIndicesExtra[index11]);
			}
		}
		if(other.matricesWeightsExtra != null) {
			if(this.matricesWeightsExtra == null) this.matricesWeightsExtra = [];
			var _g112 = 0;
			var _g22 = other.matricesWeightsExtra.length;
			while(_g112 < _g22) {
				var index12 = _g112++;
				this.matricesWeightsExtra.push(other.matricesWeightsExtra[index12]);
			}
		}
		if(other.colors != null) {
			if(this.colors == null) this.colors = [];
			var _g113 = 0;
			var _g23 = other.colors.length;
			while(_g113 < _g23) {
				var index13 = _g113++;
				this.colors.push(other.colors[index13]);
			}
		}
	}
	,__class__: com_babylonhx_mesh_VertexData
};
var com_babylonhx_mesh_MeshBuilder = function() { };
$hxClasses["com.babylonhx.mesh.MeshBuilder"] = com_babylonhx_mesh_MeshBuilder;
com_babylonhx_mesh_MeshBuilder.__name__ = true;
com_babylonhx_mesh_MeshBuilder.CreateBox = function(name,options,scene) {
	var box = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateBox(options);
	if(scene._physicsEngine != null) {
		box.physicsDim = { };
		box.physicsDim.size = options;
	}
	vertexData.applyToMesh(box,options.updatable);
	return box;
};
com_babylonhx_mesh_MeshBuilder.CreateSphere = function(name,options,scene) {
	var sphere = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateSphere(options);
	vertexData.applyToMesh(sphere,options.updatable);
	if(scene._physicsEngine != null) {
		sphere.physicsDim = { };
		sphere.physicsDim.diameter = options.diameterX / 2;
	}
	return sphere;
};
com_babylonhx_mesh_MeshBuilder.CreateIcoSphere = function(name,options,scene) {
	var sphere = new com_babylonhx_mesh_Mesh(name,scene);
	if(options.sideOrientation == null) options.sideOrientation = 0;
	if(options.updatable == null) options.updatable = false;
	var vertexData = com_babylonhx_mesh_VertexData.CreateIcoSphere(options);
	vertexData.applyToMesh(sphere,options.updatable);
	return sphere;
};
com_babylonhx_mesh_MeshBuilder.CreateDisc = function(name,options,scene) {
	var disc = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateDisc(options);
	vertexData.applyToMesh(disc,options.updatable);
	return disc;
};
com_babylonhx_mesh_MeshBuilder.CreateRibbon = function(name,options,scene) {
	var pathArray = options.pathArray;
	var closeArray = options.closeArray;
	var closePath = options.closePath;
	var offset = options.offset;
	var updatable = options.updatable;
	var sideOrientation = options.sideOrientation;
	var ribbonInstance = options.instance;
	if(ribbonInstance != null) {
		var positionFunction = function(positions) {
			var minlg = pathArray[0].length;
			var i = 0;
			var ns;
			if(ribbonInstance._sideOrientation == 2) ns = 2; else ns = 1;
			var _g1 = 1;
			var _g = ns + 1;
			while(_g1 < _g) {
				var si = _g1++;
				var _g3 = 0;
				var _g2 = pathArray.length;
				while(_g3 < _g2) {
					var p = _g3++;
					var path = pathArray[p];
					var l = path.length;
					if(minlg < l) minlg = minlg; else minlg = l;
					var j = 0;
					while(j < minlg) {
						positions[i] = path[j].x;
						positions[i + 1] = path[j].y;
						positions[i + 2] = path[j].z;
						j++;
						i += 3;
					}
					if(ribbonInstance._closePath) {
						positions[i] = path[0].x;
						positions[i + 1] = path[0].y;
						positions[i + 2] = path[0].z;
						i += 3;
					}
				}
			}
		};
		var positions1 = ribbonInstance.getVerticesData("position");
		positionFunction(positions1);
		ribbonInstance.updateVerticesData("position",positions1,true,false);
		if(!ribbonInstance._areNormalsFrozen) {
			var indices = ribbonInstance.getIndices();
			var normals = ribbonInstance.getVerticesData("normal");
			com_babylonhx_mesh_VertexData.ComputeNormals(positions1,indices,normals);
			if(ribbonInstance._closePath) {
				var indexFirst = 0;
				var indexLast = 0;
				var _g11 = 0;
				var _g4 = pathArray.length;
				while(_g11 < _g4) {
					var p1 = _g11++;
					indexFirst = ribbonInstance._idx[p1] * 3;
					if(p1 + 1 < pathArray.length) indexLast = (ribbonInstance._idx[p1 + 1] - 1) * 3; else indexLast = normals.length - 3;
					normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;
					normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;
					normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;
					normals[indexLast] = normals[indexFirst];
					normals[indexLast + 1] = normals[indexFirst + 1];
					normals[indexLast + 2] = normals[indexFirst + 2];
				}
			}
			ribbonInstance.updateVerticesData("normal",normals,true,false);
		}
		return ribbonInstance;
	} else {
		var ribbon = new com_babylonhx_mesh_Mesh(name,scene);
		ribbon._sideOrientation = sideOrientation;
		sideOrientation;
		var vertexData = com_babylonhx_mesh_VertexData.CreateRibbon({ pathArray : pathArray, closeArray : closeArray, closePath : closePath, offset : offset, sideOrientation : sideOrientation});
		if(closePath) ribbon._idx = vertexData._idx;
		ribbon._closePath = closePath;
		ribbon._closeArray = closeArray;
		vertexData.applyToMesh(ribbon,updatable);
		return ribbon;
	}
};
com_babylonhx_mesh_MeshBuilder.CreateCylinder = function(name,options,scene) {
	var cylinder = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateCylinder(options);
	if(scene._physicsEngine != null) {
		cylinder.physicsDim = { };
		cylinder.physicsDim.height = options.height;
		if(options.diameterBottom > options.diameterTop) cylinder.physicsDim.diameter = options.diameterBottom; else cylinder.physicsDim.diameter = options.diameterTop;
	}
	vertexData.applyToMesh(cylinder,options.updatable);
	return cylinder;
};
com_babylonhx_mesh_MeshBuilder.CreateTorus = function(name,options,scene) {
	var torus = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateTorus(options);
	vertexData.applyToMesh(torus,options.updatable);
	return torus;
};
com_babylonhx_mesh_MeshBuilder.CreateTorusKnot = function(name,options,scene) {
	var torusKnot = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateTorusKnot(options);
	vertexData.applyToMesh(torusKnot,options.updatable);
	return torusKnot;
};
com_babylonhx_mesh_MeshBuilder.CreateLines = function(name,options,scene) {
	var linesInstance = options.instance;
	var points = options.points;
	if(linesInstance != null) {
		var positionFunction = function(positions) {
			var i = 0;
			var _g1 = 0;
			var _g = points.length;
			while(_g1 < _g) {
				var p = _g1++;
				positions[i] = points[p].x;
				positions[i + 1] = points[p].y;
				positions[i + 2] = points[p].z;
				i += 3;
			}
		};
		linesInstance.updateMeshPositions(positionFunction,false);
		return linesInstance;
	}
	var lines = new com_babylonhx_mesh_LinesMesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateLines(options);
	vertexData.applyToMesh(lines,options.updatable);
	return lines;
};
com_babylonhx_mesh_MeshBuilder.CreateDashedLines = function(name,options,scene) {
	var points = options.points;
	var linesInstance = options.instance;
	var gapSize = options.gapSize;
	var dashNb = options.dashNb;
	var dashSize = options.dashSize;
	if(linesInstance != null) {
		var positionFunction = function(positions) {
			var curvect = new com_babylonhx_math_Vector3(0,0,0);
			var nbSeg = positions.length / 6;
			var lg = 0;
			var nb = 0;
			var shft = 0;
			var dashshft = 0;
			var curshft = 0;
			var p = 0;
			var i = 0;
			var j = 0;
			var _g1 = 0;
			var _g = points.length - 1;
			while(_g1 < _g) {
				var i1 = _g1++;
				points[i1 + 1].subtractToRef(points[i1],curvect);
				lg += Math.sqrt(curvect.x * curvect.x + curvect.y * curvect.y + curvect.z * curvect.z);
			}
			shft = lg / nbSeg;
			dashshft = linesInstance.dashSize * shft / (linesInstance.dashSize + linesInstance.gapSize);
			while(i < points.length - 1) {
				points[i + 1].subtractToRef(points[i],curvect);
				nb = Math.floor(Math.sqrt(curvect.x * curvect.x + curvect.y * curvect.y + curvect.z * curvect.z) / shft);
				curvect.normalize();
				j = 0;
				while(j < nb && p < positions.length) {
					curshft = shft * j;
					positions[p] = points[i].x + curshft * curvect.x;
					positions[p + 1] = points[i].y + curshft * curvect.y;
					positions[p + 2] = points[i].z + curshft * curvect.z;
					positions[p + 3] = points[i].x + (curshft + dashshft) * curvect.x;
					positions[p + 4] = points[i].y + (curshft + dashshft) * curvect.y;
					positions[p + 5] = points[i].z + (curshft + dashshft) * curvect.z;
					p += 6;
					j++;
				}
				++i;
			}
			while(p < positions.length) {
				positions[p] = points[i].x;
				positions[p + 1] = points[i].y;
				positions[p + 2] = points[i].z;
				p += 3;
			}
		};
		linesInstance.updateMeshPositions(positionFunction,false);
		return linesInstance;
	}
	var dashedLines = new com_babylonhx_mesh_LinesMesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateDashedLines(options);
	vertexData.applyToMesh(dashedLines,options.updatable);
	dashedLines.dashSize = dashSize;
	dashedLines.gapSize = gapSize;
	return dashedLines;
};
com_babylonhx_mesh_MeshBuilder.ExtrudeShape = function(name,options,scene) {
	var path = options.path;
	var shape = options.shape;
	var scale;
	if(options.scale != null) scale = options.scale; else scale = 1;
	var rotation;
	if(options.rotation != null) rotation = options.rotation; else rotation = 0;
	var cap;
	if(options.cap != null) cap = options.cap; else cap = 0;
	var updatable = options.updatable;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var extrudedInstance = options.extrudedInstance;
	return com_babylonhx_mesh_MeshBuilder._ExtrudeShapeGeneric(name,shape,path,scale,rotation,null,null,false,false,cap,false,scene,updatable,sideOrientation,extrudedInstance);
};
com_babylonhx_mesh_MeshBuilder.ExtrudeShapeCustom = function(name,options,scene) {
	var path = options.path;
	var shape = options.shape;
	var scaleFunction;
	if(options.scaleFunction != null) scaleFunction = options.scaleFunction; else scaleFunction = function(dummy1,dummy2) {
		if(dummy2 == null) dummy2 = 0;
		if(dummy1 == null) dummy1 = 0;
		return 1;
	};
	var rotationFunction;
	if(options.rotationFunction != null) rotationFunction = options.rotationFunction; else rotationFunction = function(dummy11,dummy21) {
		if(dummy21 == null) dummy21 = 0;
		if(dummy11 == null) dummy11 = 0;
		return 0;
	};
	var ribbonCloseArray;
	if(options.ribbonCloseArray != null) ribbonCloseArray = options.ribbonCloseArray; else ribbonCloseArray = false;
	var ribbonClosePath;
	if(options.ribbonClosePath != null) ribbonClosePath = options.ribbonClosePath; else ribbonClosePath = false;
	var cap;
	if(options.cap != null) cap = options.cap; else cap = 0;
	var updatable = options.updatable;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var extrudedInstance = options.extrudedInstance;
	return com_babylonhx_mesh_MeshBuilder._ExtrudeShapeGeneric(name,shape,path,null,null,scaleFunction,rotationFunction,ribbonCloseArray,ribbonClosePath,cap,true,scene,updatable,sideOrientation,extrudedInstance);
};
com_babylonhx_mesh_MeshBuilder.CreateLathe = function(name,options,scene) {
	var arc;
	if(options.arc != null) arc = options.arc; else arc = 1.0;
	if(arc <= 0) arc = 1.0;
	var closed;
	if(options.closed == null) closed = true; else closed = options.closed;
	var shape = options.shape;
	var radius;
	if(options.radius != null) radius = options.radius; else radius = 1;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 64;
	var updatable = options.updatable;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var pi2 = Math.PI * 2;
	var shapeLathe = [];
	var i = 0;
	while(shape[i].x == 0) i++;
	var pt = shape[i];
	var _g1 = 0;
	var _g = shape.length;
	while(_g1 < _g) {
		var i1 = _g1++;
		shapeLathe.push(shape[i1].subtract(pt));
	}
	var step = pi2 / tessellation;
	var rotated = null;
	var path = [];
	var _g2 = 0;
	while(_g2 < tessellation) {
		var i2 = _g2++;
		rotated = new com_babylonhx_math_Vector3(Math.cos(i2 * step) * radius,0,Math.sin(i2 * step) * radius);
		path.push(rotated);
	}
	if(closed) path.push(path[0]);
	var scaleFunction = function(dummy1,dummy2) {
		if(dummy2 == null) dummy2 = 0;
		if(dummy1 == null) dummy1 = 0;
		return 1;
	};
	var rotateFunction = function(dummy11,dummy21) {
		if(dummy21 == null) dummy21 = 0;
		if(dummy11 == null) dummy11 = 0;
		return 0;
	};
	var lathe = com_babylonhx_mesh_MeshBuilder.ExtrudeShapeCustom(name,options,scene);
	return lathe;
};
com_babylonhx_mesh_MeshBuilder.CreatePlane = function(name,options,scene) {
	var plane = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreatePlane(options);
	vertexData.applyToMesh(plane,options.updatable);
	return plane;
};
com_babylonhx_mesh_MeshBuilder.CreateGround = function(name,options,scene) {
	var ground = new com_babylonhx_mesh_GroundMesh(name,scene);
	ground._setReady(false);
	if(options.subdivision != null) ground._subdivisions = options.subdivision; else ground._subdivisions = 1;
	var vertexData = com_babylonhx_mesh_VertexData.CreateGround(options);
	vertexData.applyToMesh(ground,options.updatable);
	ground._setReady(true);
	return ground;
};
com_babylonhx_mesh_MeshBuilder.CreateTiledGround = function(name,options,scene) {
	var tiledGround = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateTiledGround(options);
	vertexData.applyToMesh(tiledGround,options.updatable);
	return tiledGround;
};
com_babylonhx_mesh_MeshBuilder.CreateGroundFromHeightMap = function(name,url,options,scene) {
	var width;
	if(options.width != null) width = options.width; else width = 10;
	var height;
	if(options.height != null) height = options.height; else height = 10;
	var subdivisions;
	if(options.subdivisions != null) subdivisions = options.subdivisions; else subdivisions = 1;
	var minHeight;
	if(options.minHeight != null) minHeight = options.minHeight; else minHeight = 0;
	var maxHeight;
	if(options.maxHeight != null) maxHeight = options.maxHeight; else maxHeight = 10;
	var updatable = options.updatable;
	var onReady = options.onReady;
	var ground = new com_babylonhx_mesh_GroundMesh(name,scene);
	ground._subdivisions = subdivisions;
	ground._setReady(false);
	var onload = function(img) {
		options.buffer = img.data;
		options.bufferWidth = img.width;
		options.bufferHeight = img.height;
		var vertexData = com_babylonhx_mesh_VertexData.CreateGroundFromHeightMap(options);
		vertexData.applyToMesh(ground,updatable);
		ground._setReady(true);
		if(onReady != null) onReady(ground);
	};
	com_babylonhx_tools_Tools.LoadImage(url,onload);
	return ground;
};
com_babylonhx_mesh_MeshBuilder.CreateTube = function(name,options,scene) {
	var path = options.path;
	var radius;
	if(options.radius != null) radius = options.radius; else radius = 1;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 64;
	var radiusFunction = options.radiusFunction;
	var cap;
	if(options.cap != null) cap = options.cap; else cap = 0;
	var updatable = options.updatable;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var tubeInstance = options.instance;
	var tubePathArray = function(path1,path3D,circlePaths,radius1,tessellation1,radiusFunction1,cap1) {
		var tangents = path3D.getTangents();
		var normals = path3D.getNormals();
		var distances = path3D.getDistances();
		var pi2 = Math.PI * 2;
		var step = pi2 / tessellation1;
		var returnRadius = function(i,distance) {
			return radius1;
		};
		var radiusFunctionFinal;
		if(radiusFunction1 != null) radiusFunctionFinal = radiusFunction1; else radiusFunctionFinal = returnRadius;
		var circlePath = [];
		var rad = 0;
		var normal = new com_babylonhx_math_Vector3(0,0,0);
		var rotated = new com_babylonhx_math_Vector3(0,0,0);
		var rotationMatrix;
		var index = 0;
		var _g1 = 0;
		var _g2 = path1.length;
		while(_g1 < _g2) {
			var i2 = _g1++;
			rad = radiusFunctionFinal(i2,distances[i2]);
			circlePath = [];
			normal = normals[i2];
			var ang = 0.0;
			var _g21 = 0;
			while(_g21 < tessellation1) {
				var t = _g21++;
				rotationMatrix = com_babylonhx_math_Matrix.RotationAxis(tangents[i2],step * t);
				rotated = com_babylonhx_math_Vector3.TransformCoordinates(normal,rotationMatrix).scaleInPlace(rad).add(path1[i2]);
				circlePath.push(rotated);
			}
			circlePath.push(circlePath[0]);
			circlePaths[index] = circlePath;
			index++;
		}
		var capPath = function(nbPoints,pathIndex) {
			var pointCap = [];
			var _g = 0;
			while(_g < nbPoints) {
				var i1 = _g++;
				pointCap.push(path1[pathIndex]);
			}
			return pointCap;
		};
		switch(cap1) {
		case 0:
			break;
		case 1:
			circlePaths.unshift(capPath(tessellation1 + 1,0));
			break;
		case 2:
			circlePaths.push(capPath(tessellation1 + 1,path1.length - 1));
			break;
		case 3:
			circlePaths.unshift(capPath(tessellation1 + 1,0));
			circlePaths.push(capPath(tessellation1 + 1,path1.length - 1));
			break;
		default:
		}
		return circlePaths;
	};
	if(tubeInstance != null) {
		var path3D2 = tubeInstance.path3D.update(path);
		var pathArray1 = tubePathArray(path,path3D2,tubeInstance.pathArray,radius,tubeInstance.tessellation,radiusFunction,tubeInstance.cap);
		tubeInstance = com_babylonhx_mesh_MeshBuilder.CreateRibbon(null,{ pathArray : pathArray1, instance : tubeInstance},scene);
		return tubeInstance;
	}
	var path3D1 = new com_babylonhx_math_Path3D(path);
	var newPathArray = [];
	if(cap < 0 || cap > 3) cap = 0; else cap = cap;
	var pathArray = tubePathArray(path,path3D1,newPathArray,radius,tessellation,radiusFunction,cap);
	var tube = com_babylonhx_mesh_MeshBuilder.CreateRibbon(name,{ pathArray : pathArray, closeArray : false, closePath : true, offset : 0, updatable : updatable, sideOrientation : sideOrientation},scene);
	tube.pathArray = pathArray;
	tube.path3D = path3D1;
	tube.tessellation = tessellation;
	tube.cap = cap;
	return tube;
};
com_babylonhx_mesh_MeshBuilder.CreatePolyhedron = function(name,options,scene) {
	var polyhedron = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreatePolyhedron(options);
	vertexData.applyToMesh(polyhedron,options.updatable);
	return polyhedron;
};
com_babylonhx_mesh_MeshBuilder.CreateDecal = function(name,sourceMesh,options) {
	var position;
	if(options.position != null) position = options.position; else position = new com_babylonhx_math_Vector3(0,0,0);
	var normal = options.normal;
	var size;
	if(options.size != null) size = options.size; else size = new com_babylonhx_math_Vector3(1,1,1);
	var angle = options.angle;
	com_babylonhx_mesh_MeshBuilder.CreateDecal_indices = sourceMesh.getIndices();
	com_babylonhx_mesh_MeshBuilder.CreateDecal_positions = sourceMesh.getVerticesData("position");
	com_babylonhx_mesh_MeshBuilder.CreateDecal_normals = sourceMesh.getVerticesData("normal");
	if(normal == null) {
		var camera = sourceMesh._scene.activeCamera;
		com_babylonhx_mesh_MeshBuilder.CreateDecal_cameraWorldTarget = com_babylonhx_math_Vector3.TransformCoordinates(com_babylonhx_mesh_MeshBuilder.CreateDecal_target,camera.getWorldMatrix());
		normal = camera.get_globalPosition().subtract(com_babylonhx_mesh_MeshBuilder.CreateDecal_cameraWorldTarget);
	}
	var yaw = -Math.atan2(normal.z,normal.x) - Math.PI / 2;
	var len = Math.sqrt(normal.x * normal.x + normal.z * normal.z);
	var pitch = Math.atan2(normal.y,len);
	com_babylonhx_mesh_MeshBuilder.decalWorldMatrix = com_babylonhx_math_Matrix.RotationYawPitchRoll(yaw,pitch,angle).multiply(com_babylonhx_math_Matrix.Translation(position.x,position.y,position.z));
	com_babylonhx_mesh_MeshBuilder.inverseDecalWorldMatrix = com_babylonhx_math_Matrix.Invert(com_babylonhx_mesh_MeshBuilder.decalWorldMatrix);
	com_babylonhx_mesh_MeshBuilder.CreateDecal_meshWorldMatrix = sourceMesh.getWorldMatrix();
	com_babylonhx_mesh_MeshBuilder.CreateDecal_transformMatrix = com_babylonhx_mesh_MeshBuilder.CreateDecal_meshWorldMatrix.multiply(com_babylonhx_mesh_MeshBuilder.inverseDecalWorldMatrix);
	com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.indices = [];
	com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.positions = [];
	com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.normals = [];
	com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.uvs = [];
	var currentCreateDecal_vertexDataIndex = 0;
	var extractDecalVector3 = function(indexId) {
		var vertexId = com_babylonhx_mesh_MeshBuilder.CreateDecal_indices[indexId];
		var result = new com_babylonhx_math_PositionNormalVertex();
		result.position = new com_babylonhx_math_Vector3(com_babylonhx_mesh_MeshBuilder.CreateDecal_positions[vertexId * 3],com_babylonhx_mesh_MeshBuilder.CreateDecal_positions[vertexId * 3 + 1],com_babylonhx_mesh_MeshBuilder.CreateDecal_positions[vertexId * 3 + 2]);
		result.position = com_babylonhx_math_Vector3.TransformCoordinates(result.position,com_babylonhx_mesh_MeshBuilder.CreateDecal_transformMatrix);
		result.normal = new com_babylonhx_math_Vector3(com_babylonhx_mesh_MeshBuilder.CreateDecal_normals[vertexId * 3],com_babylonhx_mesh_MeshBuilder.CreateDecal_normals[vertexId * 3 + 1],com_babylonhx_mesh_MeshBuilder.CreateDecal_normals[vertexId * 3 + 2]);
		return result;
	};
	var clip = function(vertices,axis) {
		if(vertices.length == 0) return vertices;
		var clipSize = 0.5 * Math.abs(size.x * axis.x + size.y * axis.y + size.z * axis.z);
		var clipVertices = function(v0,v1) {
			var clipFactor = com_babylonhx_math_Vector3.GetClipFactor(v0.position,v1.position,axis,clipSize);
			return new com_babylonhx_math_PositionNormalVertex(com_babylonhx_math_Vector3.Lerp(v0.position,v1.position,clipFactor),com_babylonhx_math_Vector3.Lerp(v0.normal,v1.normal,clipFactor));
		};
		var result1 = [];
		var v1Out = false;
		var v2Out = false;
		var v3Out = false;
		var total = 0;
		var nV1 = null;
		var nV2 = null;
		var nV3 = null;
		var nV4 = null;
		var d1 = 0.0;
		var d2 = 0.0;
		var d3 = 0.0;
		var index = 0;
		while(index < vertices.length) {
			d1 = com_babylonhx_math_Vector3.Dot(vertices[index].position,axis) - clipSize;
			d2 = com_babylonhx_math_Vector3.Dot(vertices[index + 1].position,axis) - clipSize;
			d3 = com_babylonhx_math_Vector3.Dot(vertices[index + 2].position,axis) - clipSize;
			v1Out = d1 > 0;
			v2Out = d2 > 0;
			v3Out = d3 > 0;
			total = (v1Out?1:0) + (v2Out?1:0) + (v3Out?1:0);
			switch(total) {
			case 0:
				result1.push(vertices[index]);
				result1.push(vertices[index + 1]);
				result1.push(vertices[index + 2]);
				break;
			case 1:
				if(v1Out) {
					nV1 = vertices[index + 1];
					nV2 = vertices[index + 2];
					nV3 = clipVertices(vertices[index],nV1);
					nV4 = clipVertices(vertices[index],nV2);
				}
				if(v2Out) {
					nV1 = vertices[index];
					nV2 = vertices[index + 2];
					nV3 = clipVertices(vertices[index + 1],nV1);
					nV4 = clipVertices(vertices[index + 1],nV2);
					result1.push(nV3);
					result1.push(nV2.clone());
					result1.push(nV1.clone());
					result1.push(nV2.clone());
					result1.push(nV3.clone());
					result1.push(nV4);
				} else {
					if(v3Out) {
						nV1 = vertices[index];
						nV2 = vertices[index + 1];
						nV3 = clipVertices(vertices[index + 2],nV1);
						nV4 = clipVertices(vertices[index + 2],nV2);
					}
					result1.push(nV1.clone());
					result1.push(nV2.clone());
					result1.push(nV3);
					result1.push(nV4);
					result1.push(nV3.clone());
					result1.push(nV2.clone());
				}
				break;
			case 2:
				if(!v1Out) {
					nV1 = vertices[index].clone();
					nV2 = clipVertices(nV1,vertices[index + 1]);
					nV3 = clipVertices(nV1,vertices[index + 2]);
					result1.push(nV1);
					result1.push(nV2);
					result1.push(nV3);
				}
				if(!v2Out) {
					nV1 = vertices[index + 1].clone();
					nV2 = clipVertices(nV1,vertices[index + 2]);
					nV3 = clipVertices(nV1,vertices[index]);
					result1.push(nV1);
					result1.push(nV2);
					result1.push(nV3);
				}
				if(!v3Out) {
					nV1 = vertices[index + 2].clone();
					nV2 = clipVertices(nV1,vertices[index]);
					nV3 = clipVertices(nV1,vertices[index + 1]);
					result1.push(nV1);
					result1.push(nV2);
					result1.push(nV3);
				}
				break;
			case 3:
				break;
			}
			index += 3;
		}
		return result1;
	};
	var faceVertices = [];
	var index1 = 0;
	while(index1 < com_babylonhx_mesh_MeshBuilder.CreateDecal_indices.length) {
		faceVertices = [];
		faceVertices.push(extractDecalVector3(index1));
		faceVertices.push(extractDecalVector3(index1 + 1));
		faceVertices.push(extractDecalVector3(index1 + 2));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(1,0,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(-1,0,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,1,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,-1,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,0,1));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,0,-1));
		if(faceVertices.length == 0) {
			index1 += 3;
			continue;
		}
		var localRotationMatrix = com_babylonhx_math_Matrix.RotationYawPitchRoll(yaw,pitch,angle);
		var vertex = null;
		var _g1 = 0;
		var _g = faceVertices.length;
		while(_g1 < _g) {
			var vIndex = _g1++;
			vertex = faceVertices[vIndex];
			com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.indices.push(currentCreateDecal_vertexDataIndex);
			vertex.position.toArray(com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.positions,currentCreateDecal_vertexDataIndex * 3);
			vertex.normal.toArray(com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.normals,currentCreateDecal_vertexDataIndex * 3);
			com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.uvs.push(0.5 + vertex.position.x / size.x);
			com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.uvs.push(0.5 + vertex.position.y / size.y);
			currentCreateDecal_vertexDataIndex++;
		}
		index1 += 3;
	}
	var decal = new com_babylonhx_mesh_Mesh(name,sourceMesh._scene);
	com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.applyToMesh(decal);
	decal.position = new com_babylonhx_math_Vector3(position.x,position.y,position.z);
	decal.rotation = new com_babylonhx_math_Vector3(pitch,yaw,angle);
	return decal;
};
com_babylonhx_mesh_MeshBuilder._ExtrudeShapeGeneric = function(name,shape,curve,scale,rotation,scaleFunction,rotateFunction,rbCA,rbCP,cap,custom,scene,updtbl,side,instance) {
	var extrusionPathArray = function(shape1,curve1,path3D,shapePaths,scale1,rotation1,scaleFunction1,rotateFunction1,cap1,custom1) {
		if(custom1 == null) custom1 = false;
		var tangents = path3D.getTangents();
		var normals = path3D.getNormals();
		var binormals = path3D.getBinormals();
		var distances = path3D.getDistances();
		var angle = 0;
		var returnScale = function(i,distance) {
			return scale1;
		};
		var returnRotation = function(i1,distance1) {
			return rotation1;
		};
		var rotate;
		if(rotateFunction1 != null) rotate = rotateFunction1; else rotate = returnRotation;
		var scl;
		if(scaleFunction1 != null) scl = scaleFunction1; else scl = returnScale;
		var index = 0;
		var _g12 = 0;
		var _g3 = curve1.length;
		while(_g12 < _g3) {
			var i4 = _g12++;
			var shapePath1 = [];
			var angleStep = rotate(i4,distances[i4]);
			var scaleRatio = scl(i4,distances[i4]);
			var _g31 = 0;
			var _g21 = shape1.length;
			while(_g31 < _g21) {
				var p = _g31++;
				var rotationMatrix = com_babylonhx_math_Matrix.RotationAxis(tangents[i4],angle);
				var planed = tangents[i4].scale(shape1[p].z).add(normals[i4].scale(shape1[p].x)).add(binormals[i4].scale(shape1[p].y));
				var rotated = com_babylonhx_math_Vector3.TransformCoordinates(planed,rotationMatrix).scaleInPlace(scaleRatio).add(curve1[i4]);
				shapePath1.push(rotated);
			}
			shapePaths[index] = shapePath1;
			angle += angleStep;
			index++;
		}
		var capPath = function(shapePath) {
			var pointCap = [];
			var barycenter = new com_babylonhx_math_Vector3(0,0,0);
			var _g1 = 0;
			var _g = shapePath.length;
			while(_g1 < _g) {
				var i2 = _g1++;
				barycenter.addInPlace(shapePath[i2]);
			}
			barycenter.scaleInPlace(1 / shapePath.length);
			var _g11 = 0;
			var _g2 = shapePath.length;
			while(_g11 < _g2) {
				var i3 = _g11++;
				pointCap.push(barycenter);
			}
			return pointCap;
		};
		switch(cap1) {
		case 0:
			break;
		case 1:
			shapePaths.unshift(capPath(shapePaths[0]));
			break;
		case 2:
			shapePaths.push(capPath(shapePaths[shapePaths.length - 1]));
			break;
		case 3:
			shapePaths.unshift(capPath(shapePaths[0]));
			shapePaths.push(capPath(shapePaths[shapePaths.length - 1]));
			break;
		default:
		}
		return shapePaths;
	};
	if(instance != null) {
		var path3D2 = instance.path3D.update(curve);
		var pathArray1 = extrusionPathArray(shape,curve,instance.path3D,instance.pathArray,scale,rotation,scaleFunction,rotateFunction,instance.cap,custom);
		instance = com_babylonhx_mesh_Mesh.CreateRibbon(null,pathArray1,false,false,0,null,false,0,instance);
		return instance;
	}
	var path3D1 = new com_babylonhx_math_Path3D(curve);
	var newShapePaths = [];
	if(cap < 0 || cap > 3) cap = 0; else cap = cap;
	var pathArray = extrusionPathArray(shape,curve,path3D1,newShapePaths,scale,rotation,scaleFunction,rotateFunction,cap,custom);
	var extrudedGeneric = com_babylonhx_mesh_Mesh.CreateRibbon(name,pathArray,rbCA,rbCP,0,scene,updtbl,side);
	extrudedGeneric.pathArray = pathArray;
	extrudedGeneric.path3D = path3D1;
	extrudedGeneric.cap = cap;
	return extrudedGeneric;
};
var com_babylonhx_mesh_MeshLODLevel = $hx_exports.BABYLON.MeshLODLevel = function(distance,mesh) {
	this.distance = distance;
	this.mesh = mesh;
};
$hxClasses["com.babylonhx.mesh.MeshLODLevel"] = com_babylonhx_mesh_MeshLODLevel;
com_babylonhx_mesh_MeshLODLevel.__name__ = true;
com_babylonhx_mesh_MeshLODLevel.prototype = {
	__class__: com_babylonhx_mesh_MeshLODLevel
};
var com_babylonhx_mesh_SubMesh = $hx_exports.BABYLON.SubMesh = function(materialIndex,verticesStart,verticesCount,indexStart,indexCount,mesh,renderingMesh,createBoundingBox) {
	if(createBoundingBox == null) createBoundingBox = true;
	this._renderId = 0;
	this.materialIndex = materialIndex;
	this.verticesStart = verticesStart;
	this.verticesCount = verticesCount;
	this.indexStart = indexStart;
	this.indexCount = indexCount;
	this._mesh = mesh;
	if(renderingMesh != null) this._renderingMesh = renderingMesh; else this._renderingMesh = js_Boot.__cast(mesh , com_babylonhx_mesh_Mesh);
	mesh.subMeshes.push(this);
	this._trianglePlanes = [];
	this._id = mesh.subMeshes.length - 1;
	if(createBoundingBox) {
		this.refreshBoundingInfo();
		mesh.computeWorldMatrix(true);
	}
};
$hxClasses["com.babylonhx.mesh.SubMesh"] = com_babylonhx_mesh_SubMesh;
com_babylonhx_mesh_SubMesh.__name__ = true;
com_babylonhx_mesh_SubMesh.CreateFromIndices = function(materialIndex,startIndex,indexCount,mesh,renderingMesh) {
	var minVertexIndex = Infinity;
	var maxVertexIndex = -Infinity;
	if(renderingMesh != null) renderingMesh = renderingMesh; else renderingMesh = js_Boot.__cast(mesh , com_babylonhx_mesh_Mesh);
	var indices = renderingMesh.getIndices();
	var _g1 = startIndex;
	var _g = startIndex + indexCount;
	while(_g1 < _g) {
		var index = _g1++;
		var vertexIndex = indices[index];
		if(vertexIndex < minVertexIndex) minVertexIndex = vertexIndex;
		if(vertexIndex > maxVertexIndex) maxVertexIndex = vertexIndex;
	}
	return new com_babylonhx_mesh_SubMesh(materialIndex,minVertexIndex | 0,maxVertexIndex - minVertexIndex + 1 | 0,startIndex,indexCount,mesh,renderingMesh);
};
com_babylonhx_mesh_SubMesh.prototype = {
	getBoundingInfo: function() {
		return this._boundingInfo;
	}
	,getMesh: function() {
		return this._mesh;
	}
	,getRenderingMesh: function() {
		return this._renderingMesh;
	}
	,getMaterial: function() {
		var rootMaterial = this._renderingMesh.get_material();
		if(rootMaterial != null && js_Boot.__instanceof(rootMaterial,com_babylonhx_materials_MultiMaterial)) {
			var multiMaterial = rootMaterial;
			return multiMaterial.getSubMaterial(this.materialIndex);
		}
		if(rootMaterial == null) return this._mesh._scene.defaultMaterial;
		return rootMaterial;
	}
	,refreshBoundingInfo: function() {
		var data = this._renderingMesh.getVerticesData("position");
		if(data == null) {
			this._boundingInfo = this._mesh._boundingInfo;
			return;
		}
		var indices = this._renderingMesh.getIndices();
		var extend = { minimum : new com_babylonhx_math_Vector3(0,0,0), maximum : new com_babylonhx_math_Vector3(0,0,0)};
		if(this.indexStart == 0 && this.indexCount == indices.length) extend = { minimum : this._renderingMesh.getBoundingInfo().minimum.clone(), maximum : this._renderingMesh.getBoundingInfo().maximum.clone()}; else extend = com_babylonhx_tools_Tools.ExtractMinAndMaxIndexed(data,indices,this.indexStart,this.indexCount);
		this._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
	}
	,_checkCollision: function(collider) {
		return this._boundingInfo._checkCollision(collider);
	}
	,updateBoundingInfo: function(world) {
		if(this._boundingInfo == null) this.refreshBoundingInfo();
		this._boundingInfo._update(world);
	}
	,isInFrustum: function(frustumPlanes) {
		return this._boundingInfo.isInFrustum(frustumPlanes);
	}
	,render: function(enableAlphaMode) {
		this._renderingMesh.render(this,enableAlphaMode);
	}
	,getLinesIndexBuffer: function(indices,engine) {
		if(this._linesIndexBuffer == null) {
			var linesIndices = [];
			var index = this.indexStart;
			while(index < this.indexStart + this.indexCount) {
				linesIndices.push(indices[index]);
				linesIndices.push(indices[index + 1]);
				linesIndices.push(indices[index + 1]);
				linesIndices.push(indices[index + 2]);
				linesIndices.push(indices[index + 2]);
				linesIndices.push(indices[index]);
				index += 3;
			}
			this._linesIndexBuffer = engine.createIndexBuffer(linesIndices);
			this.linesIndexCount = linesIndices.length;
		}
		return this._linesIndexBuffer;
	}
	,canIntersects: function(ray) {
		return ray.intersectsBox(this._boundingInfo.boundingBox);
	}
	,intersects: function(ray,positions,indices,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var intersectInfo = null;
		if(positions != null && indices != null) {
			var index = this.indexStart;
			while(index < this.indexStart + this.indexCount) {
				var p0 = positions[indices[index]];
				var p1 = positions[indices[index + 1]];
				var p2 = positions[indices[index + 2]];
				var currentIntersectInfo = ray.intersectsTriangle(p0,p1,p2);
				if(currentIntersectInfo != null) {
					if(currentIntersectInfo.distance < 0) continue;
					if(fastCheck || intersectInfo == null || currentIntersectInfo.distance < intersectInfo.distance) {
						intersectInfo = currentIntersectInfo;
						intersectInfo.faceId = index / 3 | 0;
						if(fastCheck) break;
					}
				}
				index += 3;
			}
		}
		return intersectInfo;
	}
	,clone: function(newMesh,newRenderingMesh) {
		var result = new com_babylonhx_mesh_SubMesh(this.materialIndex,this.verticesStart,this.verticesCount,this.indexStart,this.indexCount,newMesh,newRenderingMesh,false);
		result._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._boundingInfo.minimum,this._boundingInfo.maximum);
		return result;
	}
	,dispose: function() {
		if(this._linesIndexBuffer != null) {
			this._mesh._scene._engine._releaseBuffer(this._linesIndexBuffer);
			this._linesIndexBuffer = null;
		}
		HxOverrides.remove(this._mesh.subMeshes,this);
	}
	,__class__: com_babylonhx_mesh_SubMesh
};
var com_babylonhx_mesh_VertexBuffer = $hx_exports.BABYLON.VertexBuffer = function(engine,data,kind,updatable,postponeInternalCreation,stride) {
	if(postponeInternalCreation == null) postponeInternalCreation = false;
	this._engine = engine;
	this._updatable = updatable;
	this._data = data;
	if(!postponeInternalCreation) this.create();
	this._kind = kind;
	if(stride != null) {
		this._strideSize = stride;
		return;
	}
	switch(kind) {
	case "position":
		this._strideSize = 3;
		break;
	case "normal":
		this._strideSize = 3;
		break;
	case "uv":case "uv2":case "uv3":case "uv4":case "uv5":case "uv6":
		this._strideSize = 2;
		break;
	case "color":
		this._strideSize = 4;
		break;
	case "matricesIndices":case "matricesIndicesExtra":
		this._strideSize = 4;
		break;
	case "matricesWeights":case "matricesWeightsExtra":
		this._strideSize = 4;
		break;
	}
};
$hxClasses["com.babylonhx.mesh.VertexBuffer"] = com_babylonhx_mesh_VertexBuffer;
com_babylonhx_mesh_VertexBuffer.__name__ = true;
com_babylonhx_mesh_VertexBuffer.prototype = {
	isUpdatable: function() {
		return this._updatable;
	}
	,getData: function() {
		return this._data;
	}
	,getBuffer: function() {
		return this._buffer;
	}
	,getStrideSize: function() {
		return this._strideSize;
	}
	,create: function(data) {
		if(data == null && this._buffer != null) return;
		if(data != null) data = data; else data = this._data;
		if(this._buffer == null) {
			if(this._updatable) this._buffer = this._engine.createDynamicVertexBuffer(data.length * 4); else this._buffer = this._engine.createVertexBuffer(data);
		}
		if(this._updatable) {
			this._engine.updateDynamicVertexBuffer(this._buffer,data,null);
			this._data = data;
		}
	}
	,update: function(data) {
		this.create(data);
	}
	,updateDirectly: function(data,offset) {
		if(this._buffer == null) return;
		if(this._updatable) {
			this._engine.updateDynamicVertexBuffer(this._buffer,data,offset);
			this._data = null;
		}
	}
	,dispose: function() {
		if(this._buffer != null) {
			if(this._engine._releaseBuffer(this._buffer)) this._buffer = null;
		}
	}
	,__class__: com_babylonhx_mesh_VertexBuffer
};
var com_babylonhx_mesh_WebGLBuffer = $hx_exports.BABYLON.WebGLBuffer = function(buffer) {
	this.is32Bits = false;
	this.capacity = 0;
	this.buffer = buffer;
	this.references = 1;
};
$hxClasses["com.babylonhx.mesh.WebGLBuffer"] = com_babylonhx_mesh_WebGLBuffer;
com_babylonhx_mesh_WebGLBuffer.__name__ = true;
com_babylonhx_mesh_WebGLBuffer.prototype = {
	__class__: com_babylonhx_mesh_WebGLBuffer
};
var com_babylonhx_mesh__$InstancesBatch = $hx_exports.BABYLON._InstancesBatch = function() {
	this.renderSelf = [];
	this.visibleInstances = [];
	this.mustReturn = false;
	this.mustReturn = false;
	this.visibleInstances = [];
	this.renderSelf = [];
};
$hxClasses["com.babylonhx.mesh._InstancesBatch"] = com_babylonhx_mesh__$InstancesBatch;
com_babylonhx_mesh__$InstancesBatch.__name__ = true;
com_babylonhx_mesh__$InstancesBatch.prototype = {
	__class__: com_babylonhx_mesh__$InstancesBatch
};
var com_babylonhx_mesh__$VisibleInstances = $hx_exports.BABYLON._VisibleInstances = function(defaultRenderId,selfDefaultRenderId) {
	this.map = new haxe_ds_IntMap();
	this.defaultRenderId = defaultRenderId;
	this.selfDefaultRenderId = selfDefaultRenderId;
};
$hxClasses["com.babylonhx.mesh._VisibleInstances"] = com_babylonhx_mesh__$VisibleInstances;
com_babylonhx_mesh__$VisibleInstances.__name__ = true;
com_babylonhx_mesh__$VisibleInstances.prototype = {
	__class__: com_babylonhx_mesh__$VisibleInstances
};
var com_babylonhx_mesh_simplification_DecimationTriangle = $hx_exports.BABYLON.DecimationTriangle = function(vertices) {
	this.error = [];
	this.deleted = false;
	this.isDirty = false;
	this.borderFactor = 0;
	this.vertices = vertices;
	this.deletePending = false;
};
$hxClasses["com.babylonhx.mesh.simplification.DecimationTriangle"] = com_babylonhx_mesh_simplification_DecimationTriangle;
com_babylonhx_mesh_simplification_DecimationTriangle.__name__ = true;
com_babylonhx_mesh_simplification_DecimationTriangle.prototype = {
	__class__: com_babylonhx_mesh_simplification_DecimationTriangle
};
var com_babylonhx_mesh_simplification_DecimationVertex = $hx_exports.BABYLON.DecimationVertex = function(position,id) {
	this.id = id;
	this.position = position;
	this.isBorder = true;
	this.q = new com_babylonhx_mesh_simplification_QuadraticMatrix();
	this.triangleCount = 0;
	this.triangleStart = 0;
	this.originalOffsets = [];
};
$hxClasses["com.babylonhx.mesh.simplification.DecimationVertex"] = com_babylonhx_mesh_simplification_DecimationVertex;
com_babylonhx_mesh_simplification_DecimationVertex.__name__ = true;
com_babylonhx_mesh_simplification_DecimationVertex.prototype = {
	updatePosition: function(newPosition) {
		this.position.copyFrom(newPosition);
	}
	,__class__: com_babylonhx_mesh_simplification_DecimationVertex
};
var com_babylonhx_mesh_simplification_ISimplificationSettings = $hx_exports.BABYLON.ISimplificationSettings = function() { };
$hxClasses["com.babylonhx.mesh.simplification.ISimplificationSettings"] = com_babylonhx_mesh_simplification_ISimplificationSettings;
com_babylonhx_mesh_simplification_ISimplificationSettings.__name__ = true;
com_babylonhx_mesh_simplification_ISimplificationSettings.prototype = {
	__class__: com_babylonhx_mesh_simplification_ISimplificationSettings
};
var com_babylonhx_mesh_simplification_ISimplifier = $hx_exports.BABYLON.ISimplifier = function() { };
$hxClasses["com.babylonhx.mesh.simplification.ISimplifier"] = com_babylonhx_mesh_simplification_ISimplifier;
com_babylonhx_mesh_simplification_ISimplifier.__name__ = true;
com_babylonhx_mesh_simplification_ISimplifier.prototype = {
	__class__: com_babylonhx_mesh_simplification_ISimplifier
};
var com_babylonhx_mesh_simplification_QuadraticErrorSimplification = $hx_exports.BABYLON.QuadraticErrorSimplification = function(mesh) {
	this.syncIterations = 5000;
	this.initialised = false;
	this.aggressiveness = 7;
	this.decimationIterations = 100;
	this.boundingBoxEpsilon = 0.001;
};
$hxClasses["com.babylonhx.mesh.simplification.QuadraticErrorSimplification"] = com_babylonhx_mesh_simplification_QuadraticErrorSimplification;
com_babylonhx_mesh_simplification_QuadraticErrorSimplification.__name__ = true;
com_babylonhx_mesh_simplification_QuadraticErrorSimplification.__interfaces__ = [com_babylonhx_mesh_simplification_ISimplifier];
com_babylonhx_mesh_simplification_QuadraticErrorSimplification.prototype = {
	simplify: function(settings,successCallback,errorCallback) {
		var _g = this;
		this.initDecimatedMesh();
		com_babylonhx_tools_AsyncLoop.Run(this._mesh.subMeshes.length,function(loop) {
			_g.initWithMesh(loop.index,function() {
				_g.runDecimation(settings,loop.index,function() {
					loop.executeNext();
				});
			});
		},function() {
			com_babylonhx_tools_Tools.delay(function() {
				successCallback(_g._reconstructedMesh);
			},0);
		});
	}
	,isTriangleOnBoundingBox: function(triangle) {
		var gCount = 0;
		var _g = 0;
		var _g1 = triangle.vertices;
		while(_g < _g1.length) {
			var vertex = _g1[_g];
			++_g;
			var count = 0;
			var vPos = vertex.position;
			var bbox = this._mesh.getBoundingInfo().boundingBox;
			if(bbox.maximum.x - vPos.x < this.boundingBoxEpsilon || vPos.x - bbox.minimum.x > this.boundingBoxEpsilon) ++count;
			if(bbox.maximum.y == vPos.y || vPos.y == bbox.minimum.y) ++count;
			if(bbox.maximum.z == vPos.z || vPos.z == bbox.minimum.z) ++count;
			if(count > 1) ++gCount;
		}
		if(gCount > 1) {
			haxe_Log.trace(triangle,{ fileName : "QuadraticErrorSimplification.hx", lineNumber : 82, className : "com.babylonhx.mesh.simplification.QuadraticErrorSimplification", methodName : "isTriangleOnBoundingBox"});
			haxe_Log.trace(gCount,{ fileName : "QuadraticErrorSimplification.hx", lineNumber : 83, className : "com.babylonhx.mesh.simplification.QuadraticErrorSimplification", methodName : "isTriangleOnBoundingBox"});
		}
		return gCount > 1;
	}
	,runDecimation: function(settings,submeshIndex,successCallback) {
		var _g = this;
		var targetCount = this.triangles.length * settings.quality | 0;
		var deletedTriangles = 0;
		var triangleCount = this.triangles.length;
		var iterationFunction = function(iteration,cback) {
			com_babylonhx_tools_Tools.delay(function() {
				if(iteration % 5 == 0) _g.updateMesh(iteration == 0);
				var _g22 = 0;
				var _g11 = _g.triangles.length;
				while(_g22 < _g11) {
					var i1 = _g22++;
					_g.triangles[i1].isDirty = false;
				}
				var threshold = 0.000000001 * Math.pow(iteration + 3,_g.aggressiveness);
				var trianglesIterator = function(i) {
					var tIdx = (_g.triangles.length / 2 + i) % _g.triangles.length | 0;
					var t = _g.triangles[tIdx];
					if(t == null) return;
					if(t.error[3] > threshold || t.deleted || t.isDirty) return;
					var _g1 = 0;
					while(_g1 < 3) {
						var j = _g1++;
						if(t.error[j] < threshold) {
							var deleted0 = [];
							var deleted1 = [];
							var v0 = t.vertices[j];
							var v1 = t.vertices[(j + 1) % 3];
							if(v0.isBorder != v1.isBorder) continue;
							var p = new com_babylonhx_math_Vector3(0,0,0);
							var n = new com_babylonhx_math_Vector3(0,0,0);
							var uv = new com_babylonhx_math_Vector2(0,0);
							var color = new com_babylonhx_math_Color4(0,0,0,1);
							_g.calculateError(v0,v1,p,n,uv,color);
							var delTr = [];
							if(_g.isFlipped(v0,v1,p,deleted0,t.borderFactor,delTr)) continue;
							if(_g.isFlipped(v1,v0,p,deleted1,t.borderFactor,delTr)) continue;
							if(HxOverrides.indexOf(deleted0,true,0) < 0 || HxOverrides.indexOf(deleted1,true,0) < 0) continue;
							var uniqueArray = [];
							var _g2 = 0;
							while(_g2 < delTr.length) {
								var deletedT = delTr[_g2];
								++_g2;
								if(HxOverrides.indexOf(uniqueArray,deletedT,0) == -1) {
									deletedT.deletePending = true;
									uniqueArray.push(deletedT);
								}
							}
							if(uniqueArray.length % 2 != 0) continue;
							v0.q = v1.q.add(v0.q);
							v0.updatePosition(p);
							var tStart = _g.references.length;
							deletedTriangles = _g.updateTriangles(v0,v0,deleted0,deletedTriangles);
							deletedTriangles = _g.updateTriangles(v0,v1,deleted1,deletedTriangles);
							var tCount = _g.references.length - tStart;
							if(tCount <= v0.triangleCount) {
								if(tCount > 0) {
									var _g21 = 0;
									while(_g21 < tCount) {
										var c = _g21++;
										_g.references[v0.triangleStart + c] = _g.references[tStart + c];
									}
								}
							} else v0.triangleStart = tStart;
							v0.triangleCount = tCount;
							break;
						}
					}
				};
				com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(_g.triangles.length,_g.syncIterations,trianglesIterator,cback,function() {
					return triangleCount - deletedTriangles <= targetCount;
				});
			},0);
		};
		com_babylonhx_tools_AsyncLoop.Run(this.decimationIterations,function(loop) {
			if(triangleCount - deletedTriangles <= targetCount) loop.breakLoop(); else iterationFunction(loop.index,$bind(loop,loop.executeNext));
		},function() {
			com_babylonhx_tools_Tools.delay(function() {
				_g.reconstructMesh(submeshIndex);
				successCallback();
			},0);
		});
	}
	,initWithMesh: function(submeshIndex,callbackFn,optimizeMesh) {
		if(optimizeMesh == null) optimizeMesh = false;
		var _g = this;
		this.vertices = [];
		this.triangles = [];
		var positionData = this._mesh.getVerticesData("position");
		var indices = this._mesh.getIndices();
		var submesh = this._mesh.subMeshes[submeshIndex];
		var findInVertices = function(positionToSearch) {
			if(optimizeMesh) {
				var _g2 = 0;
				var _g1 = _g.vertices.length;
				while(_g2 < _g1) {
					var ii = _g2++;
					if(_g.vertices[ii].position.equals(positionToSearch)) return _g.vertices[ii];
				}
			}
			return null;
		};
		var vertexReferences = [];
		var vertexInit = function(i) {
			var offset = i + submesh.verticesStart;
			var position = com_babylonhx_math_Vector3.FromArray(positionData,offset * 3);
			var vertex = findInVertices(position);
			if(vertex == null) vertex = new com_babylonhx_mesh_simplification_DecimationVertex(position,_g.vertices.length);
			vertex.originalOffsets.push(offset);
			if(vertex.id == _g.vertices.length) _g.vertices.push(vertex);
			vertexReferences.push(vertex.id);
		};
		var totalVertices = submesh.verticesCount;
		com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(totalVertices,this.syncIterations / 4 | 0,vertexInit,function() {
			var indicesInit = function(i1) {
				var offset1 = submesh.indexStart / 3 + i1;
				var pos = offset1 * 3 | 0;
				var i0 = indices[pos];
				var i11 = indices[pos + 1];
				var i2 = indices[pos + 2];
				var v0 = _g.vertices[vertexReferences[i0 - submesh.verticesStart]];
				var v1 = _g.vertices[vertexReferences[i11 - submesh.verticesStart]];
				var v2 = _g.vertices[vertexReferences[i2 - submesh.verticesStart]];
				var triangle = new com_babylonhx_mesh_simplification_DecimationTriangle([v0,v1,v2]);
				triangle.originalOffset = pos;
				_g.triangles.push(triangle);
			};
			com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(indices.length / 3 | 0,_g.syncIterations,indicesInit,function() {
				_g.init(callbackFn);
			});
		});
	}
	,init: function(callbackFn) {
		var _g = this;
		var triangleInit1 = function(i) {
			var t = _g.triangles[i];
			t.normal = com_babylonhx_math_Vector3.Cross(t.vertices[1].position.subtract(t.vertices[0].position),t.vertices[2].position.subtract(t.vertices[0].position)).normalize();
			var _g1 = 0;
			while(_g1 < 3) {
				var j = _g1++;
				t.vertices[j].q.addArrayInPlace(com_babylonhx_mesh_simplification_QuadraticMatrix.DataFromNumbers(t.normal.x,t.normal.y,t.normal.z,-com_babylonhx_math_Vector3.Dot(t.normal,t.vertices[0].position)));
			}
		};
		com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(this.triangles.length,this.syncIterations,triangleInit1,function() {
			var triangleInit2 = function(i1) {
				var t1 = _g.triangles[i1];
				var _g11 = 0;
				while(_g11 < 3) {
					var j1 = _g11++;
					t1.error[j1] = _g.calculateError(t1.vertices[j1],t1.vertices[(j1 + 1) % 3]);
				}
				t1.error[3] = Math.min(t1.error[0],t1.error[1]);
				t1.error[3] = Math.min(t1.error[3],t1.error[2]);
			};
			com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(_g.triangles.length,_g.syncIterations,triangleInit2,function() {
				_g.initialised = true;
				callbackFn();
			});
		});
	}
	,reconstructMesh: function(submeshIndex) {
		var newTriangles = [];
		var _g1 = 0;
		var _g = this.vertices.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.vertices[i].triangleCount = 0;
		}
		var t = null;
		var _g11 = 0;
		var _g2 = this.triangles.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(!this.triangles[i1].deleted) {
				t = this.triangles[i1];
				var _g21 = 0;
				while(_g21 < 3) {
					var j = _g21++;
					t.vertices[j].triangleCount = 1;
				}
				newTriangles.push(t);
			}
		}
		var newPositionData = this._reconstructedMesh.getVerticesData("position");
		if(newPositionData == null) newPositionData = [];
		var newNormalData = this._reconstructedMesh.getVerticesData("normal");
		if(newNormalData == null) newNormalData = [];
		var newUVsData = this._reconstructedMesh.getVerticesData("uv");
		if(newUVsData == null) newUVsData = [];
		var newColorsData = this._reconstructedMesh.getVerticesData("color");
		if(newColorsData == null) newColorsData = [];
		var normalData = this._mesh.getVerticesData("normal");
		var uvs = this._mesh.getVerticesData("uv");
		var colorsData = this._mesh.getVerticesData("color");
		var vertexCount = 0;
		var _g12 = 0;
		var _g3 = this.vertices.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var vertex = this.vertices[i2];
			vertex.id = vertexCount;
			if(vertex.triangleCount > 0) {
				var _g22 = 0;
				var _g31 = vertex.originalOffsets;
				while(_g22 < _g31.length) {
					var originalOffset = _g31[_g22];
					++_g22;
					newPositionData.push(vertex.position.x);
					newPositionData.push(vertex.position.y);
					newPositionData.push(vertex.position.z);
					newNormalData.push(normalData[originalOffset * 3]);
					newNormalData.push(normalData[originalOffset * 3 + 1]);
					newNormalData.push(normalData[originalOffset * 3 + 2]);
					if(uvs != null && uvs.length > 0) {
						newUVsData.push(uvs[originalOffset * 2]);
						newUVsData.push(uvs[originalOffset * 2 + 1]);
					} else if(colorsData != null && colorsData.length > 0) {
						newColorsData.push(colorsData[originalOffset * 4]);
						newColorsData.push(colorsData[originalOffset * 4 + 1]);
						newColorsData.push(colorsData[originalOffset * 4 + 2]);
						newColorsData.push(colorsData[originalOffset * 4 + 3]);
					}
					++vertexCount;
				}
			}
		}
		var startingIndex = this._reconstructedMesh.getTotalIndices();
		var startingVertex = this._reconstructedMesh.getTotalVertices();
		var submeshesArray = this._reconstructedMesh.subMeshes;
		this._reconstructedMesh.subMeshes = [];
		var newIndicesArray = this._reconstructedMesh.getIndices();
		var originalIndices = this._mesh.getIndices();
		var _g13 = 0;
		var _g4 = newTriangles.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var t1 = newTriangles[i3];
			var _g23 = 0;
			var _g32 = [0,1,2];
			while(_g23 < _g32.length) {
				var idx = _g32[_g23];
				++_g23;
				var id = originalIndices[t1.originalOffset + idx];
				var offset = HxOverrides.indexOf(t1.vertices[idx].originalOffsets,id,0);
				if(offset < 0) offset = 0;
				newIndicesArray.push(t1.vertices[idx].id + offset + startingVertex);
			}
		}
		this._reconstructedMesh.setIndices(newIndicesArray);
		this._reconstructedMesh.setVerticesData("position",newPositionData);
		this._reconstructedMesh.setVerticesData("normal",newNormalData);
		if(newUVsData.length > 0) this._reconstructedMesh.setVerticesData("uv",newUVsData);
		if(newColorsData.length > 0) this._reconstructedMesh.setVerticesData("color",newColorsData);
		var originalSubmesh = this._mesh.subMeshes[submeshIndex];
		if(submeshIndex > 0) {
			this._reconstructedMesh.subMeshes = [];
			var _g5 = 0;
			while(_g5 < submeshesArray.length) {
				var submesh = submeshesArray[_g5];
				++_g5;
				new com_babylonhx_mesh_SubMesh(submesh.materialIndex,submesh.verticesStart,submesh.verticesCount,submesh.indexStart,submesh.indexCount,submesh._mesh);
			}
			var newSubmesh = new com_babylonhx_mesh_SubMesh(originalSubmesh.materialIndex,startingVertex,vertexCount,startingIndex,newTriangles.length * 3,this._reconstructedMesh);
		}
	}
	,initDecimatedMesh: function() {
		this._reconstructedMesh = new com_babylonhx_mesh_Mesh(this._mesh.name + "Decimated",this._mesh._scene);
		this._reconstructedMesh.set_material(this._mesh.get_material());
		this._reconstructedMesh.parent = this._mesh.parent;
		this._reconstructedMesh.isVisible = false;
	}
	,isFlipped: function(vertex1,vertex2,point,deletedArray,borderFactor,delTr) {
		var _g1 = 0;
		var _g = vertex1.triangleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var t = this.triangles[this.references[vertex1.triangleStart + i].triangleId];
			if(t.deleted) continue;
			var s = this.references[vertex1.triangleStart + i].vertexId;
			var v1 = t.vertices[(s + 1) % 3];
			var v2 = t.vertices[(s + 2) % 3];
			if(v1 == vertex2 || v2 == vertex2) {
				deletedArray[i] = true;
				delTr.push(t);
				continue;
			}
			var d1 = v1.position.subtract(point);
			d1 = d1.normalize();
			var d2 = v2.position.subtract(point);
			d2 = d2.normalize();
			if(Math.abs(d1.x * d2.x + d1.y * d2.y + d1.z * d2.z) > 0.999) return true;
			var normal = com_babylonhx_math_Vector3.Cross(d1,d2).normalize();
			deletedArray[i] = false;
			if(com_babylonhx_math_Vector3.Dot(normal,t.normal) < 0.2) return true;
		}
		return false;
	}
	,updateTriangles: function(origVertex,vertex,deletedArray,deletedTriangles) {
		var newDeleted = deletedTriangles;
		var _g1 = 0;
		var _g = vertex.triangleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var ref = this.references[vertex.triangleStart + i];
			var t = this.triangles[ref.triangleId];
			if(t.deleted) continue;
			if(deletedArray[i] && t.deletePending) {
				t.deleted = true;
				newDeleted++;
				continue;
			}
			t.vertices[ref.vertexId] = origVertex;
			t.isDirty = true;
			t.error[0] = this.calculateError(t.vertices[0],t.vertices[1]) + t.borderFactor / 2;
			t.error[1] = this.calculateError(t.vertices[1],t.vertices[2]) + t.borderFactor / 2;
			t.error[2] = this.calculateError(t.vertices[2],t.vertices[0]) + t.borderFactor / 2;
			t.error[3] = Math.min(t.error[0],t.error[1]);
			t.error[3] = Math.min(t.error[3],t.error[2]);
			this.references.push(ref);
		}
		return newDeleted;
	}
	,identifyBorder: function() {
		var _g1 = 0;
		var _g = this.vertices.length;
		while(_g1 < _g) {
			var i = _g1++;
			var vCount = [];
			var vId = [];
			var v = this.vertices[i];
			var _g3 = 0;
			var _g2 = v.triangleCount;
			while(_g3 < _g2) {
				var j = _g3++;
				var triangle = this.triangles[this.references[v.triangleStart + j].triangleId];
				var _g4 = 0;
				while(_g4 < 3) {
					var ii = _g4++;
					var ofs = 0;
					var vv = triangle.vertices[ii];
					while(ofs < vCount.length) {
						if(vId[ofs] == vv.id) break;
						++ofs;
					}
					if(ofs == vCount.length) {
						vCount.push(1);
						vId.push(vv.id);
					} else vCount[ofs]++;
				}
			}
			var _g31 = 0;
			var _g21 = vCount.length;
			while(_g31 < _g21) {
				var j1 = _g31++;
				if(vCount[j1] == 1) this.vertices[vId[j1]].isBorder = true; else this.vertices[vId[j1]].isBorder = false;
			}
		}
	}
	,updateMesh: function(identifyBorders) {
		if(identifyBorders == null) identifyBorders = false;
		if(!identifyBorders) {
			var newTrianglesVector = [];
			var _g1 = 0;
			var _g = this.triangles.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(!this.triangles[i].deleted) newTrianglesVector.push(this.triangles[i]);
			}
			this.triangles = newTrianglesVector;
		}
		var _g11 = 0;
		var _g2 = this.vertices.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.vertices[i1].triangleCount = 0;
			this.vertices[i1].triangleStart = 0;
		}
		var t = null;
		var v = null;
		var _g12 = 0;
		var _g3 = this.triangles.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			t = this.triangles[i2];
			var _g21 = 0;
			while(_g21 < 3) {
				var j = _g21++;
				v = t.vertices[j];
				v.triangleCount++;
			}
		}
		var tStart = 0;
		var _g13 = 0;
		var _g4 = this.vertices.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			this.vertices[i3].triangleStart = tStart;
			tStart += this.vertices[i3].triangleCount;
			this.vertices[i3].triangleCount = 0;
		}
		var newReferences = [];
		var _g14 = 0;
		var _g5 = this.triangles.length;
		while(_g14 < _g5) {
			var i4 = _g14++;
			t = this.triangles[i4];
			var _g22 = 0;
			while(_g22 < 3) {
				var j1 = _g22++;
				v = t.vertices[j1];
				newReferences[v.triangleStart + v.triangleCount] = new com_babylonhx_mesh_simplification_Reference(j1,i4);
				v.triangleCount++;
			}
		}
		this.references = newReferences;
		if(identifyBorders) this.identifyBorder();
	}
	,vertexError: function(q,point) {
		var x = point.x;
		var y = point.y;
		var z = point.z;
		return q.data[0] * x * x + 2 * q.data[1] * x * y + 2 * q.data[2] * x * z + 2 * q.data[3] * x + q.data[4] * y * y + 2 * q.data[5] * y * z + 2 * q.data[6] * y + q.data[7] * z * z + 2 * q.data[8] * z + q.data[9];
	}
	,calculateError: function(vertex1,vertex2,pointResult,normalResult,uvResult,colorResult) {
		var q = vertex1.q.add(vertex2.q);
		var border = vertex1.isBorder && vertex2.isBorder;
		var error = 0.0;
		var qDet = q.det(0,1,2,1,4,5,2,5,7);
		if(qDet != 0 && !border) {
			if(pointResult == null) pointResult = new com_babylonhx_math_Vector3(0,0,0);
			pointResult.x = -1 / qDet * q.det(1,2,3,4,5,6,5,7,8);
			pointResult.y = 1 / qDet * q.det(0,2,3,1,5,6,2,7,8);
			pointResult.z = -1 / qDet * q.det(0,1,3,1,4,6,2,5,8);
			error = this.vertexError(q,pointResult);
		} else {
			var p3 = vertex1.position.add(vertex2.position).divide(new com_babylonhx_math_Vector3(2,2,2));
			var error1 = this.vertexError(q,vertex1.position);
			var error2 = this.vertexError(q,vertex2.position);
			var error3 = this.vertexError(q,p3);
			error = Math.min(error1,error2);
			error = Math.min(error,error3);
			if(error == error1) {
				if(pointResult != null) pointResult.copyFrom(vertex1.position);
			} else if(error == error2) {
				if(pointResult != null) pointResult.copyFrom(vertex2.position);
			} else if(pointResult != null) {
				pointResult.x = p3.x;
				pointResult.y = p3.y;
				pointResult.z = p3.z;
			}
		}
		return error;
	}
	,__class__: com_babylonhx_mesh_simplification_QuadraticErrorSimplification
};
var com_babylonhx_mesh_simplification_QuadraticMatrix = $hx_exports.BABYLON.QuadraticMatrix = function(data) {
	this.data = [];
	if(data != null) {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			if(i <= data.length) this.data[i] = data[i]; else this.data[i] = 0;
		}
	}
};
$hxClasses["com.babylonhx.mesh.simplification.QuadraticMatrix"] = com_babylonhx_mesh_simplification_QuadraticMatrix;
com_babylonhx_mesh_simplification_QuadraticMatrix.__name__ = true;
com_babylonhx_mesh_simplification_QuadraticMatrix.FromData = function(a,b,c,d) {
	return new com_babylonhx_mesh_simplification_QuadraticMatrix(com_babylonhx_mesh_simplification_QuadraticMatrix.DataFromNumbers(a,b,c,d));
};
com_babylonhx_mesh_simplification_QuadraticMatrix.DataFromNumbers = function(a,b,c,d) {
	return [a * a,a * b,a * c,a * d,b * b,b * c,b * d,c * c,c * d,d * d];
};
com_babylonhx_mesh_simplification_QuadraticMatrix.prototype = {
	det: function(a11,a12,a13,a21,a22,a23,a31,a32,a33) {
		var det = this.data[a11] * this.data[a22] * this.data[a33] + this.data[a13] * this.data[a21] * this.data[a32] + this.data[a12] * this.data[a23] * this.data[a31] - this.data[a13] * this.data[a22] * this.data[a31] - this.data[a11] * this.data[a23] * this.data[a32] - this.data[a12] * this.data[a21] * this.data[a33];
		return det;
	}
	,addInPlace: function(matrix) {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			this.data[i] += matrix.data[i];
		}
	}
	,addArrayInPlace: function(data) {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			this.data[i] += data[i];
		}
	}
	,add: function(matrix) {
		var m = new com_babylonhx_mesh_simplification_QuadraticMatrix();
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			m.data[i] = this.data[i] + matrix.data[i];
		}
		return m;
	}
	,__class__: com_babylonhx_mesh_simplification_QuadraticMatrix
};
var com_babylonhx_mesh_simplification_Reference = $hx_exports.BABYLON.Reference = function(vertexId,triangleId) {
	this.vertexId = vertexId;
	this.triangleId = triangleId;
};
$hxClasses["com.babylonhx.mesh.simplification.Reference"] = com_babylonhx_mesh_simplification_Reference;
com_babylonhx_mesh_simplification_Reference.__name__ = true;
com_babylonhx_mesh_simplification_Reference.prototype = {
	__class__: com_babylonhx_mesh_simplification_Reference
};
var com_babylonhx_mesh_simplification_SimplificationQueue = $hx_exports.BABYLON.SimplificationQueue = function() {
	this.running = false;
	this._simplificationArray = [];
};
$hxClasses["com.babylonhx.mesh.simplification.SimplificationQueue"] = com_babylonhx_mesh_simplification_SimplificationQueue;
com_babylonhx_mesh_simplification_SimplificationQueue.__name__ = true;
com_babylonhx_mesh_simplification_SimplificationQueue.prototype = {
	addTask: function(task) {
		this._simplificationArray.push(task);
	}
	,executeNext: function() {
		var task = this._simplificationArray.pop();
		if(task != null) {
			this.running = true;
			this.runSimplification(task);
		} else this.running = false;
	}
	,runSimplification: function(task) {
		var _g2 = this;
		if(task.parallelProcessing) {
			var _g = 0;
			var _g1 = task.settings;
			while(_g < _g1.length) {
				var setting = [_g1[_g]];
				++_g;
				var simplifier = this.getSimplifier(task);
				simplifier.simplify(setting[0],(function(setting) {
					return function(newMesh) {
						task.mesh.addLODLevel(setting[0].distance,newMesh);
						newMesh.isVisible = true;
						if(setting[0].quality == task.settings[task.settings.length - 1].quality && task.successCallback != null) task.successCallback();
						_g2.executeNext();
					};
				})(setting));
			}
		} else {
			var simplifier1 = this.getSimplifier(task);
			var runDecimation = function(setting1,callback) {
				simplifier1.simplify(setting1,function(newMesh1) {
					task.mesh.addLODLevel(setting1.distance,newMesh1);
					newMesh1.isVisible = true;
					callback();
				});
			};
			com_babylonhx_tools_AsyncLoop.Run(task.settings.length,function(loop) {
				runDecimation(task.settings[loop.index],function() {
					loop.executeNext();
				});
			},function() {
				if(task.successCallback != null) task.successCallback();
				_g2.executeNext();
			});
		}
	}
	,getSimplifier: function(task) {
		var _g = task.simplificationType;
		switch(_g) {
		case 0:
			return new com_babylonhx_mesh_simplification_QuadraticErrorSimplification(task.mesh);
		default:
			return new com_babylonhx_mesh_simplification_QuadraticErrorSimplification(task.mesh);
		}
		return null;
	}
	,__class__: com_babylonhx_mesh_simplification_SimplificationQueue
};
var com_babylonhx_mesh_simplification_SimplificationSettings = $hx_exports.BABYLON.SimplificationSettings = function(quality,distance,optimizeMesh) {
	if(optimizeMesh == null) optimizeMesh = false;
	this.quality = quality;
	this.distance = distance;
	this.optimizeMesh = optimizeMesh;
};
$hxClasses["com.babylonhx.mesh.simplification.SimplificationSettings"] = com_babylonhx_mesh_simplification_SimplificationSettings;
com_babylonhx_mesh_simplification_SimplificationSettings.__name__ = true;
com_babylonhx_mesh_simplification_SimplificationSettings.__interfaces__ = [com_babylonhx_mesh_simplification_ISimplificationSettings];
com_babylonhx_mesh_simplification_SimplificationSettings.prototype = {
	__class__: com_babylonhx_mesh_simplification_SimplificationSettings
};
var com_babylonhx_mesh_simplification_SimplificationTask = $hx_exports.BABYLON.SimplificationTask = function(settings,simplificationType,mesh,successCallback,parallelProcessing) {
	if(parallelProcessing == null) parallelProcessing = false;
	this.settings = settings;
	this.simplificationType = simplificationType;
	this.mesh = mesh;
	this.successCallback = successCallback;
	this.parallelProcessing = parallelProcessing;
};
$hxClasses["com.babylonhx.mesh.simplification.SimplificationTask"] = com_babylonhx_mesh_simplification_SimplificationTask;
com_babylonhx_mesh_simplification_SimplificationTask.__name__ = true;
com_babylonhx_mesh_simplification_SimplificationTask.prototype = {
	__class__: com_babylonhx_mesh_simplification_SimplificationTask
};
var com_babylonhx_particles_Particle = $hx_exports.BABYLON.Particle = function() {
	this.angularSpeed = 0;
	this.angle = 0;
	this.size = 0;
	this.age = 0;
	this.lifeTime = 1.0;
	this.colorStep = new com_babylonhx_math_Color4(0,0,0,0);
	this.color = new com_babylonhx_math_Color4(0,0,0,0);
	this.direction = new com_babylonhx_math_Vector3(0,0,0);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
};
$hxClasses["com.babylonhx.particles.Particle"] = com_babylonhx_particles_Particle;
com_babylonhx_particles_Particle.__name__ = true;
com_babylonhx_particles_Particle.prototype = {
	__class__: com_babylonhx_particles_Particle
};
var com_babylonhx_particles_ParticleSystem = $hx_exports.BABYLON.ParticleSystem = function(name,capacity,scene,customEffect) {
	this.randomColor = new com_babylonhx_math_Color4();
	this._actualFrame = 0;
	this._stopped = false;
	this._started = false;
	this._alive = true;
	this._currentRenderId = -1;
	this._scaledGravity = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledDirection = new com_babylonhx_math_Vector3(0,0,0);
	this._colorDiff = new com_babylonhx_math_Color4(0,0,0,0);
	this._scaledColorStep = new com_babylonhx_math_Color4(0,0,0,0);
	this._newPartsExcess = 0;
	this._stockParticles = [];
	this._vertexStrideSize = 44;
	this._vertexDeclaration = [3,4,4];
	this.particles = [];
	this.textureMask = new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0);
	this.colorDead = new com_babylonhx_math_Color4(0,0,0,0.0);
	this.color2 = new com_babylonhx_math_Color4(1.0,1.0,1.0,0.4);
	this.color1 = new com_babylonhx_math_Color4(1.0,1.0,1.0,0.5);
	this.maxEmitBox = new com_babylonhx_math_Vector3(0.5,0.5,0.5);
	this.minEmitBox = new com_babylonhx_math_Vector3(-0.5,-0.5,-0.5);
	this.direction2 = new com_babylonhx_math_Vector3(0,1.0,0);
	this.direction1 = new com_babylonhx_math_Vector3(0,1.0,0);
	this.gravity = new com_babylonhx_math_Vector3(0,0,0);
	this.forceDepthWrite = false;
	this.blendMode = com_babylonhx_particles_ParticleSystem.BLENDMODE_ONEONE;
	this.layerMask = 268435455;
	this.maxAngularSpeed = 0;
	this.minAngularSpeed = 0;
	this.maxSize = 1;
	this.minSize = 1;
	this.maxLifeTime = 1;
	this.minLifeTime = 1;
	this.maxEmitPower = 1;
	this.minEmitPower = 1;
	this.disposeOnStop = false;
	this.targetStopDuration = 0;
	this.updateSpeed = 0.01;
	this.manualEmitCount = -1;
	this.emitRate = 10;
	this.emitter = null;
	this.renderingGroupId = 0;
	var _g = this;
	this.name = name;
	this.id = name;
	this._capacity = capacity;
	this._scene = scene;
	this._engine = scene._engine;
	this._customEffect = customEffect;
	scene.particleSystems.push(this);
	this._vertexBuffer = this._engine.createDynamicVertexBuffer(capacity * this._vertexStrideSize * 4);
	var indices = [];
	var index = 0;
	var _g1 = 0;
	while(_g1 < capacity) {
		var count = _g1++;
		indices.push(index);
		indices.push(index + 1);
		indices.push(index + 2);
		indices.push(index);
		indices.push(index + 2);
		indices.push(index + 3);
		index += 4;
	}
	this._indexBuffer = this._engine.createIndexBuffer(indices);
	var elements = capacity * this._vertexStrideSize;
	var this1;
	if(elements != null) this1 = new Float32Array(elements); else this1 = null;
	this._vertices = this1;
	this.startDirectionFunction = function(emitPower,worldMatrix,directionToUpdate) {
		var randX = _g.randomNumber(_g.direction1.x,_g.direction2.x);
		var randY = _g.randomNumber(_g.direction1.y,_g.direction2.y);
		var randZ = _g.randomNumber(_g.direction1.z,_g.direction2.z);
		com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef(randX * emitPower,randY * emitPower,randZ * emitPower,worldMatrix,directionToUpdate);
	};
	this.startPositionFunction = function(worldMatrix1,positionToUpdate) {
		var randX1 = _g.randomNumber(_g.minEmitBox.x,_g.maxEmitBox.x);
		var randY1 = _g.randomNumber(_g.minEmitBox.y,_g.maxEmitBox.y);
		var randZ1 = _g.randomNumber(_g.minEmitBox.z,_g.maxEmitBox.z);
		com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(randX1,randY1,randZ1,worldMatrix1,positionToUpdate);
	};
	this.updateFunction = function(particles) {
		var index1 = 0;
		while(index1 < particles.length) {
			var particle = particles[index1];
			particle.age += _g._scaledUpdateSpeed;
			if(particle.age >= particle.lifeTime) {
				particles.splice(index1,1);
				_g._stockParticles.push(particle);
			} else {
				particle.colorStep.scaleToRef(_g._scaledUpdateSpeed,_g._scaledColorStep);
				particle.color.addInPlace(_g._scaledColorStep);
				if(particle.color.a < 0) particle.color.a = 0;
				particle.angle += particle.angularSpeed * _g._scaledUpdateSpeed;
				particle.direction.scaleToRef(_g._scaledUpdateSpeed,_g._scaledDirection);
				particle.position.addInPlace(_g._scaledDirection);
				_g.gravity.scaleToRef(_g._scaledUpdateSpeed,_g._scaledGravity);
				particle.direction.addInPlace(_g._scaledGravity);
				index1++;
			}
		}
	};
	this._getEffect();
};
$hxClasses["com.babylonhx.particles.ParticleSystem"] = com_babylonhx_particles_ParticleSystem;
com_babylonhx_particles_ParticleSystem.__name__ = true;
com_babylonhx_particles_ParticleSystem.__interfaces__ = [com_babylonhx_ISmartArrayCompatible,com_babylonhx_IDisposable];
com_babylonhx_particles_ParticleSystem.prototype = {
	getCapacity: function() {
		return this._capacity;
	}
	,isAlive: function() {
		return this._alive;
	}
	,isStarted: function() {
		return this._started;
	}
	,start: function() {
		this._started = true;
		this._stopped = false;
		this._actualFrame = 0;
	}
	,stop: function() {
		this._stopped = true;
	}
	,_appendParticleVertex: function(index,particle,offsetX,offsetY) {
		var offset = index * 11;
		this._vertices[offset] = particle.position.x;
		this._vertices[offset + 1] = particle.position.y;
		this._vertices[offset + 2] = particle.position.z;
		this._vertices[offset + 3] = particle.color.r;
		this._vertices[offset + 4] = particle.color.g;
		this._vertices[offset + 5] = particle.color.b;
		this._vertices[offset + 6] = particle.color.a;
		this._vertices[offset + 7] = particle.angle;
		this._vertices[offset + 8] = particle.size;
		this._vertices[offset + 9] = offsetX;
		this._vertices[offset + 10] = offsetY;
	}
	,_update: function(newParticles) {
		this._alive = this.particles.length > 0;
		this.updateFunction(this.particles);
		var worldMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
		if(this.emitter.position != null) worldMatrix = this.emitter.getWorldMatrix(); else worldMatrix = com_babylonhx_math_Matrix.Translation(this.emitter.x + this.randomNumber(-500,500),this.emitter.y,this.emitter.z + this.randomNumber(-500,500));
		var _g = 0;
		while(_g < newParticles) {
			var index = _g++;
			if(this.particles.length == this._capacity) break;
			if(this._stockParticles.length != 0) {
				this.particle = this._stockParticles.pop();
				this.particle.age = 0;
			} else this.particle = new com_babylonhx_particles_Particle();
			this.particles.push(this.particle);
			var emitPower = this.randomNumber(this.minEmitPower,this.maxEmitPower);
			this.startDirectionFunction(emitPower,worldMatrix,this.particle.direction);
			this.particle.lifeTime = this.randomNumber(this.minLifeTime,this.maxLifeTime);
			this.particle.size = this.randomNumber(this.minSize,this.maxSize);
			this.particle.angularSpeed = this.randomNumber(this.minAngularSpeed,this.maxAngularSpeed);
			this.startPositionFunction(worldMatrix,this.particle.position);
			var step = this.randomNumber(0,1.0);
			com_babylonhx_math_Color4.LerpToRef(this.color1,this.color2,step,this.particle.color);
			this.colorDead.subtractToRef(this.particle.color,this._colorDiff);
			this._colorDiff.scaleToRef(1.0 / this.particle.lifeTime,this.particle.colorStep);
		}
	}
	,_getEffect: function() {
		if(this._customEffect != null) return this._customEffect;
		var defines = [];
		if(this._scene.clipPlane != null) defines.push("#define CLIPPLANE");
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._engine.createEffect("particles",["position","color","options"],["invView","view","projection","vClipPlane","textureMask"],["diffuseSampler"],join);
		}
		return this._effect;
	}
	,animate: function() {
		if(!this._started) return;
		if(this.emitter == null || !this._effect._isReady || this.particleTexture == null || !this.particleTexture.isReady()) return;
		if(this._currentRenderId == this._scene._renderId) return;
		this._currentRenderId = this._scene._renderId;
		this._scaledUpdateSpeed = this.updateSpeed * this._scene._animationRatio;
		var emitCout = 0;
		if(this.manualEmitCount > -1) {
			emitCout = this.manualEmitCount;
			this.manualEmitCount = 0;
		} else emitCout = this.emitRate;
		var newParticles = emitCout * this._scaledUpdateSpeed | 0;
		this._newPartsExcess += emitCout * this._scaledUpdateSpeed - newParticles;
		if(this._newPartsExcess > 1.0) {
			newParticles += this._newPartsExcess;
			this._newPartsExcess -= this._newPartsExcess;
		}
		this._alive = false;
		if(!this._stopped) {
			this._actualFrame += this._scaledUpdateSpeed;
			if(this.targetStopDuration != 0 && this._actualFrame >= this.targetStopDuration) this.stop();
		} else newParticles = 0;
		this._update(newParticles);
		if(this._stopped) {
			if(!this._alive) {
				this._started = false;
				if(this.disposeOnStop) this._scene._toBeDisposed.push(this);
			}
		}
		var offset = 0;
		var _g1 = 0;
		var _g = this.particles.length;
		while(_g1 < _g) {
			var index = _g1++;
			var particle = this.particles[index];
			this._appendParticleVertex(offset++,particle,0,0);
			this._appendParticleVertex(offset++,particle,1,0);
			this._appendParticleVertex(offset++,particle,1,1);
			this._appendParticleVertex(offset++,particle,0,1);
		}
		this._engine.updateDynamicVertexBuffer(this._vertexBuffer,this._vertices,null);
	}
	,render: function() {
		if(this.emitter == null || !this._effect._isReady || this.particleTexture == null || !this.particleTexture.isReady()) return 0;
		this._engine.enableEffect(this._effect);
		this._engine.setState(false,null,null,null);
		var viewMatrix = this._scene._viewMatrix;
		this._effect.setTexture("diffuseSampler",this.particleTexture);
		this._effect.setMatrix("view",viewMatrix);
		this._effect.setMatrix("projection",this._scene._projectionMatrix);
		this._effect.setFloat4("textureMask",this.textureMask.r,this.textureMask.g,this.textureMask.b,this.textureMask.a);
		if(this._scene.clipPlane != null) {
			var clipPlane = this._scene.clipPlane;
			var invView = com_babylonhx_math_Matrix.FromValues(viewMatrix.m[0],viewMatrix.m[1],viewMatrix.m[2],viewMatrix.m[3],viewMatrix.m[4],viewMatrix.m[5],viewMatrix.m[6],viewMatrix.m[7],viewMatrix.m[8],viewMatrix.m[9],viewMatrix.m[10],viewMatrix.m[11],viewMatrix.m[12],viewMatrix.m[13],viewMatrix.m[14],viewMatrix.m[15]);
			invView.invertToRef(invView);
			invView;
			this._effect.setMatrix("invView",invView);
			this._effect.setFloat4("vClipPlane",clipPlane.normal.x,clipPlane.normal.y,clipPlane.normal.z,clipPlane.d);
		}
		this._engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		if(this.blendMode == com_babylonhx_particles_ParticleSystem.BLENDMODE_ONEONE) this._engine.setAlphaMode(6); else this._engine.setAlphaMode(2);
		if(this.forceDepthWrite) this._engine._depthCullingState.set_depthMask(true);
		this._engine.draw(true,0,this.particles.length * 6);
		this._engine.setAlphaMode(0);
		return this.particles.length;
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		if(this._vertexBuffer != null) {
			this._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		if(this.particleTexture != null) {
			this.particleTexture.dispose();
			this.particleTexture = null;
		}
		HxOverrides.remove(this._scene.particleSystems,this);
		if(this.onDispose != null) this.onDispose();
	}
	,clone: function(name,newEmitter) {
		var result = new com_babylonhx_particles_ParticleSystem(name,this._capacity,this._scene);
		if(newEmitter == null) newEmitter = this.emitter;
		result.emitter = newEmitter;
		if(this.particleTexture != null) result.particleTexture = new com_babylonhx_materials_textures_Texture(this.particleTexture.url,this._scene);
		result.start();
		return result;
	}
	,doubleColor4: function() {
		this.randomColor.b = Math.random() * 2;
		this.randomColor.r = Math.random() * 2;
		this.randomColor.g = Math.random() * 2;
		this.randomColor.a = Math.random();
		return this.randomColor;
	}
	,randomNumber: function(min,max) {
		if(min == max) return min;
		var random = Math.random();
		return random * (max - min) + min;
	}
	,__class__: com_babylonhx_particles_ParticleSystem
};
var com_babylonhx_physics_IPhysicsEnginePlugin = $hx_exports.BABYLON.IPhysicsEnginePlugin = function() { };
$hxClasses["com.babylonhx.physics.IPhysicsEnginePlugin"] = com_babylonhx_physics_IPhysicsEnginePlugin;
com_babylonhx_physics_IPhysicsEnginePlugin.__name__ = true;
com_babylonhx_physics_IPhysicsEnginePlugin.prototype = {
	__class__: com_babylonhx_physics_IPhysicsEnginePlugin
};
var com_babylonhx_physics_PhysicsBodyCreationOptions = $hx_exports.BABYLON.PhysicsBodyCreationOptions = function(mass,friction,restitution,name) {
	if(name == null) name = "";
	this.name = "";
	if(name != "") this.name = name; else this.name = com_babylonhx_tools_Tools.uuid();
	this.mass = mass;
	this.friction = friction;
	this.restitution = restitution;
};
$hxClasses["com.babylonhx.physics.PhysicsBodyCreationOptions"] = com_babylonhx_physics_PhysicsBodyCreationOptions;
com_babylonhx_physics_PhysicsBodyCreationOptions.__name__ = true;
com_babylonhx_physics_PhysicsBodyCreationOptions.prototype = {
	__class__: com_babylonhx_physics_PhysicsBodyCreationOptions
};
var com_babylonhx_physics_PhysicsCompoundBodyPart = $hx_exports.BABYLON.PhysicsCompoundBodyPart = function() { };
$hxClasses["com.babylonhx.physics.PhysicsCompoundBodyPart"] = com_babylonhx_physics_PhysicsCompoundBodyPart;
com_babylonhx_physics_PhysicsCompoundBodyPart.__name__ = true;
com_babylonhx_physics_PhysicsCompoundBodyPart.prototype = {
	__class__: com_babylonhx_physics_PhysicsCompoundBodyPart
};
var com_babylonhx_physics_PhysicsEngine = $hx_exports.BABYLON.PhysicsEngine = function(plugin) {
	this._currentPlugin = plugin;
};
$hxClasses["com.babylonhx.physics.PhysicsEngine"] = com_babylonhx_physics_PhysicsEngine;
com_babylonhx_physics_PhysicsEngine.__name__ = true;
com_babylonhx_physics_PhysicsEngine.prototype = {
	_initialize: function(gravity) {
		this._currentPlugin.initialize();
		this._setGravity(gravity);
	}
	,_runOneStep: function(delta) {
		if(delta > 0.1) delta = 0.1; else if(delta <= 0) delta = 0.016666666666666666;
		this._currentPlugin.runOneStep(delta);
	}
	,_setGravity: function(gravity) {
		if(gravity != null) this.gravity = gravity; else this.gravity = new com_babylonhx_math_Vector3(0,-9.82,0);
		this._currentPlugin.setGravity(this.gravity);
	}
	,_registerMesh: function(mesh,impostor,options) {
		return this._currentPlugin.registerMesh(mesh,impostor,options);
	}
	,_registerMeshesAsCompound: function(parts,options) {
		return this._currentPlugin.registerMeshesAsCompound(parts,options);
	}
	,_unregisterMesh: function(mesh) {
		this._currentPlugin.unregisterMesh(mesh);
	}
	,_applyImpulse: function(mesh,force,contactPoint) {
		this._currentPlugin.applyImpulse(mesh,force,contactPoint);
	}
	,_createLink: function(mesh1,mesh2,pivot1,pivot2,options) {
		return this._currentPlugin.createLink(mesh1,mesh2,pivot1,pivot2,options);
	}
	,_updateBodyPosition: function(mesh) {
		this._currentPlugin.updateBodyPosition(mesh);
	}
	,dispose: function() {
		this._currentPlugin.dispose();
	}
	,isSupported: function() {
		if(this._currentPlugin != null) return this._currentPlugin.isSupported();
		return false;
	}
	,__class__: com_babylonhx_physics_PhysicsEngine
};
var com_babylonhx_postprocess_PostProcess = $hx_exports.BABYLON.PostProcess = function(name,fragmentUrl,parameters,samplers,ratio,camera,samplingMode,engine,reusable,defines,textureType) {
	if(textureType == null) textureType = 0;
	if(defines == null) defines = "";
	if(reusable == null) reusable = false;
	if(samplingMode == null) samplingMode = 1;
	this._currentRenderTextureInd = 0;
	this._textures = new com_babylonhx_tools_SmartArray(2);
	this._reusable = false;
	this.height = -1;
	this.width = -1;
	if(camera != null) {
		this._camera = camera;
		this._scene = camera._scene;
		camera.attachPostProcess(this);
		this._engine = this._scene._engine;
	} else this._engine = engine;
	this.name = name;
	this._renderRatio = ratio;
	this.renderTargetSamplingMode = samplingMode;
	this._reusable = reusable;
	this._textureType = textureType;
	if(samplers != null) this._samplers = samplers; else this._samplers = [];
	this._samplers.push("textureSampler");
	this._fragmentUrl = fragmentUrl;
	if(parameters != null) this._parameters = parameters; else this._parameters = [];
	this.updateEffect(defines);
};
$hxClasses["com.babylonhx.postprocess.PostProcess"] = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_PostProcess.__name__ = true;
com_babylonhx_postprocess_PostProcess.prototype = {
	updateEffect: function(defines) {
		this._effect = this._engine.createEffect({ vertex : "postprocess", fragment : this._fragmentUrl},["position"],this._parameters,this._samplers,defines != null?defines:"");
	}
	,isReusable: function() {
		return this._reusable;
	}
	,activate: function(camera,sourceTexture) {
		if(camera != null) camera = camera; else camera = this._camera;
		var scene = camera._scene;
		var maxSize = camera._scene._engine.getCaps().maxTextureSize;
		var desiredWidth;
		desiredWidth = (sourceTexture != null?sourceTexture._width:this._engine.getRenderWidth()) * this._renderRatio;
		var desiredHeight;
		desiredHeight = (sourceTexture != null?sourceTexture._height:this._engine.getRenderHeight()) * this._renderRatio;
		if(this._renderRatio.width != null) desiredWidth = this._renderRatio.width; else desiredWidth = com_babylonhx_tools_Tools.GetExponantOfTwo(desiredWidth | 0,maxSize);
		if(this._renderRatio.height != null) desiredHeight = this._renderRatio.height; else desiredHeight = com_babylonhx_tools_Tools.GetExponantOfTwo(desiredHeight | 0,maxSize);
		if(this.width != desiredWidth || this.height != desiredHeight) {
			if(this._textures.length > 0) {
				var _g1 = 0;
				var _g = this._textures.length;
				while(_g1 < _g) {
					var i = _g1++;
					this._engine._releaseTexture(this._textures.data[i]);
				}
				this._textures.reset();
			}
			this.width = desiredWidth;
			this.height = desiredHeight;
			this._textures.push(this._engine.createRenderTargetTexture({ width : this.width, height : this.height},{ generateMipMaps : false, generateDepthBuffer : HxOverrides.indexOf(camera._postProcesses,this,0) == camera._postProcessesTakenIndices[0], samplingMode : this.renderTargetSamplingMode, type : this._textureType}));
			if(this._reusable) this._textures.push(this._engine.createRenderTargetTexture({ width : this.width, height : this.height},{ generateMipMaps : false, generateDepthBuffer : HxOverrides.indexOf(camera._postProcesses,this,0) == camera._postProcessesTakenIndices[0], samplingMode : this.renderTargetSamplingMode, type : this._textureType}));
			if(this.onSizeChanged != null) this.onSizeChanged();
		}
		this._engine.bindFramebuffer(this._textures.data[this._currentRenderTextureInd]);
		if(this.onActivate != null) this.onActivate(camera);
		if(this.clearColor != null) this._engine.clear(this.clearColor,true,true); else this._engine.clear(scene.clearColor,scene.autoClear || scene.forceWireframe,true);
		if(this._reusable) this._currentRenderTextureInd = (this._currentRenderTextureInd + 1) % 2;
	}
	,get_isSupported: function() {
		return this._effect.get_isSupported();
	}
	,apply: function() {
		if(!this._effect._isReady) return null;
		this._engine.enableEffect(this._effect);
		this._engine.setState(false,null,null,null);
		this._engine.setAlphaMode(0);
		this._engine._depthCullingState.set_depthTest(false);
		this._engine._depthCullingState.set_depthMask(false);
		if(this._textures.length > 0) this._effect._bindTexture("textureSampler",this._textures.data[this._currentRenderTextureInd]);
		if(this.onApply != null) this.onApply(this._effect);
		return this._effect;
	}
	,dispose: function(camera) {
		if(camera != null) camera = camera; else camera = this._camera;
		if(this._textures.length > 0) {
			var _g1 = 0;
			var _g = this._textures.length;
			while(_g1 < _g) {
				var i = _g1++;
				this._engine._releaseTexture(this._textures.data[i]);
			}
			this._textures.reset();
		}
		if(camera == null) return;
		camera.detachPostProcess(this);
		var index = HxOverrides.indexOf(camera._postProcesses,this,0);
		if(index == camera._postProcessesTakenIndices[0] && camera._postProcessesTakenIndices.length > 0) this._camera._postProcesses[camera._postProcessesTakenIndices[0]].width = -1;
	}
	,__class__: com_babylonhx_postprocess_PostProcess
	,__properties__: {get_isSupported:"get_isSupported"}
};
var com_babylonhx_postprocess_AnaglyphPostProcess = $hx_exports.BABYLON.AnaglyphPostProcess = function(name,ratio,camera,samplingMode,engine,reusable) {
	if(reusable == null) reusable = false;
	com_babylonhx_postprocess_PostProcess.call(this,name,"anaglyph",null,["leftSampler"],ratio,camera,samplingMode,engine,reusable);
};
$hxClasses["com.babylonhx.postprocess.AnaglyphPostProcess"] = com_babylonhx_postprocess_AnaglyphPostProcess;
com_babylonhx_postprocess_AnaglyphPostProcess.__name__ = true;
com_babylonhx_postprocess_AnaglyphPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_AnaglyphPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_AnaglyphPostProcess
});
var com_babylonhx_postprocess_DisplayPassPostProcess = $hx_exports.BABYLON.DisplayPassPostProcess = function(name,ratio,camera,samplingMode,engine,reusable) {
	if(reusable == null) reusable = false;
	com_babylonhx_postprocess_PostProcess.call(this,name,"displayPass",["passSampler"],["passSampler"],ratio,camera,samplingMode,engine,reusable);
};
$hxClasses["com.babylonhx.postprocess.DisplayPassPostProcess"] = com_babylonhx_postprocess_DisplayPassPostProcess;
com_babylonhx_postprocess_DisplayPassPostProcess.__name__ = true;
com_babylonhx_postprocess_DisplayPassPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_DisplayPassPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_DisplayPassPostProcess
});
var com_babylonhx_postprocess_PassPostProcess = $hx_exports.BABYLON.PassPostProcess = function(name,ratio,camera,samplingMode,engine,reusable) {
	if(reusable == null) reusable = false;
	com_babylonhx_postprocess_PostProcess.call(this,name,"pass",null,null,ratio,camera,samplingMode,engine,reusable);
};
$hxClasses["com.babylonhx.postprocess.PassPostProcess"] = com_babylonhx_postprocess_PassPostProcess;
com_babylonhx_postprocess_PassPostProcess.__name__ = true;
com_babylonhx_postprocess_PassPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_PassPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_PassPostProcess
});
var com_babylonhx_postprocess_PostProcessManager = $hx_exports.BABYLON.PostProcessManager = function(scene) {
	this._vertexStrideSize = 8;
	this._vertexDeclaration = [2];
	this._scene = scene;
};
$hxClasses["com.babylonhx.postprocess.PostProcessManager"] = com_babylonhx_postprocess_PostProcessManager;
com_babylonhx_postprocess_PostProcessManager.__name__ = true;
com_babylonhx_postprocess_PostProcessManager.prototype = {
	_prepareBuffers: function() {
		if(this._vertexBuffer != null) return;
		var vertices = [];
		vertices.push(1);
		vertices.push(1);
		vertices.push(-1);
		vertices.push(1);
		vertices.push(-1);
		vertices.push(-1);
		vertices.push(1);
		vertices.push(-1);
		this._vertexBuffer = this._scene._engine.createVertexBuffer(vertices);
		var indices = [];
		indices.push(0);
		indices.push(1);
		indices.push(2);
		indices.push(0);
		indices.push(2);
		indices.push(3);
		this._indexBuffer = this._scene._engine.createIndexBuffer(indices);
	}
	,_prepareFrame: function(sourceTexture) {
		var postProcesses = this._scene.activeCamera._postProcesses;
		var postProcessesTakenIndices = this._scene.activeCamera._postProcessesTakenIndices;
		if(postProcessesTakenIndices.length == 0 || !this._scene.postProcessesEnabled) return false;
		postProcesses[this._scene.activeCamera._postProcessesTakenIndices[0]].activate(this._scene.activeCamera,sourceTexture);
		return true;
	}
	,directRender: function(postProcesses,targetTexture) {
		var engine = this._scene._engine;
		var _g1 = 0;
		var _g = postProcesses.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(index < postProcesses.length - 1) postProcesses[index + 1].activate(this._scene.activeCamera,targetTexture); else if(targetTexture != null) engine.bindFramebuffer(targetTexture); else {
				engine._currentRenderTarget = null;
				lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
				engine.setViewport(engine._cachedViewport,null,null);
				engine.wipeCaches();
			}
			var pp = postProcesses[index];
			var effect = pp.apply();
			if(effect != null) {
				if(pp.onBeforeRender != null) pp.onBeforeRender(effect);
				this._prepareBuffers();
				engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,effect);
				engine.draw(true,0,6);
				if(pp.onAfterRender != null) pp.onAfterRender(effect);
			}
		}
		engine._depthCullingState.set_depthTest(true);
		engine._depthCullingState.set_depthMask(true);
	}
	,_finalizeFrame: function(doNotPresent,targetTexture,faceIndex,postProcesses) {
		if(doNotPresent == null) doNotPresent = false;
		if(postProcesses == null) postProcesses = this._scene.activeCamera._postProcesses;
		var postProcessesTakenIndices = this._scene.activeCamera._postProcessesTakenIndices;
		if(postProcessesTakenIndices.length == 0 || !this._scene.postProcessesEnabled) return;
		var engine = this._scene._engine;
		var _g1 = 0;
		var _g = postProcessesTakenIndices.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(index < postProcessesTakenIndices.length - 1) postProcesses[postProcessesTakenIndices[index + 1]].activate(this._scene.activeCamera); else if(targetTexture != null) engine.bindFramebuffer(targetTexture,faceIndex); else {
				engine._currentRenderTarget = null;
				lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
				engine.setViewport(engine._cachedViewport,null,null);
				engine.wipeCaches();
			}
			if(doNotPresent) break;
			var pp = postProcesses[postProcessesTakenIndices[index]];
			var effect = pp.apply();
			if(effect != null) {
				if(pp.onBeforeRender != null) pp.onBeforeRender(effect);
				this._prepareBuffers();
				engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,effect);
				engine.draw(true,0,6);
				if(pp.onAfterRender != null) pp.onAfterRender(effect);
			}
		}
		engine._depthCullingState.set_depthTest(true);
		engine._depthCullingState.set_depthMask(true);
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
	}
	,__class__: com_babylonhx_postprocess_PostProcessManager
};
var com_babylonhx_postprocess_StereoscopicInterlacePostProcess = function(name,camB,postProcessA,isStereoscopicHoriz,samplingMode) {
	var _g = this;
	com_babylonhx_postprocess_PostProcess.call(this,name,"stereoscopicInterlace",["stepSize"],["camASampler"],1,camB,samplingMode,camB._scene._engine,false,isStereoscopicHoriz?"#define IS_STEREOSCOPIC_HORIZ 1":null);
	this._stepSize = new com_babylonhx_math_Vector2(1 / this.width,1 / this.height);
	this.onSizeChanged = function() {
		_g._stepSize = new com_babylonhx_math_Vector2(1 / _g.width,1 / _g.height);
	};
	this.onApply = function(effect) {
		effect._engine.setTextureFromPostProcess(HxOverrides.indexOf(effect._samplers,"camASampler",0),postProcessA);
		effect._engine.setFloat2(effect._uniforms.get("stepSize"),_g._stepSize.x,_g._stepSize.y);
		effect;
	};
};
$hxClasses["com.babylonhx.postprocess.StereoscopicInterlacePostProcess"] = com_babylonhx_postprocess_StereoscopicInterlacePostProcess;
com_babylonhx_postprocess_StereoscopicInterlacePostProcess.__name__ = true;
com_babylonhx_postprocess_StereoscopicInterlacePostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_StereoscopicInterlacePostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_StereoscopicInterlacePostProcess
});
var com_babylonhx_postprocess_VRDistortionCorrectionPostProcess = function(name,camera,isRightEye,vrMetrics) {
	var _g = this;
	com_babylonhx_postprocess_PostProcess.call(this,name,"vrDistortionCorrection",["LensCenter","Scale","ScaleIn","HmdWarpParam"],null,vrMetrics.postProcessScaleFactor,camera,2,null,false);
	this._isRightEye = isRightEye;
	this._distortionFactors = vrMetrics.distortionK;
	this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;
	this._lensCenterOffset = vrMetrics.lensCenterOffset;
	this.onSizeChanged = function() {
		_g.aspectRatio = _g.width * .5 / _g.height;
		_g._scaleIn = new com_babylonhx_math_Vector2(2,2 / _g.aspectRatio);
		_g._scaleFactor = new com_babylonhx_math_Vector2(.5 * (1 / _g._postProcessScaleFactor),.5 * (1 / _g._postProcessScaleFactor) * _g.aspectRatio);
		_g._lensCenter = new com_babylonhx_math_Vector2(_g._isRightEye?0.5 - _g._lensCenterOffset * 0.5:0.5 + _g._lensCenterOffset * 0.5,0.5);
	};
	this.onApply = function(effect) {
		effect._engine.setFloat2(effect._uniforms.get("LensCenter"),_g._lensCenter.x,_g._lensCenter.y);
		effect;
		effect._engine.setFloat2(effect._uniforms.get("Scale"),_g._scaleFactor.x,_g._scaleFactor.y);
		effect;
		effect._engine.setFloat2(effect._uniforms.get("ScaleIn"),_g._scaleIn.x,_g._scaleIn.y);
		effect;
		effect._engine.setFloat4(effect._uniforms.get("HmdWarpParam"),_g._distortionFactors[0],_g._distortionFactors[1],_g._distortionFactors[2],_g._distortionFactors[3]);
		effect;
	};
};
$hxClasses["com.babylonhx.postprocess.VRDistortionCorrectionPostProcess"] = com_babylonhx_postprocess_VRDistortionCorrectionPostProcess;
com_babylonhx_postprocess_VRDistortionCorrectionPostProcess.__name__ = true;
com_babylonhx_postprocess_VRDistortionCorrectionPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_VRDistortionCorrectionPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_VRDistortionCorrectionPostProcess
});
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect = $hx_exports.BABYLON.PostProcessRenderEffect = function(engine,name,getPostProcess,singleInstance) {
	if(singleInstance == null) singleInstance = true;
	this._engine = engine;
	this._name = name;
	this._singleInstance = singleInstance;
	this._getPostProcess = getPostProcess;
	this._cameras = new haxe_ds_StringMap();
	this._indicesForCamera = new haxe_ds_StringMap();
	this._postProcesses = new haxe_ds_StringMap();
	this._renderPasses = new haxe_ds_StringMap();
	this._renderEffectAsPasses = new haxe_ds_StringMap();
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderEffect"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect.__name__ = true;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect.prototype = {
	get_isSupported: function() {
		var $it0 = this._postProcesses.keys();
		while( $it0.hasNext() ) {
			var index = $it0.next();
			if(!this._postProcesses.get(index).get_isSupported()) return false;
		}
		return true;
	}
	,_update: function() {
		var $it0 = this._renderPasses.keys();
		while( $it0.hasNext() ) {
			var renderPassName = $it0.next();
			this._renderPasses.get(renderPassName)._update();
		}
	}
	,addPass: function(renderPass) {
		this._renderPasses.set(renderPass._name,renderPass);
		this._linkParameters();
	}
	,removePass: function(renderPass) {
		{
			this._renderPasses.set(renderPass._name,null);
			null;
		}
		this._renderPasses.remove(renderPass._name);
		this._linkParameters();
	}
	,addRenderEffectAsPass: function(renderEffect) {
		this._renderEffectAsPasses.set(renderEffect._name,renderEffect);
		this._linkParameters();
	}
	,getPass: function(passName) {
		var $it0 = this._renderPasses.keys();
		while( $it0.hasNext() ) {
			var renderPassName = $it0.next();
			if(renderPassName == passName) return this._renderPasses.get(passName);
		}
		return null;
	}
	,emptyPasses: function() {
		this._renderPasses = new haxe_ds_StringMap();
		this._linkParameters();
	}
	,_attachCameras: function(cameras) {
		var cameraKey = "";
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = camera.name;
			if(this._singleInstance) cameraKey = "0"; else cameraKey = cameraName;
			var value;
			if(this._postProcesses.exists(cameraKey)) value = this._postProcesses.get(cameraKey); else value = this._getPostProcess();
			this._postProcesses.set(cameraKey,value);
			var index = camera.attachPostProcess(this._postProcesses.get(cameraKey));
			if(!this._indicesForCamera.exists(cameraName)) this._indicesForCamera.set(cameraName,[]);
			this._indicesForCamera.get(cameraName).push(index);
			if(!this._cameras.exists(camera.name)) this._cameras.set(cameraName,camera);
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._incRefCount();
			}
		}
		this._linkParameters();
	}
	,_detachCameras: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = camera.name;
			camera.detachPostProcess(this._postProcesses.get(this._singleInstance?"0":cameraName),this._indicesForCamera.get(cameraName));
			this._cameras.remove(cameraName);
			this._indicesForCamera.remove(cameraName);
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._decRefCount();
			}
		}
	}
	,_enable: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = camera.name;
			var _g2 = 0;
			var _g1 = this._indicesForCamera.get(cameraName).length;
			while(_g2 < _g1) {
				var j = _g2++;
				if(camera._postProcesses[this._indicesForCamera.get(cameraName)[j]] == null) c.attachPostProcess(this._postProcesses.get(this._singleInstance?"0":cameraName),this._indicesForCamera.get(cameraName)[j]);
			}
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._incRefCount();
			}
		}
	}
	,_disable: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = c.name;
			camera.detachPostProcess(this._postProcesses.get(this._singleInstance?"0":cameraName),this._indicesForCamera.get(cameraName));
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._decRefCount();
			}
		}
	}
	,getPostProcess: function(camera) {
		if(this._singleInstance) return this._postProcesses.get("0"); else return this._postProcesses.get(camera.name);
	}
	,_linkParameters: function() {
		var _g = this;
		var $it0 = this._postProcesses.keys();
		while( $it0.hasNext() ) {
			var index = $it0.next();
			if(this.applyParameters != null) this.applyParameters(this._postProcesses.get(index));
			this._postProcesses.get(index).onBeforeRender = function(effect) {
				_g._linkTextures(effect);
			};
		}
	}
	,_linkTextures: function(effect) {
		var $it0 = this._renderPasses.keys();
		while( $it0.hasNext() ) {
			var renderPassName = $it0.next();
			effect.setTexture(renderPassName,this._renderPasses.get(renderPassName).getRenderTexture());
		}
		var $it1 = this._renderEffectAsPasses.keys();
		while( $it1.hasNext() ) {
			var renderEffectName = $it1.next();
			effect.setTextureFromPostProcess(renderEffectName + "Sampler",this._renderEffectAsPasses.get(renderEffectName).getPostProcess());
		}
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect
	,__properties__: {get_isSupported:"get_isSupported"}
};
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass = $hx_exports.BABYLON.PostProcessRenderPass = function(scene,name,size,renderList,beforeRender,afterRender) {
	this._refCount = 0;
	this._enabled = true;
	this._name = name;
	this._renderTexture = new com_babylonhx_materials_textures_RenderTargetTexture(name,size,scene);
	this.setRenderList(renderList);
	this._renderTexture.onBeforeRender = beforeRender;
	this._renderTexture.onAfterRender = afterRender;
	this._scene = scene;
	this._renderList = renderList;
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderPass"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass.__name__ = true;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass.prototype = {
	_incRefCount: function() {
		if(this._refCount == 0) this._scene.customRenderTargets.push(this._renderTexture);
		return ++this._refCount;
	}
	,_decRefCount: function() {
		this._refCount--;
		if(this._refCount <= 0) this._scene.customRenderTargets.splice(HxOverrides.indexOf(this._scene.customRenderTargets,this._renderTexture,0),1);
		return this._refCount;
	}
	,_update: function() {
		this.setRenderList(this._renderList);
	}
	,setRenderList: function(renderList) {
		this._renderTexture.renderList = renderList;
	}
	,getRenderTexture: function() {
		return this._renderTexture;
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass
};
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline = $hx_exports.BABYLON.PostProcessRenderPipeline = function(engine,name) {
	this._engine = engine;
	this._name = name;
	this._renderEffects = new haxe_ds_StringMap();
	this._renderEffectsForIsolatedPass = new haxe_ds_StringMap();
	this._cameras = new haxe_ds_StringMap();
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderPipeline"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.__name__ = true;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.prototype = {
	get_isSupported: function() {
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			if(!this._renderEffects.get(renderEffectName).get_isSupported()) return false;
		}
		return true;
	}
	,addEffect: function(renderEffect) {
		this._renderEffects.set(renderEffect._name,renderEffect);
	}
	,_enableEffect: function(renderEffectName,cameras) {
		var renderEffects = this._renderEffects.get(renderEffectName);
		if(renderEffects == null) return;
		renderEffects._enable(cameras != null?cameras:this._cameras);
	}
	,_disableEffect: function(renderEffectName,cameras) {
		var renderEffects = this._renderEffects.get(renderEffectName);
		if(renderEffects == null) return;
		renderEffects._disable(com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras));
	}
	,_attachCameras: function(cameras,unique) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var indicesToDelete = [];
		var _g1 = 0;
		var _g = _cam.length;
		while(_g1 < _g) {
			var i = _g1++;
			var camera = _cam[i];
			var cameraName = camera.name;
			if(!this._cameras.exists(cameraName)) this._cameras.set(cameraName,camera); else if(unique) indicesToDelete.push(i);
		}
		var _g11 = 0;
		var _g2 = indicesToDelete.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			_cam.splice(indicesToDelete[i1],1);
		}
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._attachCameras(_cam);
		}
	}
	,_detachCameras: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._detachCameras(_cam);
		}
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var key = c.name;
			this._cameras.remove(key);
		}
	}
	,_enableDisplayOnlyPass: function(passName,cameras) {
		var _g1 = this;
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var pass = null;
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			pass = this._renderEffects.get(renderEffectName).getPass(passName);
			if(pass != null) break;
		}
		if(pass == null) return;
		var $it1 = this._renderEffects.keys();
		while( $it1.hasNext() ) {
			var renderEffectName1 = $it1.next();
			this._renderEffects.get(renderEffectName1)._disable(_cam);
		}
		pass._name = "passSampler";
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = c.name;
			var v;
			if(this._renderEffectsForIsolatedPass.get(cameraName) != null) v = this._renderEffectsForIsolatedPass.get(cameraName); else v = new com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect(this._engine,"passEffect",function() {
				return new com_babylonhx_postprocess_DisplayPassPostProcess("passEffect",1.0,null,null,_g1._engine,true);
			});
			this._renderEffectsForIsolatedPass.set(cameraName,v);
			v;
			this._renderEffectsForIsolatedPass.get(cameraName).emptyPasses();
			this._renderEffectsForIsolatedPass.get(cameraName).addPass(pass);
			this._renderEffectsForIsolatedPass.get(cameraName)._attachCameras(camera);
		}
	}
	,_disableDisplayOnlyPass: function(cameras) {
		var _g1 = this;
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = c.name;
			var v;
			if(this._renderEffectsForIsolatedPass.get(cameraName) != null) v = this._renderEffectsForIsolatedPass.get(cameraName); else v = new com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect(this._engine,"passEffect",function() {
				return new com_babylonhx_postprocess_DisplayPassPostProcess("passEffect",1.0,null,null,_g1._engine,true);
			});
			this._renderEffectsForIsolatedPass.set(cameraName,v);
			v;
			this._renderEffectsForIsolatedPass.get(cameraName)._disable(camera);
		}
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._enable(_cam);
		}
	}
	,_update: function() {
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._update();
		}
		var $it1 = this._cameras.keys();
		while( $it1.hasNext() ) {
			var key = $it1.next();
			var cameraName = this._cameras.get(key).name;
			if(this._renderEffectsForIsolatedPass.exists(cameraName)) this._renderEffectsForIsolatedPass.get(cameraName)._update();
		}
	}
	,dispose: function(disableDepthRender) {
		if(disableDepthRender == null) disableDepthRender = false;
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline
	,__properties__: {get_isSupported:"get_isSupported"}
};
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager = $hx_exports.BABYLON.PostProcessRenderPipelineManager = function() {
	this._renderPipelines = new haxe_ds_StringMap();
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderPipelineManager"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager.__name__ = true;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager.prototype = {
	addPipeline: function(renderPipeline) {
		this._renderPipelines.set(renderPipeline._name,renderPipeline);
	}
	,attachCamerasToRenderPipeline: function(renderPipelineName,cameras,unique) {
		if(unique == null) unique = false;
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._attachCameras(cameras,unique);
	}
	,detachCamerasFromRenderPipeline: function(renderPipelineName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._detachCameras(cameras);
	}
	,enableEffectInPipeline: function(renderPipelineName,renderEffectName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._enableEffect(renderEffectName,cameras);
	}
	,disableEffectInPipeline: function(renderPipelineName,renderEffectName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._disableEffect(renderEffectName,cameras);
	}
	,enableDisplayOnlyPassInPipeline: function(renderPipelineName,passName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._enableDisplayOnlyPass(passName,cameras);
	}
	,disableDisplayOnlyPassInPipeline: function(renderPipelineName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._disableDisplayOnlyPass(cameras);
	}
	,update: function() {
		var $it0 = this._renderPipelines.keys();
		while( $it0.hasNext() ) {
			var renderPipelineName = $it0.next();
			var pipeline = this._renderPipelines.get(renderPipelineName);
			if(!pipeline.get_isSupported()) {
				pipeline.dispose();
				this._renderPipelines.remove(renderPipelineName);
			} else pipeline._update();
		}
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager
};
var com_babylonhx_probes_ReflectionProbe = function(name,size,scene,generateMipMaps) {
	if(generateMipMaps == null) generateMipMaps = true;
	this.position = new com_babylonhx_math_Vector3(0,0,0);
	this._add = new com_babylonhx_math_Vector3(0,0,0);
	this._target = new com_babylonhx_math_Vector3(0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	var _g = this;
	this._scene = scene;
	this._scene.reflectionProbes.push(this);
	this._renderTargetTexture = new com_babylonhx_materials_textures_RenderTargetTexture(name,size,scene,generateMipMaps,true,0,true);
	this._renderTargetTexture.onBeforeRender = function(faceIndex) {
		switch(faceIndex) {
		case 0:
			_g._add.copyFromFloats(1,0,0);
			break;
		case 1:
			_g._add.copyFromFloats(-1,0,0);
			break;
		case 2:
			_g._add.copyFromFloats(0,-1,0);
			break;
		case 3:
			_g._add.copyFromFloats(0,1,0);
			break;
		case 4:
			_g._add.copyFromFloats(0,0,1);
			break;
		case 5:
			_g._add.copyFromFloats(0,0,-1);
			break;
		}
		if(_g._attachedMesh != null) _g.position.copyFrom(_g._attachedMesh.getAbsolutePosition());
		_g.position.addToRef(_g._add,_g._target);
		com_babylonhx_math_Matrix.LookAtLHToRef(_g.position,_g._target,new com_babylonhx_math_Vector3(0,1.0,0),_g._viewMatrix);
		scene._viewMatrix = _g._viewMatrix;
		scene._projectionMatrix = _g._projectionMatrix;
		scene._viewMatrix.multiplyToRef(scene._projectionMatrix,scene._transformMatrix);
	};
	this._renderTargetTexture.onAfterUnbind = function() {
		scene.setTransformMatrix(scene.activeCamera.getViewMatrix(),scene.activeCamera.getProjectionMatrix(true));
	};
	this._projectionMatrix = com_babylonhx_math_Matrix.PerspectiveFovLH(Math.PI / 2,1,scene.activeCamera.minZ,scene.activeCamera.maxZ);
};
$hxClasses["com.babylonhx.probes.ReflectionProbe"] = com_babylonhx_probes_ReflectionProbe;
com_babylonhx_probes_ReflectionProbe.__name__ = true;
com_babylonhx_probes_ReflectionProbe.prototype = {
	get_refreshRate: function() {
		return this._renderTargetTexture.get_refreshRate();
	}
	,set_refreshRate: function(value) {
		this._renderTargetTexture.set_refreshRate(value);
		return value;
	}
	,getScene: function() {
		return this._scene;
	}
	,get_cubeTexture: function() {
		return this._renderTargetTexture;
	}
	,get_renderList: function() {
		return this._renderTargetTexture.renderList;
	}
	,attachToMesh: function(mesh) {
		this._attachedMesh = mesh;
	}
	,dispose: function() {
		var index = HxOverrides.indexOf(this._scene.reflectionProbes,this,0);
		if(index != -1) this._scene.reflectionProbes.splice(index,1);
	}
	,__class__: com_babylonhx_probes_ReflectionProbe
	,__properties__: {get_renderList:"get_renderList",get_cubeTexture:"get_cubeTexture",set_refreshRate:"set_refreshRate",get_refreshRate:"get_refreshRate"}
};
var com_babylonhx_rendering_BoundingBoxRenderer = $hx_exports.BABYLON.BoundingBoxRenderer = function(scene) {
	this.renderList = new com_babylonhx_tools_SmartArray(32);
	this.showBackLines = true;
	this.backColor = new com_babylonhx_math_Color3(0.1,0.1,0.1);
	this.frontColor = new com_babylonhx_math_Color3(1,1,1);
	this._scene = scene;
};
$hxClasses["com.babylonhx.rendering.BoundingBoxRenderer"] = com_babylonhx_rendering_BoundingBoxRenderer;
com_babylonhx_rendering_BoundingBoxRenderer.__name__ = true;
com_babylonhx_rendering_BoundingBoxRenderer.prototype = {
	_prepareRessources: function() {
		if(this._colorShader != null) return;
		this._colorShader = new com_babylonhx_materials_ShaderMaterial("colorShader",this._scene,"color",{ attributes : ["position"], uniforms : ["worldViewProjection","color"]});
		var engine = this._scene._engine;
		var boxdata = com_babylonhx_mesh_VertexData.CreateBox(1.0);
		this._vb = new com_babylonhx_mesh_VertexBuffer(engine,boxdata.positions,"position",false);
		this._ib = engine.createIndexBuffer([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,7,1,6,2,5,3,4]);
	}
	,reset: function() {
		this.renderList.reset();
	}
	,render: function() {
		if(this.renderList.length == 0) return;
		this._prepareRessources();
		if(!this._colorShader.isReady()) return;
		var engine = this._scene._engine;
		engine._depthCullingState.set_depthMask(false);
		this._colorShader._preBind();
		var _g1 = 0;
		var _g = this.renderList.length;
		while(_g1 < _g) {
			var boundingBoxIndex = _g1++;
			var boundingBox = this.renderList.data[boundingBoxIndex];
			var min = boundingBox.minimum;
			var max = boundingBox.maximum;
			var diff = new com_babylonhx_math_Vector3(max.x - min.x,max.y - min.y,max.z - min.z);
			var median = min.add(new com_babylonhx_math_Vector3(diff.x * 0.5,diff.y * 0.5,diff.z * 0.5));
			var worldMatrix = com_babylonhx_math_Matrix.Scaling(diff.x,diff.y,diff.z).multiply(com_babylonhx_math_Matrix.Translation(median.x,median.y,median.z)).multiply(boundingBox._worldMatrix);
			engine.bindBuffers(this._vb._buffer,this._ib,[3],12,this._colorShader.getEffect());
			if(this.showBackLines) {
				engine._depthCullingState.set_depthFunc(518);
				this._scene._cachedMaterial = null;
				this._colorShader.setColor4("color",this.backColor.toColor4(null));
				this._colorShader.bind(worldMatrix);
				engine.draw(false,0,24);
			}
			engine._depthCullingState.set_depthFunc(513);
			this._scene._cachedMaterial = null;
			this._colorShader.setColor4("color",this.frontColor.toColor4(null));
			this._colorShader.bind(worldMatrix);
			engine.draw(false,0,24);
		}
		this._colorShader.unbind();
		engine._depthCullingState.set_depthFunc(515);
		engine._depthCullingState.set_depthMask(true);
	}
	,dispose: function() {
		if(this._colorShader == null) return;
		this._colorShader.dispose();
		this._vb.dispose();
		this._scene._engine._releaseBuffer(this._ib);
	}
	,__class__: com_babylonhx_rendering_BoundingBoxRenderer
};
var com_babylonhx_rendering_DepthRenderer = $hx_exports.BABYLON.DepthRenderer = function(scene,type) {
	if(type == null) type = 1;
	this._worldViewProjection = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._projectionMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	var _g = this;
	this._scene = scene;
	var engine = scene._engine;
	this._depthMap = new com_babylonhx_materials_textures_RenderTargetTexture("depthMap",{ width : engine.getRenderWidth(), height : engine.getRenderHeight()},this._scene,false,true,type);
	this._depthMap.wrapU = 0;
	this._depthMap.wrapV = 0;
	this._depthMap.set_refreshRate(1);
	this._depthMap.renderParticles = false;
	this._depthMap.renderList = null;
	this._depthMap.onClear = function(engine2) {
		engine2.clear(new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0),true,true);
	};
	var renderSubMesh = function(subMesh) {
		var mesh = subMesh._renderingMesh;
		var scene1 = _g._scene;
		var engine1 = scene1._engine;
		engine1.setState(subMesh.getMaterial().backFaceCulling,null,null,null);
		var batch = mesh._getInstancesRenderList(subMesh._id);
		if(batch.mustReturn) return;
		var hardwareInstancedRendering = engine1.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null;
		if(_g.isReady(subMesh,hardwareInstancedRendering)) {
			engine1.enableEffect(_g._effect);
			mesh._bind(subMesh,_g._effect,0);
			var material = subMesh.getMaterial();
			_g._effect.setMatrix("viewProjection",scene1._transformMatrix);
			_g._effect.setFloat("far",scene1.activeCamera.maxZ);
			if(material != null && material.needAlphaTesting()) {
				var alphaTexture = material.getAlphaTestTexture();
				_g._effect.setTexture("diffuseSampler",alphaTexture);
				_g._effect.setMatrix("diffuseMatrix",alphaTexture.getTextureMatrix());
			}
			if(mesh.get_useBones() && mesh.computeBonesUsingShaders) _g._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
			mesh._processRendering(subMesh,_g._effect,0,batch,hardwareInstancedRendering,function(isInstance,world) {
				_g._effect.setMatrix("world",world);
			});
		}
	};
	this._depthMap.customRenderFunction = function(opaqueSubMeshes,alphaTestSubMeshes) {
		var _g1 = 0;
		var _g2 = opaqueSubMeshes.length;
		while(_g1 < _g2) {
			var index = _g1++;
			renderSubMesh(opaqueSubMeshes.data[index]);
		}
		var _g11 = 0;
		var _g3 = alphaTestSubMeshes.length;
		while(_g11 < _g3) {
			var index1 = _g11++;
			renderSubMesh(alphaTestSubMeshes.data[index1]);
		}
	};
};
$hxClasses["com.babylonhx.rendering.DepthRenderer"] = com_babylonhx_rendering_DepthRenderer;
com_babylonhx_rendering_DepthRenderer.__name__ = true;
com_babylonhx_rendering_DepthRenderer.prototype = {
	isReady: function(subMesh,useInstances) {
		var defines = [];
		var attribs = ["position"];
		var mesh = subMesh._mesh;
		var scene = mesh._scene;
		var material = subMesh.getMaterial();
		if(material != null && material.needAlphaTesting()) {
			defines.push("#define ALPHATEST");
			if(mesh.isVerticesDataPresent("uv")) {
				attribs.push("uv");
				defines.push("#define UV1");
			}
			if(mesh.isVerticesDataPresent("uv2")) {
				attribs.push("uv2");
				defines.push("#define UV2");
			}
		}
		if(mesh.get_useBones() && mesh.computeBonesUsingShaders) {
			attribs.push("matricesIndices");
			attribs.push("matricesWeights");
			if(mesh.numBoneInfluencers > 4) {
				attribs.push("matricesIndicesExtra");
				attribs.push("matricesWeightsExtra");
			}
			defines.push("#define NUM_BONE_INFLUENCERS " + mesh.numBoneInfluencers);
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
		}
		if(useInstances) {
			defines.push("#define INSTANCES");
			attribs.push("world0");
			attribs.push("world1");
			attribs.push("world2");
			attribs.push("world3");
		}
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._scene._engine.createEffect("depth",attribs,["world","mBones","viewProjection","diffuseMatrix","far"],["diffuseSampler"],join);
		}
		return this._effect._isReady;
	}
	,getDepthMap: function() {
		return this._depthMap;
	}
	,dispose: function() {
		this._depthMap.dispose();
	}
	,__class__: com_babylonhx_rendering_DepthRenderer
};
var com_babylonhx_rendering_FaceAdjacencies = function() {
	this.edgesConnectedCount = 0;
	this.edges = [];
};
$hxClasses["com.babylonhx.rendering.FaceAdjacencies"] = com_babylonhx_rendering_FaceAdjacencies;
com_babylonhx_rendering_FaceAdjacencies.__name__ = true;
com_babylonhx_rendering_FaceAdjacencies.prototype = {
	__class__: com_babylonhx_rendering_FaceAdjacencies
};
var com_babylonhx_rendering_EdgesRenderer = function(source,epsilon,checkVerticesInsteadOfIndices) {
	if(checkVerticesInsteadOfIndices == null) checkVerticesInsteadOfIndices = false;
	if(epsilon == null) epsilon = 0.95;
	this._checkVerticesInsteadOfIndices = false;
	this._buffers = new haxe_ds_StringMap();
	this._linesIndices = [];
	this._linesNormals = [];
	this._linesPositions = [];
	this._source = source;
	this._checkVerticesInsteadOfIndices = checkVerticesInsteadOfIndices;
	this._epsilon = epsilon;
	this._prepareRessources();
	this._generateEdgesLines();
};
$hxClasses["com.babylonhx.rendering.EdgesRenderer"] = com_babylonhx_rendering_EdgesRenderer;
com_babylonhx_rendering_EdgesRenderer.__name__ = true;
com_babylonhx_rendering_EdgesRenderer.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_rendering_EdgesRenderer.prototype = {
	_prepareRessources: function() {
		if(this._lineShader != null) return;
		this._lineShader = new com_babylonhx_materials_ShaderMaterial("lineShader",this._source._scene,"line",{ attributes : ["position","normal"], uniforms : ["worldViewProjection","color","width","aspectRatio"]});
		this._lineShader.disableDepthWrite = true;
		this._lineShader.backFaceCulling = false;
	}
	,dispose: function() {
		this._vb0.dispose();
		this._vb1.dispose();
		this._source._scene._engine._releaseBuffer(this._ib);
		this._lineShader.dispose();
	}
	,_processEdgeForAdjacencies: function(pa,pb,p0,p1,p2) {
		if(pa == p0 && pb == p1 || pa == p1 && pb == p0) return 0;
		if(pa == p1 && pb == p2 || pa == p2 && pb == p1) return 1;
		if(pa == p2 && pb == p0 || pa == p0 && pb == p2) return 2;
		return -1;
	}
	,_processEdgeForAdjacenciesWithVertices: function(pa,pb,p0,p1,p2) {
		if(p0 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p0.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p0.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p0.z,0.001) && (p1 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p1.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p1.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p1.z,0.001)) || p1 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p1.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p1.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p1.z,0.001) && (p0 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p0.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p0.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p0.z,0.001))) return 0;
		if(p1 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p1.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p1.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p1.z,0.001) && (p2 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p2.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p2.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p2.z,0.001)) || p2 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p2.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p2.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p2.z,0.001) && (p1 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p1.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p1.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p1.z,0.001))) return 1;
		if(p2 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p2.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p2.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p2.z,0.001) && (p0 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p0.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p0.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p0.z,0.001)) || p0 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p0.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p0.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p0.z,0.001) && (p2 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p2.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p2.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p2.z,0.001))) return 2;
		return -1;
	}
	,_checkEdge: function(faceIndex,edge,faceNormals,p0,p1) {
		if(edge == null) edge = -1;
		var needToCreateLine = false;
		if(edge == -1) needToCreateLine = true; else {
			var dotProduct = com_babylonhx_math_Vector3.Dot(faceNormals[faceIndex],faceNormals[edge]);
			needToCreateLine = dotProduct < this._epsilon;
		}
		if(needToCreateLine) {
			var offset = this._linesPositions.length / 3 | 0;
			var normal = new com_babylonhx_math_Vector3(p0.x - p1.x,p0.y - p1.y,p0.z - p1.z);
			normal.normalize();
			this._linesPositions.push(p0.x);
			this._linesPositions.push(p0.y);
			this._linesPositions.push(p0.z);
			this._linesPositions.push(p0.x);
			this._linesPositions.push(p0.y);
			this._linesPositions.push(p0.z);
			this._linesPositions.push(p1.x);
			this._linesPositions.push(p1.y);
			this._linesPositions.push(p1.z);
			this._linesPositions.push(p1.x);
			this._linesPositions.push(p1.y);
			this._linesPositions.push(p1.z);
			this._linesNormals.push(p1.x);
			this._linesNormals.push(p1.y);
			this._linesNormals.push(p1.z);
			this._linesNormals.push(-1);
			this._linesNormals.push(p1.x);
			this._linesNormals.push(p1.y);
			this._linesNormals.push(p1.z);
			this._linesNormals.push(1);
			this._linesNormals.push(p0.x);
			this._linesNormals.push(p0.y);
			this._linesNormals.push(p0.z);
			this._linesNormals.push(-1);
			this._linesNormals.push(p0.x);
			this._linesNormals.push(p0.y);
			this._linesNormals.push(p0.z);
			this._linesNormals.push(1);
			this._linesIndices.push(offset);
			this._linesIndices.push(offset + 1);
			this._linesIndices.push(offset + 2);
			this._linesIndices.push(offset);
			this._linesIndices.push(offset + 2);
			this._linesIndices.push(offset + 3);
		}
	}
	,_generateEdgesLines: function() {
		var positions = this._source.getVerticesData("position");
		var indices = this._source.getIndices();
		var adjacencies = [];
		var faceNormals = [];
		var faceAdjacencies;
		var index = 0;
		while(index < indices.length) {
			faceAdjacencies = new com_babylonhx_rendering_FaceAdjacencies();
			var p0Index = indices[index];
			var p1Index = indices[index + 1];
			var p2Index = indices[index + 2];
			faceAdjacencies.p0 = new com_babylonhx_math_Vector3(positions[p0Index * 3],positions[p0Index * 3 + 1],positions[p0Index * 3 + 2]);
			faceAdjacencies.p1 = new com_babylonhx_math_Vector3(positions[p1Index * 3],positions[p1Index * 3 + 1],positions[p1Index * 3 + 2]);
			faceAdjacencies.p2 = new com_babylonhx_math_Vector3(positions[p2Index * 3],positions[p2Index * 3 + 1],positions[p2Index * 3 + 2]);
			var faceNormal = com_babylonhx_math_Vector3.Cross(faceAdjacencies.p1.subtract(faceAdjacencies.p0),faceAdjacencies.p2.subtract(faceAdjacencies.p1));
			faceNormal.normalize();
			faceNormals.push(faceNormal);
			adjacencies.push(faceAdjacencies);
			index += 3;
		}
		var _g1 = 0;
		var _g = adjacencies.length;
		while(_g1 < _g) {
			var index1 = _g1++;
			faceAdjacencies = adjacencies[index1];
			var _g3 = index1 + 1;
			var _g2 = adjacencies.length;
			while(_g3 < _g2) {
				var otherIndex = _g3++;
				var otherFaceAdjacencies = adjacencies[otherIndex];
				if(faceAdjacencies.edgesConnectedCount == 3) break;
				if(otherFaceAdjacencies.edgesConnectedCount == 3) continue;
				var otherP0 = indices[otherIndex * 3];
				var otherP1 = indices[otherIndex * 3 + 1];
				var otherP2 = indices[otherIndex * 3 + 2];
				var _g4 = 0;
				while(_g4 < 3) {
					var edgeIndex = _g4++;
					var otherEdgeIndex = 0;
					if(faceAdjacencies.edges.length < edgeIndex) continue;
					switch(edgeIndex) {
					case 0:
						if(this._checkVerticesInsteadOfIndices) otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p0,faceAdjacencies.p1,otherFaceAdjacencies.p0,otherFaceAdjacencies.p1,otherFaceAdjacencies.p2); else otherEdgeIndex = this._processEdgeForAdjacencies(indices[index1 * 3],indices[index1 * 3 + 1],otherP0,otherP1,otherP2);
						break;
					case 1:
						if(this._checkVerticesInsteadOfIndices) otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p1,faceAdjacencies.p2,otherFaceAdjacencies.p0,otherFaceAdjacencies.p1,otherFaceAdjacencies.p2); else otherEdgeIndex = this._processEdgeForAdjacencies(indices[index1 * 3 + 1],indices[index1 * 3 + 2],otherP0,otherP1,otherP2);
						break;
					case 2:
						if(this._checkVerticesInsteadOfIndices) otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p2,faceAdjacencies.p0,otherFaceAdjacencies.p0,otherFaceAdjacencies.p1,otherFaceAdjacencies.p2); else otherEdgeIndex = this._processEdgeForAdjacencies(indices[index1 * 3 + 2],indices[index1 * 3],otherP0,otherP1,otherP2);
						break;
					}
					if(otherEdgeIndex == -1) continue;
					faceAdjacencies.edges[edgeIndex] = otherIndex;
					otherFaceAdjacencies.edges[otherEdgeIndex] = index1;
					faceAdjacencies.edgesConnectedCount++;
					otherFaceAdjacencies.edgesConnectedCount++;
					if(faceAdjacencies.edgesConnectedCount == 3) break;
				}
			}
		}
		var _g11 = 0;
		var _g5 = adjacencies.length;
		while(_g11 < _g5) {
			var index2 = _g11++;
			var current = adjacencies[index2];
			this._checkEdge(index2,current.edges[0],faceNormals,current.p0,current.p1);
			this._checkEdge(index2,current.edges[1],faceNormals,current.p1,current.p2);
			this._checkEdge(index2,current.edges[2],faceNormals,current.p2,current.p0);
		}
		var engine = this._source._scene._engine;
		this._vb0 = new com_babylonhx_mesh_VertexBuffer(engine,this._linesPositions,"position",false);
		this._vb1 = new com_babylonhx_mesh_VertexBuffer(engine,this._linesNormals,"normal",false,false,4);
		var v = this._vb0;
		this._buffers.set("position",v);
		v;
		var v1 = this._vb1;
		this._buffers.set("normal",v1);
		v1;
		this._ib = engine.createIndexBuffer(this._linesIndices);
		this._indicesCount = this._linesIndices.length;
	}
	,render: function() {
		if(!this._lineShader.isReady()) return;
		var scene = this._source._scene;
		var engine = scene._engine;
		this._lineShader._preBind();
		engine.bindMultiBuffers(this._buffers,this._ib,this._lineShader.getEffect());
		scene._cachedMaterial = null;
		this._lineShader.setColor4("color",this._source.edgesColor);
		this._lineShader.setFloat("width",this._source.edgesWidth / 50.0);
		this._lineShader.setFloat("aspectRatio",engine.getAspectRatio(scene.activeCamera));
		this._lineShader.bind(this._source.getWorldMatrix());
		engine.draw(true,0,this._indicesCount);
		this._lineShader.unbind();
		engine._depthCullingState.set_depthMask(true);
	}
	,__class__: com_babylonhx_rendering_EdgesRenderer
};
var com_babylonhx_rendering_OutlineRenderer = $hx_exports.BABYLON.OutlineRenderer = function(scene) {
	this._scene = scene;
};
$hxClasses["com.babylonhx.rendering.OutlineRenderer"] = com_babylonhx_rendering_OutlineRenderer;
com_babylonhx_rendering_OutlineRenderer.__name__ = true;
com_babylonhx_rendering_OutlineRenderer.prototype = {
	render: function(subMesh,batch,useOverlay) {
		if(useOverlay == null) useOverlay = false;
		var _g = this;
		var scene = this._scene;
		var engine = this._scene._engine;
		var hardwareInstancedRendering = engine.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null;
		if(!this.isReady(subMesh,hardwareInstancedRendering)) return;
		var mesh = subMesh._renderingMesh;
		var material = subMesh.getMaterial();
		engine.enableEffect(this._effect);
		this._effect.setFloat("offset",useOverlay?0:mesh.outlineWidth);
		this._effect.setColor4("color",useOverlay?mesh.overlayColor:mesh.outlineColor,useOverlay?mesh.overlayAlpha:1.0);
		this._effect.setMatrix("viewProjection",scene._transformMatrix);
		if(mesh.get_useBones() && mesh.computeBonesUsingShaders) this._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
		mesh._bind(subMesh,this._effect,0);
		if(material != null && material.needAlphaTesting()) {
			var alphaTexture = material.getAlphaTestTexture();
			this._effect.setTexture("diffuseSampler",alphaTexture);
			this._effect.setMatrix("diffuseMatrix",alphaTexture.getTextureMatrix());
		}
		mesh._processRendering(subMesh,this._effect,0,batch,hardwareInstancedRendering,function(isInstance,world) {
			_g._effect.setMatrix("world",world);
		});
	}
	,isReady: function(subMesh,useInstances) {
		var defines = [];
		var attribs = ["position","normal"];
		var mesh = subMesh._mesh;
		var material = subMesh.getMaterial();
		if(material != null && material.needAlphaTesting()) {
			defines.push("#define ALPHATEST");
			if(mesh.isVerticesDataPresent("uv")) {
				attribs.push("uv");
				defines.push("#define UV1");
			}
			if(mesh.isVerticesDataPresent("uv2")) {
				attribs.push("uv2");
				defines.push("#define UV2");
			}
		}
		if(mesh.get_useBones() && mesh.computeBonesUsingShaders) {
			attribs.push("matricesIndices");
			attribs.push("matricesWeights");
			if(mesh.numBoneInfluencers > 4) {
				attribs.push("matricesIndicesExtra");
				attribs.push("matricesWeightsExtra");
			}
			defines.push("#define NUM_BONE_INFLUENCERS " + mesh.numBoneInfluencers);
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
		} else defines.push("#define NUM_BONE_INFLUENCERS 0");
		if(useInstances) {
			defines.push("#define INSTANCES");
			attribs.push("world0");
			attribs.push("world1");
			attribs.push("world2");
			attribs.push("world3");
		}
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._scene._engine.createEffect("outline",attribs,["world","mBones","viewProjection","diffuseMatrix","offset","color"],["diffuseSampler"],join);
		}
		return this._effect._isReady;
	}
	,__class__: com_babylonhx_rendering_OutlineRenderer
};
var com_babylonhx_rendering_RenderingGroup = $hx_exports.BABYLON.RenderingGroup = function(index,scene) {
	this.submesh = null;
	this._activeVertices = 0;
	this._alphaTestSubMeshes = new com_babylonhx_tools_SmartArray();
	this._transparentSubMeshes = new com_babylonhx_tools_SmartArray();
	this._opaqueSubMeshes = new com_babylonhx_tools_SmartArray();
	this._scene = scene;
	this.index = index;
};
$hxClasses["com.babylonhx.rendering.RenderingGroup"] = com_babylonhx_rendering_RenderingGroup;
com_babylonhx_rendering_RenderingGroup.__name__ = true;
com_babylonhx_rendering_RenderingGroup.prototype = {
	render: function(customRenderFunction) {
		if(customRenderFunction != null) {
			customRenderFunction(this._opaqueSubMeshes,this._alphaTestSubMeshes,this._transparentSubMeshes);
			return true;
		}
		if(this._opaqueSubMeshes.length == 0 && this._alphaTestSubMeshes.length == 0 && this._transparentSubMeshes.length == 0) {
			if(this.onBeforeTransparentRendering != null) this.onBeforeTransparentRendering();
			return false;
		}
		var engine = this._scene._engine;
		var _g1 = 0;
		var _g = this._opaqueSubMeshes.length;
		while(_g1 < _g) {
			var subIndex = _g1++;
			this.submesh = this._opaqueSubMeshes.data[subIndex];
			this.submesh.render(false);
		}
		engine._alphaTest = true;
		var _g11 = 0;
		var _g2 = this._alphaTestSubMeshes.length;
		while(_g11 < _g2) {
			var subIndex1 = _g11++;
			this.submesh = this._alphaTestSubMeshes.data[subIndex1];
			this.submesh.render(false);
		}
		engine._alphaTest = false;
		if(this.onBeforeTransparentRendering != null) this.onBeforeTransparentRendering();
		if(this._transparentSubMeshes.length > 0) {
			var _g12 = 0;
			var _g3 = this._transparentSubMeshes.length;
			while(_g12 < _g3) {
				var subIndex2 = _g12++;
				this.submesh = this._transparentSubMeshes.data[subIndex2];
				this.submesh._alphaIndex = this.submesh._mesh.alphaIndex;
				this.submesh._distanceToCamera = this.submesh._boundingInfo.boundingSphere.centerWorld.subtract(this._scene.activeCamera.get_globalPosition()).length();
			}
			var sortedArray = this._transparentSubMeshes.data.slice(0,this._transparentSubMeshes.length);
			sortedArray.sort(function(a,b) {
				if(a._alphaIndex > b._alphaIndex) return 1;
				if(a._alphaIndex < b._alphaIndex) return -1;
				if(a._distanceToCamera < b._distanceToCamera) return 1;
				if(a._distanceToCamera > b._distanceToCamera) return -1;
				return 0;
			});
			var _g13 = 0;
			var _g4 = sortedArray.length;
			while(_g13 < _g4) {
				var subIndex3 = _g13++;
				this.submesh = sortedArray[subIndex3];
				this.submesh.render(true);
			}
			if(engine._alphaMode == 0) null; else {
				switch(0) {
				case 0:
					engine._depthCullingState.set_depthMask(true);
					engine._alphaState.set_alphaBlend(false);
					break;
				case 2:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 6:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 1:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 3:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 4:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 5:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				}
				engine._alphaMode = 0;
			}
		}
		return true;
	}
	,prepare: function() {
		this._opaqueSubMeshes.reset();
		this._transparentSubMeshes.reset();
		this._alphaTestSubMeshes.reset();
	}
	,dispatch: function(subMesh) {
		this.material = subMesh.getMaterial();
		this.mesh = subMesh._mesh;
		if(this.material.needAlphaBlending() || this.mesh.get_visibility() < 1.0 || this.mesh.hasVertexAlpha) this._transparentSubMeshes.push(subMesh); else if(this.material.needAlphaTesting()) this._alphaTestSubMeshes.push(subMesh); else this._opaqueSubMeshes.push(subMesh);
	}
	,__class__: com_babylonhx_rendering_RenderingGroup
};
var com_babylonhx_rendering_RenderingManager = $hx_exports.BABYLON.RenderingManager = function(scene) {
	this._renderingGroups = [];
	this._scene = scene;
};
$hxClasses["com.babylonhx.rendering.RenderingManager"] = com_babylonhx_rendering_RenderingManager;
com_babylonhx_rendering_RenderingManager.__name__ = true;
com_babylonhx_rendering_RenderingManager.prototype = {
	_renderParticles: function(index,activeMeshes) {
		if(this._scene._activeParticleSystems.length == 0) return;
		this._activeCamera = this._scene.activeCamera;
		var _g1 = 0;
		var _g = this._scene._activeParticleSystems.length;
		while(_g1 < _g) {
			var particleIndex = _g1++;
			var particleSystem = this._scene._activeParticleSystems.data[particleIndex];
			if(particleSystem.renderingGroupId != index) continue;
			if((this._activeCamera.layerMask & particleSystem.layerMask) == 0) continue;
			if(!this._depthBufferAlreadyCleaned) {
				this._scene._engine.clear(new com_babylonhx_math_Color4(0,0,0),false,true);
				this._depthBufferAlreadyCleaned = true;
			}
			if(particleSystem.emitter.position == null || activeMeshes == null || (function($this) {
				var $r;
				var x = particleSystem.emitter;
				$r = HxOverrides.indexOf(activeMeshes,x,0);
				return $r;
			}(this)) != -1) this._scene._activeParticles += particleSystem.render();
		}
	}
	,_renderSprites: function(index) {
		if(!this._scene.spritesEnabled || this._scene.spriteManagers.length == 0) return;
		this._activeCamera = this._scene.activeCamera;
		var _g1 = 0;
		var _g = this._scene.spriteManagers.length;
		while(_g1 < _g) {
			var id = _g1++;
			var spriteManager = this._scene.spriteManagers[id];
			if(spriteManager.renderingGroupId == index && (this._activeCamera.layerMask & spriteManager.layerMask) != 0) {
				if(!this._depthBufferAlreadyCleaned) {
					this._scene._engine.clear(new com_babylonhx_math_Color4(0,0,0),false,true);
					this._depthBufferAlreadyCleaned = true;
				}
				spriteManager.render();
			}
		}
	}
	,_clearDepthBuffer: function() {
		if(!this._depthBufferAlreadyCleaned) {
			this._scene._engine.clear(new com_babylonhx_math_Color4(0,0,0),false,true);
			this._depthBufferAlreadyCleaned = true;
		}
	}
	,_renderSpritesAndParticles: function() {
		if(this._currentRenderSprites) this._renderSprites(this._currentIndex);
		if(this._currentRenderParticles) this._renderParticles(this._currentIndex,this._currentActiveMeshes);
	}
	,render: function(customRenderFunction,activeMeshes,renderParticles,renderSprites) {
		this._currentActiveMeshes = activeMeshes;
		this._currentRenderParticles = renderParticles;
		this._currentRenderSprites = renderSprites;
		var index = 0;
		while(index < com_babylonhx_rendering_RenderingManager.MAX_RENDERINGGROUPS) {
			this._depthBufferAlreadyCleaned = false;
			com_babylonhx_rendering_RenderingManager._renderingGroup = this._renderingGroups[index];
			com_babylonhx_rendering_RenderingManager._needToStepBack = false;
			this._currentIndex = index;
			if(com_babylonhx_rendering_RenderingManager._renderingGroup != null) {
				if(!this._depthBufferAlreadyCleaned) {
					this._scene._engine.clear(new com_babylonhx_math_Color4(0,0,0),false,true);
					this._depthBufferAlreadyCleaned = true;
				}
				if(com_babylonhx_rendering_RenderingManager._renderingGroup.onBeforeTransparentRendering == null) com_babylonhx_rendering_RenderingManager._renderingGroup.onBeforeTransparentRendering = $bind(this,this._renderSpritesAndParticles);
				if(!com_babylonhx_rendering_RenderingManager._renderingGroup.render(customRenderFunction)) {
					this._renderingGroups.splice(index,1);
					com_babylonhx_rendering_RenderingManager._needToStepBack = true;
					this._renderSpritesAndParticles();
				}
			} else this._renderSpritesAndParticles();
			if(com_babylonhx_rendering_RenderingManager._needToStepBack) index--;
			++index;
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._renderingGroups;
		while(_g < _g1.length) {
			var rg = _g1[_g];
			++_g;
			if(rg != null) rg.prepare();
		}
	}
	,dispatch: function(subMesh) {
		var mesh = subMesh._mesh;
		var renderingGroupId = mesh.renderingGroupId;
		if(this._renderingGroups[renderingGroupId] == null) this._renderingGroups[renderingGroupId] = new com_babylonhx_rendering_RenderingGroup(renderingGroupId,this._scene);
		this._renderingGroups[renderingGroupId].dispatch(subMesh);
	}
	,__class__: com_babylonhx_rendering_RenderingManager
};
var com_babylonhx_sprites_Sprite = $hx_exports.BABYLON.Sprite = function(name,manager) {
	this._time = 0;
	this._frameCount = 0;
	this._direction = 1;
	this._delay = 0;
	this._toIndex = 0;
	this._fromIndex = 0;
	this._loopAnimation = false;
	this._animationStarted = false;
	this.isPickable = false;
	this.animations = [];
	this.invertV = false;
	this.invertU = false;
	this.cellIndex = 0;
	this.angle = 0;
	this.height = 1.0;
	this.width = 1.0;
	this.color = new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0);
	this.name = name;
	this._manager = manager;
	this._manager.sprites.push(this);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
};
$hxClasses["com.babylonhx.sprites.Sprite"] = com_babylonhx_sprites_Sprite;
com_babylonhx_sprites_Sprite.__name__ = true;
com_babylonhx_sprites_Sprite.prototype = {
	get_size: function() {
		return this.width;
	}
	,set_size: function(value) {
		this.width = value;
		this.height = value;
		return value;
	}
	,playAnimation: function(from,to,loop,delay) {
		this._fromIndex = from;
		this._toIndex = to;
		this._loopAnimation = loop;
		this._delay = delay;
		this._animationStarted = true;
		if(from < to) this._direction = 1; else this._direction = -1;
		this.cellIndex = from;
		this._time = 0;
	}
	,stopAnimation: function() {
		this._animationStarted = false;
	}
	,_animate: function(deltaTime) {
		if(this._animationStarted) {
			this._time += deltaTime;
			if(this._time > this._delay) {
				this._time = this._time % this._delay;
				this.cellIndex += this._direction;
				if(this.cellIndex == this._toIndex) {
					if(this._loopAnimation) this.cellIndex = this._fromIndex; else {
						this._animationStarted = false;
						if(this.disposeWhenFinishedAnimating) this.dispose();
					}
				}
			}
		}
	}
	,dispose: function() {
		var _g1 = 0;
		var _g = this._manager.sprites.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._manager.sprites[i] == this) this._manager.sprites.splice(i,1);
		}
	}
	,__class__: com_babylonhx_sprites_Sprite
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var com_babylonhx_sprites_SpriteManager = $hx_exports.BABYLON.SpriteManager = function(name,imgUrl,capacity,cellSize,scene,epsilon,samplingMode) {
	if(samplingMode == null) samplingMode = 3;
	this._vertexStrideSize = 64;
	this._vertexDeclaration = [4,4,4,4];
	this.isPickable = false;
	this.fogEnabled = true;
	this.layerMask = 268435455;
	this.renderingGroupId = 0;
	this.sprites = [];
	this.name = name;
	this.cellSize = cellSize;
	this._capacity = capacity;
	this._spriteTexture = new com_babylonhx_materials_textures_Texture(imgUrl,scene,true,false,samplingMode);
	this._spriteTexture.wrapU = 0;
	this._spriteTexture.wrapV = 0;
	if(epsilon == null) this._epsilon = 0.01; else this._epsilon = epsilon;
	if(samplingMode == 1) this._spriteTexture.anisotropicFilteringLevel = 1;
	this._scene = scene;
	this._scene.spriteManagers.push(this);
	this._vertexBuffer = scene._engine.createDynamicVertexBuffer(capacity * this._vertexStrideSize * 4);
	var indices = [];
	var index = 0;
	var _g = 0;
	while(_g < capacity) {
		var count = _g++;
		indices.push(index);
		indices.push(index + 1);
		indices.push(index + 2);
		indices.push(index);
		indices.push(index + 2);
		indices.push(index + 3);
		index += 4;
	}
	this._indexBuffer = scene._engine.createIndexBuffer(indices);
	var elements = capacity * this._vertexStrideSize;
	var this1;
	if(elements != null) this1 = new Float32Array(elements); else this1 = null;
	this._vertices = this1;
	this._effectBase = this._scene._engine.createEffect("sprites",["position","options","cellInfo","color"],["view","projection","textureInfos","alphaTest"],["diffuseSampler"],"");
	this._effectFog = this._scene._engine.createEffect("sprites",["position","options","cellInfo","color"],["view","projection","textureInfos","alphaTest","vFogInfos","vFogColor"],["diffuseSampler"],"#define FOG");
};
$hxClasses["com.babylonhx.sprites.SpriteManager"] = com_babylonhx_sprites_SpriteManager;
com_babylonhx_sprites_SpriteManager.__name__ = true;
com_babylonhx_sprites_SpriteManager.prototype = {
	_appendSpriteVertex: function(index,sprite,offsetX,offsetY,rowSize) {
		var arrayOffset = index * 16;
		if(offsetX == 0) offsetX = this._epsilon; else if(offsetX == 1) offsetX = 1 - this._epsilon;
		if(offsetY == 0) offsetY = this._epsilon; else if(offsetY == 1) offsetY = 1 - this._epsilon;
		this._vertices[arrayOffset] = sprite.position.x;
		this._vertices[arrayOffset + 1] = sprite.position.y;
		this._vertices[arrayOffset + 2] = sprite.position.z;
		this._vertices[arrayOffset + 3] = sprite.angle;
		this._vertices[arrayOffset + 4] = sprite.width;
		this._vertices[arrayOffset + 5] = sprite.height;
		this._vertices[arrayOffset + 6] = offsetX;
		this._vertices[arrayOffset + 7] = offsetY;
		if(sprite.invertU) this._vertices[arrayOffset + 8] = 1; else this._vertices[arrayOffset + 8] = 0;
		if(sprite.invertV) this._vertices[arrayOffset + 9] = 1; else this._vertices[arrayOffset + 9] = 0;
		var offset = sprite.cellIndex / rowSize | 0;
		this._vertices[arrayOffset + 10] = sprite.cellIndex - offset * rowSize;
		this._vertices[arrayOffset + 11] = offset;
		this._vertices[arrayOffset + 12] = sprite.color.r;
		this._vertices[arrayOffset + 13] = sprite.color.g;
		this._vertices[arrayOffset + 14] = sprite.color.b;
		this._vertices[arrayOffset + 15] = sprite.color.a;
	}
	,intersects: function(ray,camera,predicate,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var count = Std["int"](Math.min(this._capacity,this.sprites.length));
		var min = new com_babylonhx_math_Vector3(0,0,0);
		var max = new com_babylonhx_math_Vector3(0,0,0);
		var distance = Infinity;
		var currentSprite = null;
		var cameraSpacePosition = new com_babylonhx_math_Vector3(0,0,0);
		var cameraView = camera.getViewMatrix();
		var _g = 0;
		while(_g < count) {
			var index = _g++;
			var sprite = this.sprites[index];
			if(sprite == null) continue;
			if(predicate != null) {
				if(!predicate(sprite)) continue;
			} else if(!sprite.isPickable) continue;
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(sprite.position,cameraView,cameraSpacePosition);
			min.x = cameraSpacePosition.x - sprite.width / 2;
			min.y = cameraSpacePosition.y - sprite.height / 2;
			min.z = cameraSpacePosition.z;
			min;
			max.x = cameraSpacePosition.x + sprite.width / 2;
			max.y = cameraSpacePosition.y + sprite.height / 2;
			max.z = cameraSpacePosition.z;
			max;
			if(ray.intersectsBoxMinMax(min,max)) {
				var currentDistance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(cameraSpacePosition,ray.origin));
				if(distance > currentDistance) {
					distance = currentDistance;
					currentSprite = sprite;
					if(fastCheck) break;
				}
			}
		}
		if(currentSprite != null) {
			var result = new com_babylonhx_collisions_PickingInfo();
			result.hit = true;
			result.pickedSprite = currentSprite;
			result.distance = distance;
			return result;
		}
		return null;
	}
	,render: function() {
		if(!this._effectBase._isReady || !this._effectFog._isReady || this._spriteTexture == null || !this._spriteTexture.isReady()) return;
		var engine = this._scene._engine;
		var baseSize = this._spriteTexture.getBaseSize();
		var deltaTime = engine.deltaTime;
		var max = Math.min(this._capacity,this.sprites.length);
		var rowSize = baseSize.width / this.cellSize;
		var offset = 0;
		var _g = 0;
		while(_g < max) {
			var index = _g++;
			var sprite = this.sprites[index];
			if(sprite == null) continue;
			if(sprite._animationStarted) {
				sprite._time += deltaTime;
				if(sprite._time > sprite._delay) {
					sprite._time = sprite._time % sprite._delay;
					sprite.cellIndex += sprite._direction;
					if(sprite.cellIndex == sprite._toIndex) {
						if(sprite._loopAnimation) sprite.cellIndex = sprite._fromIndex; else {
							sprite._animationStarted = false;
							if(sprite.disposeWhenFinishedAnimating) sprite.dispose();
						}
					}
				}
			}
			this._appendSpriteVertex(offset++,sprite,0,0,rowSize);
			this._appendSpriteVertex(offset++,sprite,1,0,rowSize);
			this._appendSpriteVertex(offset++,sprite,1,1,rowSize);
			this._appendSpriteVertex(offset++,sprite,0,1,rowSize);
		}
		engine.updateDynamicVertexBuffer(this._vertexBuffer,this._vertices,null);
		var effect = this._effectBase;
		if(this._scene.fogEnabled && this._scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE && this.fogEnabled) effect = this._effectFog;
		engine.enableEffect(effect);
		var viewMatrix = this._scene._viewMatrix;
		effect._engine.setTexture(HxOverrides.indexOf(effect._samplers,"diffuseSampler",0),this._spriteTexture);
		effect._engine.setMatrix(effect._uniforms.get("view"),viewMatrix);
		effect;
		effect._engine.setMatrix(effect._uniforms.get("projection"),this._scene._projectionMatrix);
		effect;
		effect._engine.setFloat2(effect._uniforms.get("textureInfos"),this.cellSize / baseSize.width,this.cellSize / baseSize.height);
		effect;
		if(this._scene.fogEnabled && this._scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE && this.fogEnabled) {
			effect._engine.setFloat4(effect._uniforms.get("vFogInfos"),this._scene.fogMode,this._scene.fogStart,this._scene.fogEnd,this._scene.fogDensity);
			effect;
			effect._engine.setColor3(effect._uniforms.get("vFogColor"),this._scene.fogColor);
			effect;
		}
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,effect);
		engine._depthCullingState.set_depthFunc(515);
		effect._engine.setBool(effect._uniforms.get("alphaTest"),true);
		effect;
		lime_graphics_opengl_GL.context.colorMask(false,false,false,false);
		engine.draw(true,0,max * 6);
		lime_graphics_opengl_GL.context.colorMask(true,true,true,true);
		effect._engine.setBool(effect._uniforms.get("alphaTest"),false);
		effect;
		if(engine._alphaMode == 2) null; else {
			switch(2) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 2;
		}
		engine.draw(true,0,max * 6);
		if(engine._alphaMode == 0) null; else {
			switch(0) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 0;
		}
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		if(this._spriteTexture != null) {
			this._spriteTexture.dispose();
			this._spriteTexture = null;
		}
		HxOverrides.remove(this._scene.spriteManagers,this);
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_sprites_SpriteManager
};
var com_babylonhx_tools_AsyncLoop = $hx_exports.BABYLON.AsyncLoop = function(iterations,_fn,_successCallback,offset) {
	if(offset == null) offset = 0;
	this.iterations = iterations;
	this._fn = _fn;
	this._successCallback = _successCallback;
	this.index = offset - 1;
	this._done = false;
};
$hxClasses["com.babylonhx.tools.AsyncLoop"] = com_babylonhx_tools_AsyncLoop;
com_babylonhx_tools_AsyncLoop.__name__ = true;
com_babylonhx_tools_AsyncLoop.Run = function(iterations,_fn,_successCallback,offset) {
	if(offset == null) offset = 0;
	var loop = new com_babylonhx_tools_AsyncLoop(iterations,_fn,_successCallback,offset);
	loop.executeNext();
	return loop;
};
com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop = function(iterations,syncedIterations,fn,cback,breakFunction,timeout) {
	if(timeout == null) timeout = 0;
	com_babylonhx_tools_AsyncLoop.Run(Math.ceil(iterations / syncedIterations),function(loop) {
		if(breakFunction != null && breakFunction()) loop.breakLoop(); else com_babylonhx_tools_Tools.delay(function() {
			var _g = 0;
			while(_g < syncedIterations) {
				var i = _g++;
				var iteration = loop.index * syncedIterations + i;
				if(iteration >= iterations) break;
				fn(iteration);
				if(breakFunction != null && breakFunction()) {
					loop.breakLoop();
					break;
				}
			}
			loop.executeNext();
		},timeout);
	},cback);
};
com_babylonhx_tools_AsyncLoop.prototype = {
	executeNext: function() {
		if(!this._done) {
			if(this.index + 1 < this.iterations) {
				++this.index;
				this._fn(this);
			} else this.breakLoop();
		}
	}
	,breakLoop: function() {
		this._done = true;
		this._successCallback();
	}
	,__class__: com_babylonhx_tools_AsyncLoop
};
var com_babylonhx_tools_SmartArray = $hx_exports.BABYLON.SmartArray = function(capacity) {
	if(capacity == null) capacity = 256;
	this._duplicateId = 0;
	this.length = 0;
	this.data = [];
	this._id = com_babylonhx_tools_SmartArray._GlobalId++;
};
$hxClasses["com.babylonhx.tools.SmartArray"] = com_babylonhx_tools_SmartArray;
com_babylonhx_tools_SmartArray.__name__ = true;
com_babylonhx_tools_SmartArray.prototype = {
	push: function(value) {
		this.data[this.length++] = value;
		if(value.__smartArrayFlags == null) value.__smartArrayFlags = [];
		value.__smartArrayFlags[this._id] = this._duplicateId;
	}
	,pushNoDuplicate: function(value) {
		if(value.__smartArrayFlags != null && value.__smartArrayFlags[this._id] == this._duplicateId) return;
		this.data[this.length++] = value;
		if(value.__smartArrayFlags == null) value.__smartArrayFlags = [];
		value.__smartArrayFlags[this._id] = this._duplicateId;
	}
	,sort: function(compareFn) {
		this.data.sort(compareFn);
	}
	,reset: function() {
		this.length = 0;
		this._duplicateId++;
	}
	,concatArray: function(array) {
		if(array.length != 0) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.data[this.length++] = array[index];
			}
		}
	}
	,concatSmartArray: function(array) {
		if(array.length != 0) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.data[this.length++] = array.data[index];
			}
		}
	}
	,concatArrayWithNoDuplicate: function(array) {
		if(array.length != 0) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var index = _g1++;
				var item = array[index];
				this.pushNoDuplicate(item);
			}
		}
	}
	,concatSmartArrayWithNoDuplicate: function(array) {
		if(array.length != 0) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var index = _g1++;
				var item = array.data[index];
				this.pushNoDuplicate(item);
			}
		}
	}
	,indexOf: function(value) {
		var position = HxOverrides.indexOf(this.data,value,0);
		if(position >= this.length) return -1;
		return position;
	}
	,__class__: com_babylonhx_tools_SmartArray
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = haxe_Timer.stamp();
	var r = f();
	haxe_Log.trace(haxe_Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var com_babylonhx_tools_Tools = $hx_exports.BABYLON.Tools = function() { };
$hxClasses["com.babylonhx.tools.Tools"] = com_babylonhx_tools_Tools;
com_babylonhx_tools_Tools.__name__ = true;
com_babylonhx_tools_Tools.ToHex = function(i) {
	var str = StringTools.hex(i,16);
	if(i <= 15) {
		var ret = "0" + str;
		return ret.toUpperCase();
	}
	return str.toUpperCase();
};
com_babylonhx_tools_Tools.GetExponantOfTwo = function(value,max) {
	var count = 1;
	do count *= 2; while(count < value);
	if(count > max) count = max;
	return count;
};
com_babylonhx_tools_Tools.Lerp = function(v0,v1,t) {
	return (1 - t) * v0 + t * v1;
};
com_babylonhx_tools_Tools.GetFilename = function(path) {
	var index = path.lastIndexOf("/");
	if(index < 0) return path;
	return path.substring(index + 1);
};
com_babylonhx_tools_Tools.ToDegrees = function(angle) {
	return angle * 180 / Math.PI;
};
com_babylonhx_tools_Tools.ToRadians = function(angle) {
	return angle * Math.PI / 180;
};
com_babylonhx_tools_Tools.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
com_babylonhx_tools_Tools.ExtractMinAndMaxIndexed = function(positions,indices,indexStart,indexCount) {
	var minimum = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
	var maximum = new com_babylonhx_math_Vector3(-Infinity,-Infinity,-Infinity);
	var _g1 = indexStart;
	var _g = indexStart + indexCount;
	while(_g1 < _g) {
		var index = _g1++;
		var current = new com_babylonhx_math_Vector3(positions[indices[index] * 3],positions[indices[index] * 3 + 1],positions[indices[index] * 3 + 2]);
		minimum = com_babylonhx_math_Vector3.Minimize(current,minimum);
		maximum = com_babylonhx_math_Vector3.Maximize(current,maximum);
	}
	return { minimum : minimum, maximum : maximum};
};
com_babylonhx_tools_Tools.ExtractMinAndMax = function(positions,start,count) {
	var minimum = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
	var maximum = new com_babylonhx_math_Vector3(-Infinity,-Infinity,-Infinity);
	var _g1 = start;
	var _g = start + count;
	while(_g1 < _g) {
		var index = _g1++;
		var current = new com_babylonhx_math_Vector3(positions[index * 3],positions[index * 3 + 1],positions[index * 3 + 2]);
		minimum = com_babylonhx_math_Vector3.Minimize(current,minimum);
		maximum = com_babylonhx_math_Vector3.Maximize(current,maximum);
	}
	return { minimum : minimum, maximum : maximum};
};
com_babylonhx_tools_Tools.MakeArray = function(obj,allowsNullUndefined) {
	if(allowsNullUndefined == null) allowsNullUndefined = false;
	if(allowsNullUndefined != true && obj == null) return null;
	if(Object.prototype.hasOwnProperty.call(obj,"get")) {
		var ret = [];
		var $it0 = (function($this) {
			var $r;
			var this1;
			this1 = js_Boot.__cast(obj , haxe_IMap);
			$r = this1.keys();
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var key = $it0.next();
			ret.push(obj.get(key));
		}
		return ret;
	}
	if((obj instanceof Array) && obj.__enum__ == null) return obj; else return [obj];
};
com_babylonhx_tools_Tools.CleanUrl = function(url) {
	var regex = new EReg("#","mg");
	url = regex.replace(url,"%23");
	return url;
};
com_babylonhx_tools_Tools.LoadFile = function(path,callbackFn,type) {
	if(type == null) type = "";
	if(type == "") {
		if(lime_Assets.exists(path)) {
			if(StringTools.endsWith(path,"bbin")) {
				var callBackFunction;
				if(callbackFn != null) callBackFunction = function(result) {
					callbackFn(result);
				}; else callBackFunction = function(_) {
				};
				var data = lime_Assets.getBytes(path);
				callBackFunction(data);
			} else {
				var callBackFunction1;
				if(callbackFn != null) callBackFunction1 = function(result1) {
					callbackFn(result1);
				}; else callBackFunction1 = function(_1) {
				};
				callBackFunction1(lime_Assets.getText(path));
			}
		} else haxe_Log.trace("File '" + path + "' doesn't exist!",{ fileName : "Tools.hx", lineNumber : 480, className : "com.babylonhx.tools.Tools", methodName : "LoadFile"});
	} else if(lime_Assets.exists(path)) switch(type) {
	case "text":
		var callBackFunction2;
		if(callbackFn != null) callBackFunction2 = function(result2) {
			callbackFn(result2);
		}; else callBackFunction2 = function(_2) {
		};
		var data1 = lime_Assets.getText(path);
		callBackFunction2(data1);
		break;
	case "bin":
		var callBackFunction3;
		if(callbackFn != null) callBackFunction3 = function(result3) {
			callbackFn(result3);
		}; else callBackFunction3 = function(_3) {
		};
		var data2 = lime_Assets.getBytes(path);
		callBackFunction3(data2);
		break;
	case "img":
		var img = lime_Assets.getImage(path);
		var image = new com_babylonhx_utils_Image(img.get_data(),img.width,img.height);
		if(callbackFn != null) callbackFn(image);
		break;
	} else haxe_Log.trace("File '" + path + "' doesn't exist!",{ fileName : "Tools.hx", lineNumber : 531, className : "com.babylonhx.tools.Tools", methodName : "LoadFile"});
};
com_babylonhx_tools_Tools.LoadImage = function(url,onload,onerror,db) {
	if(lime_Assets.exists(url)) {
		var future = lime_Assets.loadImage(url);
		future.onComplete(function(img) {
			var image = new com_babylonhx_utils_Image(img.get_data(),img.width,img.height);
			onload(image);
		});
	} else haxe_Log.trace("Image '" + url + "' doesn't exist!",{ fileName : "Tools.hx", lineNumber : 663, className : "com.babylonhx.tools.Tools", methodName : "LoadImage"});
};
com_babylonhx_tools_Tools.Clamp = function(value,min,max) {
	if(max == null) max = 1;
	if(min == null) min = 0;
	return Math.min(max,Math.max(min,value));
};
com_babylonhx_tools_Tools.Clamp2 = function(x,a,b) {
	if(x < a) return a; else if(x > b) return b; else return x;
};
com_babylonhx_tools_Tools.Sign = function(value) {
	if(value == 0) return 0;
	if(value > 0) return 1; else return -1;
};
com_babylonhx_tools_Tools.Format = function(value,decimals) {
	if(decimals == null) decimals = 2;
	value = Math.round(value * Math.pow(10,decimals));
	var str = "" + value;
	var len = str.length;
	if(len <= decimals) {
		while(len < decimals) {
			str = "0" + str;
			len++;
		}
		return (decimals == 0?"":"0.") + str;
	} else return HxOverrides.substr(str,0,str.length - decimals) + (decimals == 0?"":".") + HxOverrides.substr(str,str.length - decimals,null);
};
com_babylonhx_tools_Tools.CheckExtends = function(v,min,max) {
	if(v.x < min.x) min.x = v.x;
	if(v.y < min.y) min.y = v.y;
	if(v.z < min.z) min.z = v.z;
	if(v.x > max.x) max.x = v.x;
	if(v.y > max.y) max.y = v.y;
	if(v.z > max.z) max.z = v.z;
};
com_babylonhx_tools_Tools.WithinEpsilon = function(a,b,epsilon) {
	if(epsilon == null) epsilon = 1.401298E-45;
	var num = a - b;
	return -epsilon <= num && num <= epsilon;
};
com_babylonhx_tools_Tools.cloneValue = function(source,destinationObject) {
	if(source == null) return null;
	if(js_Boot.__instanceof(source,com_babylonhx_mesh_Mesh)) return null;
	if(js_Boot.__instanceof(source,com_babylonhx_mesh_SubMesh)) return (js_Boot.__cast(source , com_babylonhx_mesh_SubMesh)).clone(js_Boot.__cast(destinationObject , com_babylonhx_mesh_AbstractMesh)); else if(Object.prototype.hasOwnProperty.call(source,"clone")) return source.clone();
	return null;
};
com_babylonhx_tools_Tools.IsEmpty = function(obj) {
	if((obj instanceof Array) && obj.__enum__ == null) {
		var _g = 0;
		var _g1;
		_g1 = js_Boot.__cast(obj , Array);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			return false;
		}
	}
	return true;
};
com_babylonhx_tools_Tools.Now = function() {
	return Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
};
com_babylonhx_tools_Tools.getTimer = function() {
	return Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
};
com_babylonhx_tools_Tools.uuid = function() {
	var specialChars_0 = "8";
	var specialChars_1 = "9";
	var specialChars_2 = "A";
	var specialChars_3 = "B";
	var createRandomIdentifier = function(length,radix) {
		if(radix == null) radix = 61;
		var characters = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
		var id = [];
		if(radix > 61) radix = 61; else radix = radix;
		while(length-- > 0) id.push(characters[Math.floor((radix + 1) * Math.random())]);
		return id.join("");
	};
	return createRandomIdentifier(8,15) + "-" + createRandomIdentifier(4,15) + "-4" + createRandomIdentifier(3,15) + "-" + Math.floor(4 * Math.random()) + createRandomIdentifier(3,15) + "-" + createRandomIdentifier(12,15);
};
com_babylonhx_tools_Tools.randomInt = function(from,to) {
	return from + Math.floor((to - from + 1) * Math.random());
};
com_babylonhx_tools_Tools.randomFloat = function(from,to) {
	return from + (to - from + 1) * Math.random();
};
var com_babylonhx_utils_Image = function(data,width,height) {
	this.width = 0;
	this.height = 0;
	this.width = width;
	this.height = height;
	if(data != null) this.data = data; else {
		var elements = width * height * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		this.data = this1;
	}
};
$hxClasses["com.babylonhx.utils.Image"] = com_babylonhx_utils_Image;
com_babylonhx_utils_Image.__name__ = true;
com_babylonhx_utils_Image.prototype = {
	__class__: com_babylonhx_utils_Image
};
var com_babylonhx_utils_Scancodes = function() { };
$hxClasses["com.babylonhx.utils.Scancodes"] = com_babylonhx_utils_Scancodes;
com_babylonhx_utils_Scancodes.__name__ = true;
com_babylonhx_utils_Scancodes.$name = function(scancode) {
	var res = null;
	if(scancode >= 0 && scancode < com_babylonhx_utils_Scancodes.scancode_names.length) res = com_babylonhx_utils_Scancodes.scancode_names[scancode];
	if(res != null) return res; else return "";
};
var com_babylonhx_utils_Keycodes = function() { };
$hxClasses["com.babylonhx.utils.Keycodes"] = com_babylonhx_utils_Keycodes;
com_babylonhx_utils_Keycodes.__name__ = true;
com_babylonhx_utils_Keycodes.from_scan = function(scancode) {
	return scancode | com_babylonhx_utils_Scancodes.MASK;
};
com_babylonhx_utils_Keycodes.to_scan = function(keycode) {
	if((keycode & com_babylonhx_utils_Scancodes.MASK) != 0) return keycode & ~com_babylonhx_utils_Scancodes.MASK;
	switch(keycode) {
	case 13:
		return com_babylonhx_utils_Scancodes.enter;
	case 27:
		return com_babylonhx_utils_Scancodes.escape;
	case 8:
		return com_babylonhx_utils_Scancodes.backspace;
	case 9:
		return com_babylonhx_utils_Scancodes.tab;
	case 32:
		return com_babylonhx_utils_Scancodes.space;
	case 47:
		return com_babylonhx_utils_Scancodes.slash;
	case 48:
		return com_babylonhx_utils_Scancodes.key_0;
	case 49:
		return com_babylonhx_utils_Scancodes.key_1;
	case 50:
		return com_babylonhx_utils_Scancodes.key_2;
	case 51:
		return com_babylonhx_utils_Scancodes.key_3;
	case 52:
		return com_babylonhx_utils_Scancodes.key_4;
	case 53:
		return com_babylonhx_utils_Scancodes.key_5;
	case 54:
		return com_babylonhx_utils_Scancodes.key_6;
	case 55:
		return com_babylonhx_utils_Scancodes.key_7;
	case 56:
		return com_babylonhx_utils_Scancodes.key_8;
	case 57:
		return com_babylonhx_utils_Scancodes.key_9;
	case 59:
		return com_babylonhx_utils_Scancodes.semicolon;
	case 61:
		return com_babylonhx_utils_Scancodes.equals;
	case 91:
		return com_babylonhx_utils_Scancodes.leftbracket;
	case 92:
		return com_babylonhx_utils_Scancodes.backslash;
	case 93:
		return com_babylonhx_utils_Scancodes.rightbracket;
	case 96:
		return com_babylonhx_utils_Scancodes.grave;
	case 97:
		return com_babylonhx_utils_Scancodes.key_a;
	case 98:
		return com_babylonhx_utils_Scancodes.key_b;
	case 99:
		return com_babylonhx_utils_Scancodes.key_c;
	case 100:
		return com_babylonhx_utils_Scancodes.key_d;
	case 101:
		return com_babylonhx_utils_Scancodes.key_e;
	case 102:
		return com_babylonhx_utils_Scancodes.key_f;
	case 103:
		return com_babylonhx_utils_Scancodes.key_g;
	case 104:
		return com_babylonhx_utils_Scancodes.key_h;
	case 105:
		return com_babylonhx_utils_Scancodes.key_i;
	case 106:
		return com_babylonhx_utils_Scancodes.key_j;
	case 107:
		return com_babylonhx_utils_Scancodes.key_k;
	case 108:
		return com_babylonhx_utils_Scancodes.key_l;
	case 109:
		return com_babylonhx_utils_Scancodes.key_m;
	case 110:
		return com_babylonhx_utils_Scancodes.key_n;
	case 111:
		return com_babylonhx_utils_Scancodes.key_o;
	case 112:
		return com_babylonhx_utils_Scancodes.key_p;
	case 113:
		return com_babylonhx_utils_Scancodes.key_q;
	case 114:
		return com_babylonhx_utils_Scancodes.key_r;
	case 115:
		return com_babylonhx_utils_Scancodes.key_s;
	case 116:
		return com_babylonhx_utils_Scancodes.key_t;
	case 117:
		return com_babylonhx_utils_Scancodes.key_u;
	case 118:
		return com_babylonhx_utils_Scancodes.key_v;
	case 119:
		return com_babylonhx_utils_Scancodes.key_w;
	case 120:
		return com_babylonhx_utils_Scancodes.key_x;
	case 121:
		return com_babylonhx_utils_Scancodes.key_y;
	case 122:
		return com_babylonhx_utils_Scancodes.key_z;
	}
	return com_babylonhx_utils_Scancodes.unknown;
};
com_babylonhx_utils_Keycodes.$name = function(keycode) {
	if((keycode & com_babylonhx_utils_Scancodes.MASK) != 0) return com_babylonhx_utils_Scancodes.$name(keycode & ~com_babylonhx_utils_Scancodes.MASK);
	switch(keycode) {
	case 13:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.enter);
	case 27:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.escape);
	case 8:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.backspace);
	case 9:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.tab);
	case 32:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.space);
	case 127:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes["delete"]);
	default:
		var decoder = new haxe_Utf8();
		decoder.__b += String.fromCharCode(keycode);
		return decoder.__b;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = true;
haxe_Utf8.prototype = {
	__class__: haxe_Utf8
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Object.prototype.hasOwnProperty.call(val,"name")) this.name = Reflect.field(val,"name"); else this.name = "Error";
	if(Object.prototype.hasOwnProperty.call(val,"message")) this.message = Reflect.field(val,"message"); else this.message = Std.string(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) return ctx;
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = true;
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = true;
lime_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_app_Event_$Void_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Void_Void"] = lime_app_Event_$Void_$Void;
lime_app_Event_$Void_$Void.__name__ = true;
lime_app_Event_$Void_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function() {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Void_$Void
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = true;
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 122, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 128, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 134, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime_Assets.getBytes = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe_Log.trace("[Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 171, className : "lime.Assets", methodName : "getBytes"});
		} else haxe_Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 177, className : "lime.Assets", methodName : "getBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 183, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id,font);
				return font;
			} else haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 234, className : "lime.Assets", methodName : "getFont"});
		} else haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 240, className : "lime.Assets", methodName : "getFont"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 246, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id,image1);
				return image1;
			} else haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 304, className : "lime.Assets", methodName : "getImage"});
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 310, className : "lime.Assets", methodName : "getImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 316, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 364, className : "lime.Assets", methodName : "getPath"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 370, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 407, className : "lime.Assets", methodName : "getText"});
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 413, className : "lime.Assets", methodName : "getText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 419, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime_Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime_Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime_Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	lime_Assets.initialize();
	var items = [];
	var $it0 = lime_Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) {
			promise.complete(audio);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			var future = library.loadAudioBuffer(symbolName);
			if(useCache && lime_Assets.cache.enabled) future.onComplete(function(audio1) {
				lime_Assets.cache.audio.set(id,audio1);
			});
			promise.completeWith(future);
		} else promise.error("[Assets] There is no audio asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadBytes = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) promise.completeWith(library.loadBytes(symbolName)); else promise.error("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadFont = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) promise.completeWith(library.loadFont(symbolName)); else promise.error("[Assets] There is no Font asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) {
			promise.complete(image);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			var future = library.loadImage(symbolName);
			if(useCache && lime_Assets.cache.enabled) future.onComplete(function(image1) {
				lime_Assets.cache.image.set(id,image1);
			});
			promise.completeWith(future);
		} else promise.error("[Assets] There is no Image asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadLibrary = function(name) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var data = lime_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime_Assets.libraries.set(name,library);
		library.onChange.add(($_=lime_Assets.onChange,$bind($_,$_.dispatch)));
		promise.completeWith(library.load());
	} else promise.error("[Assets] There is no asset library named \"" + name + "\"");
	return promise.future;
};
lime_Assets.loadText = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) promise.completeWith(library.loadText(symbolName)); else promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.registerLibrary = function(name,library) {
	if(lime_Assets.libraries.exists(name)) {
		if(lime_Assets.libraries.get(name) == library) return; else lime_Assets.unloadLibrary(name);
	}
	if(library != null) library.onChange.add(lime_Assets.library_onChange);
	lime_Assets.libraries.set(name,library);
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var library = lime_Assets.libraries.get(name);
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_Assets.library_onChange);
		library.unload();
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onChange = function() {
	lime_Assets.cache.clear();
	lime_Assets.onChange.dispatch();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = true;
lime__$backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) return 60; else if(this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
	}
	,handleApplicationEvent: function(__) {
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.renderers[0] != null) {
				this.parent.renderers[0].onRender.dispatch();
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") this.parent.windows[0].onKeyDown.dispatch(keyCode,modifier); else this.parent.windows[0].onKeyUp.dispatch(keyCode,modifier);
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				this.parent.windows[0].onFocusIn.dispatch();
				this.parent.windows[0].onActivate.dispatch();
				break;
			case "blur":
				this.parent.windows[0].onFocusOut.dispatch();
				this.parent.windows[0].onDeactivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) this.parent.windows[0].onResize.dispatch(this.parent.windows[0].__width,this.parent.windows[0].__height);
				break;
			case "beforeunload":
				this.parent.windows[0].onClose.dispatch();
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = true;
lime__$backend_html5_HTML5Renderer.prototype = {
	create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var options = { alpha : true, antialias : Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing")?this.parent.window.config.antialiasing > 0:false, depth : Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer")?this.parent.window.config.depthBuffer:true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer")?this.parent.window.config.stencilBuffer:true, preserveDrawingBuffer : false};
			var webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.parent.window.backend.canvas,options);
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = true;
lime__$backend_html5_HTML5Window.prototype = {
	alert: function(message,title) {
		if(message != null) js_Browser.alert(message);
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) haxe_Timer.delay(function() {
			lime__$backend_html5_HTML5Window.textInput.focus();
		},20);
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != "") {
			this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = "";
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				break;
			case "mouseenter":
				this.parent.onEnter.dispatch();
				break;
			case "mouseleave":
				this.parent.onLeave.dispatch();
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				break;
			case "mousemove":
				this.parent.onMouseMove.dispatch(x,y);
				break;
			default:
			}
		} else this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) rect = this.canvas.getBoundingClientRect(); else if(this.div != null) rect = this.div.getBoundingClientRect(); else rect = this.element.getBoundingClientRect();
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (this.parent.__width / rect.width);
				y = (data.clientY - rect.top) * (this.parent.__height / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			var _g2 = event.type;
			switch(_g2) {
			case "touchstart":
				var touch = this.unusedTouchesPool.pop();
				if(touch == null) touch = new lime_ui_Touch(x / this.setWidth,y / this.setHeight,data.identifier,0,0,data.force,this.parent.id); else {
					touch.x = x / this.setWidth;
					touch.y = y / this.setHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) this.primaryTouch = touch;
				if(touch == this.primaryTouch) this.parent.onMouseDown.dispatch(x,y,0);
				break;
			case "touchend":
				var touch1 = this.currentTouches.h[data.identifier];
				if(touch1 != null) {
					var cacheX = touch1.x;
					var cacheY = touch1.y;
					touch1.x = x / this.setWidth;
					touch1.y = y / this.setHeight;
					touch1.dx = touch1.x - cacheX;
					touch1.dy = touch1.y - cacheY;
					touch1.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch1);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch2 = this.currentTouches.h[data.identifier];
				if(touch2 != null) {
					var cacheX1 = touch2.x;
					var cacheY1 = touch2.y;
					touch2.x = x / this.setWidth;
					touch2.y = y / this.setHeight;
					touch2.dx = touch2.x - cacheX1;
					touch2.dy = touch2.y - cacheY1;
					touch2.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch2);
					if(touch2 == this.primaryTouch) this.parent.onMouseMove.dispatch(x,y);
				}
				break;
			default:
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = "";
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_Event = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = true;
lime_app_Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Event_$Dynamic_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Dynamic_Void"] = lime_app_Event_$Dynamic_$Void;
lime_app_Event_$Dynamic_$Void.__name__ = true;
lime_app_Event_$Dynamic_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Dynamic_$Void
};
var lime_app_Event_$Float_$Float_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Int_Void"] = lime_app_Event_$Float_$Float_$Int_$Void;
lime_app_Event_$Float_$Float_$Int_$Void.__name__ = true;
lime_app_Event_$Float_$Float_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Int_$Void
};
var lime_app_Event_$Float_$Float_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Void"] = lime_app_Event_$Float_$Float_$Void;
lime_app_Event_$Float_$Float_$Void.__name__ = true;
lime_app_Event_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Void
};
var lime_app_Event_$Int_$Float_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Int_Float_Void"] = lime_app_Event_$Int_$Float_$Void;
lime_app_Event_$Int_$Float_$Void.__name__ = true;
lime_app_Event_$Int_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Int_$Float_$Void
};
var lime_app_Event_$Int_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Int_Int_Void"] = lime_app_Event_$Int_$Int_$Void;
lime_app_Event_$Int_$Int_$Void.__name__ = true;
lime_app_Event_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Int_$Int_$Void
};
var lime_app_Event_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Int_Void"] = lime_app_Event_$Int_$Void;
lime_app_Event_$Int_$Void.__name__ = true;
lime_app_Event_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Int_$Void
};
var lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = true;
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app_Event_$String_$Int_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_String_Int_Int_Void"] = lime_app_Event_$String_$Int_$Int_$Void;
lime_app_Event_$String_$Int_$Int_$Void.__name__ = true;
lime_app_Event_$String_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$String_$Int_$Int_$Void
};
var lime_app_Event_$String_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_String_Void"] = lime_app_Event_$String_$Void;
lime_app_Event_$String_$Void.__name__ = true;
lime_app_Event_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$String_$Void
};
var lime_app_Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_graphics_RenderContext_Void"] = lime_app_Event_$lime_$graphics_$RenderContext_$Void;
lime_app_Event_$lime_$graphics_$RenderContext_$Void.__name__ = true;
lime_app_Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_net_URLLoader_Int_Int_Void"] = lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void;
lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void.__name__ = true;
lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void
};
var lime_app_Event_$lime_$net_$URLLoader_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_net_URLLoader_Int_Void"] = lime_app_Event_$lime_$net_$URLLoader_$Int_$Void;
lime_app_Event_$lime_$net_$URLLoader_$Int_$Void.__name__ = true;
lime_app_Event_$lime_$net_$URLLoader_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$net_$URLLoader_$Int_$Void
};
var lime_app_Event_$lime_$net_$URLLoader_$String_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_net_URLLoader_String_Void"] = lime_app_Event_$lime_$net_$URLLoader_$String_$Void;
lime_app_Event_$lime_$net_$URLLoader_$String_$Void.__name__ = true;
lime_app_Event_$lime_$net_$URLLoader_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$net_$URLLoader_$String_$Void
};
var lime_app_Event_$lime_$net_$URLLoader_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_net_URLLoader_Void"] = lime_app_Event_$lime_$net_$URLLoader_$Void;
lime_app_Event_$lime_$net_$URLLoader_$Void.__name__ = true;
lime_app_Event_$lime_$net_$URLLoader_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$net_$URLLoader_$Void
};
var lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadAxis_Float_Void"] = lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = true;
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app_Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadButton_Void"] = lime_app_Event_$lime_$ui_$GamepadButton_$Void;
lime_app_Event_$lime_$ui_$GamepadButton_$Void.__name__ = true;
lime_app_Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app_Event_$lime_$ui_$Gamepad_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Gamepad_Void"] = lime_app_Event_$lime_$ui_$Gamepad_$Void;
lime_app_Event_$lime_$ui_$Gamepad_$Void.__name__ = true;
lime_app_Event_$lime_$ui_$Gamepad_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Gamepad_$Void
};
var lime_app_Event_$lime_$ui_$Joystick_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Joystick_Void"] = lime_app_Event_$lime_$ui_$Joystick_$Void;
lime_app_Event_$lime_$ui_$Joystick_$Void.__name__ = true;
lime_app_Event_$lime_$ui_$Joystick_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Joystick_$Void
};
var lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = true;
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app_Event_$lime_$ui_$Touch_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Touch_Void"] = lime_app_Event_$lime_$ui_$Touch_$Void;
lime_app_Event_$lime_$ui_$Touch_$Void.__name__ = true;
lime_app_Event_$lime_$ui_$Touch_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Touch_$Void
};
var lime_app_Future = function(work) {
	if(work != null) {
		if(lime_app_Future.__threadPool == null) {
			lime_app_Future.__threadPool = new lime_system_ThreadPool();
			lime_app_Future.__threadPool.doWork.add(lime_app_Future.threadPool_doWork);
			lime_app_Future.__threadPool.onComplete.add(lime_app_Future.threadPool_onComplete);
			lime_app_Future.__threadPool.onError.add(lime_app_Future.threadPool_onError);
		}
		var promise = new lime_app_Promise();
		promise.future = this;
		lime_app_Future.__threadPool.queue({ promise : promise, work : work});
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = true;
lime_app_Future.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app_Future.__threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app_Future.__threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app_Future.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app_Future.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
lime_app_Future.prototype = {
	onComplete: function(listener) {
		if(listener != null) {
			if(this.__completed) listener(this.value); else if(!this.__errored) {
				if(this.__completeListeners == null) this.__completeListeners = [];
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.__errored) listener(this.__errorMessage); else if(!this.__completed) {
				if(this.__errorListeners == null) this.__errorListeners = [];
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) this.__progressListeners = [];
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.__completed) return next(this.value); else if(this.__errored) {
			var future = new lime_app_Future();
			future.onError(this.__errorMessage);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,get_isCompleted: function() {
		return this.__completed || this.__errored;
	}
	,__class__: lime_app_Future
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
	this.onProgress = new lime_app_Event_$Int_$Int_$Void();
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = true;
lime_app_Preloader.prototype = {
	create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				if(!lime_app_Preloader.images.exists(url)) {
					var image = new Image();
					lime_app_Preloader.images.set(url,image);
					image.onload = $bind(this,this.image_onLoad);
					image.src = url;
					this.total++;
				}
				break;
			case "BINARY":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader = new lime_net_URLLoader();
					loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
					lime_app_Preloader.loaders.set(url,loader);
					this.total++;
				}
				break;
			case "TEXT":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader1 = new lime_net_URLLoader();
					lime_app_Preloader.loaders.set(url,loader1);
					this.total++;
				}
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime_app_Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime_app_Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime_net_URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.onProgress.dispatch(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.onProgress.dispatch(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = true;
lime_app_Promise.prototype = {
	complete: function(data) {
		if(!this.future.__errored) {
			this.future.__completed = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.__completed) {
			this.future.__errored = true;
			this.future.__errorMessage = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress) {
		if(!this.future.__errored && !this.future.__completed) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress);
				}
			}
		}
		return this;
	}
	,get_isCompleted: function() {
		return this.future.get_isCompleted();
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = true;
lime_audio_ALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = true;
lime_audio_ALCAudioContext.prototype = {
	closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = true;
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	return null;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
	if(url != null && url.indexOf("http://") == -1 && url.indexOf("https://") == -1) handler(lime_audio_AudioBuffer.fromFile(url)); else {
		var loader = new lime_net_URLLoader();
		loader.onComplete.add(function(_) {
			var bytes = haxe_io_Bytes.ofString(loader.data);
			handler(lime_audio_AudioBuffer.fromBytes(lime_utils_ByteArray.fromBytes(bytes)));
		});
		loader.onIOError.add(function(_1,msg) {
			handler(null);
		});
		loader.load(new lime_net_URLRequest(url));
	}
};
lime_audio_AudioBuffer.prototype = {
	dispose: function() {
	}
	,__class__: lime_audio_AudioBuffer
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : true, __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = true;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) this.set_length(length);
	this.__loops = loops;
	this.id = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = true;
lime_audio_AudioSource.prototype = {
	dispose: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.id != 0) al.deleteSource(this.id);
				break;
			default:
			}
		}
	}
	,init: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.buffer.id == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_loops: function() {
		return this.__loops;
	}
	,set_loops: function(loops) {
		return this.__loops = loops;
	}
	,get_length: function() {
		if(this.__length != null) return this.__length;
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = true;
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = true;
lime_audio_HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = true;
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return 0;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return 0;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	var _g = lime_audio_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = true;
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	var _g = lime_audio_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = true;
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = true;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = true;
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1.0;
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) farPlane = 1.0;
		if(nearPlane == null) nearPlane = 0.0;
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = true;
lime_graphics_FlashRenderContext.prototype = {
	addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer((function($this) {
					var $r;
					var elements = width * height * 4;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this)),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = true;
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(haxe_io_Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime_graphics_Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime_graphics_Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime_graphics_Image.prototype = {
	clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this,true);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.dirty = this.dirty;
			return image;
		} else return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		switch(format) {
		case "png":
			return lime_graphics_format_PNG.encode(this);
		case "jpg":case "jpeg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) return;
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var byteArray = this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
			if(format != null) switch(format) {
			case 1:
				break;
			case 2:
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					{
						var argb = byteArray.readUnsignedInt();
						var bgra = 0;
						bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
						color = bgra;
					}
					byteArray.position -= 4;
					byteArray.writeUnsignedInt(color);
				}
				byteArray.position = 0;
				break;
			default:
				var color1;
				var length1 = byteArray.length / 4 | 0;
				var _g11 = 0;
				while(_g11 < length1) {
					var i1 = _g11++;
					{
						var argb1 = byteArray.readUnsignedInt();
						var rgba = 0;
						rgba = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
						color1 = rgba;
					}
					byteArray.position -= 4;
					byteArray.writeUnsignedInt((function($this) {
						var $r;
						var bgra1 = 0;
						bgra1 = (color1 >> 8 & 255 & 255) << 24 | (color1 >> 16 & 255 & 255) << 16 | (color1 >> 24 & 255 & 255) << 8 | color1 & 255 & 255;
						$r = bgra1;
						return $r;
					}(this)));
				}
				byteArray.position = 0;
			} else {
				var color2;
				var length2 = byteArray.length / 4 | 0;
				var _g12 = 0;
				while(_g12 < length2) {
					var i2 = _g12++;
					{
						var argb2 = byteArray.readUnsignedInt();
						var rgba1 = 0;
						rgba1 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
						color2 = rgba1;
					}
					byteArray.position -= 4;
					byteArray.writeUnsignedInt((function($this) {
						var $r;
						var bgra2 = 0;
						bgra2 = (color2 >> 8 & 255 & 255) << 24 | (color2 >> 16 & 255 & 255) << 16 | (color2 >> 24 & 255 & 255) << 8 | color2 & 255 & 255;
						$r = bgra2;
						return $r;
					}(this)));
				}
				byteArray.position = 0;
			}
			return byteArray;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,byteArray,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,byteArray,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,byteArray,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format != null) switch(format) {
			case 1:
				break;
			case 2:
				var srcData = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = srcData.readUnsignedInt();
					byteArray.writeUnsignedInt(js_Boot.__cast(color , Int));
				}
				srcData.position = 0;
				byteArray.position = 0;
				break;
			default:
				var srcData1 = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color1;
				var length1 = byteArray.length / 4 | 0;
				var _g11 = 0;
				while(_g11 < length1) {
					var i1 = _g11++;
					color1 = srcData1.readUnsignedInt();
					byteArray.writeUnsignedInt(js_Boot.__cast(color1 , Int));
				}
				srcData1.position = 0;
				byteArray.position = 0;
			} else {
				var srcData2 = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color2;
				var length2 = byteArray.length / 4 | 0;
				var _g12 = 0;
				while(_g12 < length2) {
					var i2 = _g12++;
					color2 = srcData2.readUnsignedInt();
					byteArray.writeUnsignedInt(js_Boot.__cast(color2 , Int));
				}
				srcData2.position = 0;
				byteArray.position = 0;
			}
			this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(),byteArray);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read a PNG/JPG ByteArray, but found an invalid header.");
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this,false);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 32;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = true;
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
			var copy;
			var view = this.data;
			var this2;
			if(view != null) this2 = new Uint8Array(view); else this2 = null;
			copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : true, __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : true, __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event_$Void_$Void();
	this.onContextRestored = new lime_app_Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app_Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = true;
lime_graphics_Renderer.prototype = {
	create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = true;
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = true;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = true;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = true;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = true;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = true;
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : true, __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = true;
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = true;
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = true;
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = true;
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) type = lime_graphics_format_BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	default:
	} else {
	}
	var data = new lime_utils_ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	if(fileHeaderLength > 0) {
		data.writeByte(66);
		data.writeByte(77);
		data.writeInt(data.length);
		data.writeShort(0);
		data.writeShort(0);
		data.writeInt(fileHeaderLength + infoHeaderLength);
	}
	data.writeInt(infoHeaderLength);
	data.writeInt(image.width);
	data.writeInt(type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	data.writeShort(1);
	data.writeShort(type == lime_graphics_format_BMPType.RGB?24:32);
	data.writeInt(type == lime_graphics_format_BMPType.BITFIELD?3:0);
	data.writeInt(pixelValuesLength);
	data.writeInt(11824);
	data.writeInt(11824);
	data.writeInt(0);
	data.writeInt(0);
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.writeInt(16711680);
		data.writeInt(65280);
		data.writeInt(255);
		data.writeInt(-16777216);
		data.writeByte(32);
		data.writeByte(110);
		data.writeByte(105);
		data.writeByte(87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.writeByte(0);
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var a;
	var r;
	var g;
	var b;
	if(type != null) switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			pixels.position = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
			}
		}
		break;
	case 2:
		var andMask = new lime_utils_ByteArray(image.width * image.height);
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			pixels.position = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
				andMask.writeByte(0);
			}
		}
		data.writeBytes(andMask);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			pixels.position = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.writeByte(0);
			}
		}
		break;
	default:
	} else {
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : true, __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = true;
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var byteArray = new lime_utils_ByteArray(buffer.length);
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			byteArray.byteView[i] = HxOverrides.cca(buffer,i);
		}
		return byteArray;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = true;
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = true;
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = true;
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.data != null && buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	} else if(buffer.data == null && buffer.__srcImageData != null) buffer.data = buffer.__srcImageData.data;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) return;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage,false);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height); else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) return;
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas,x,y);
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,byteArray,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,byteArray,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcImageData = null;
		image.buffer.data = null;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = true;
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				value;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				var x = _g3++;
				switch(sourceFormat) {
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						var r;
						var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) sourcePixel = 0;
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = sourcePixel >> 8 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 0:
					destData[destPosition] = sourcePixel >> 24 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >> 24 & 255;
					destData[destPosition + 2] = sourcePixel >> 16 & 255;
					destData[destPosition + 3] = sourcePixel >> 8 & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					var x1 = _g31++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r1;
							var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
							var g1;
							var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
							var b1;
							var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
							sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r2;
							var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
							var g2;
							var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
							var b2;
							var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
							destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value;
						var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
						destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value;
						var value1;
						var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value1;
						var value2;
						var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
						value2;
						var value3;
						var idx12 = Math.round(blendAlpha * 255.0);
						value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
						value3;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					var x2 = _g32++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r3;
							var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
							var g3;
							var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
							var b3;
							var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
							sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r4;
							var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
							var g4;
							var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
							var b4;
							var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
							destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							var r5;
							var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
							var g5;
							var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
							var b5;
							var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
							alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value4;
						var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
						destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value4;
						var value5;
						var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value5;
						var value6;
						var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
						value6;
						var value7;
						var idx25 = Math.round(blendAlpha * 255.0);
						value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
						value7;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			fillColor = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			fillColor = rgba1;
		}
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	if(data == null) return;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) fillColor = 0;
				} else if((fillColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			var r;
			var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
		hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	if(fillColor == hitColor) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					var r1;
					var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				if(premultiplied) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) fillColor = 0;
					} else if((fillColor & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format1) {
				case 2:
					data[nextPointOffset] = fillColor >> 8 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 0:
					data[nextPointOffset] = fillColor >> 24 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >> 24 & 255;
					data[nextPointOffset + 2] = fillColor >> 16 & 255;
					data[nextPointOffset + 3] = fillColor >> 8 & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			_color = rgba;
		}
		{
			var argb1 = mask;
			var rgba1 = 0;
			rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
			_mask = rgba1;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba2 = 0;
			rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			_color = rgba2;
		}
		{
			var bgra1 = mask;
			var rgba3 = 0;
			rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
			_mask = rgba3;
		}
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
		255;
		_mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var y = _g3++;
			pixel = image.getPixel32(x,y,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(x < left) left = x;
				break;
			}
		}
		if(hit) break;
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var x1 = _g11++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var y1 = _g31++;
			pixel = image.getPixel32(ix,y1,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) right = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y2 = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var x2 = _g32++;
			pixel = image.getPixel32(x2,y2,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(y2 < top) top = y2;
				break;
			}
		}
		if(hit) break;
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var y3 = _g13++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var x3 = _g33++;
			pixel = image.getPixel32(x3,iy,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) bottom = iy;
				break;
			}
		}
		if(hit) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	0;
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var byteArray = new lime_utils_ByteArray(length * 4);
	byteArray.position = 0;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				{
					var argb1 = 0;
					argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					argb = argb1;
				}
				pixel = argb;
				break;
			case 2:
				{
					var bgra1 = 0;
					bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					bgra = bgra1;
				}
				pixel = bgra;
				break;
			default:
			}
			byteArray.__set(destPosition++,pixel >> 24 & 255);
			byteArray.__set(destPosition++,pixel >> 16 & 255);
			byteArray.__set(destPosition++,pixel >> 8 & 255);
			byteArray.__set(destPosition++,pixel & 255);
			position += 4;
		}
	}
	byteArray.position = 0;
	return byteArray;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					var r;
					var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value;
			var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value1;
			var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			value2;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
			value3;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer((function($this) {
		var $r;
		var elements = newWidth * newHeight * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		$r = this1;
		return $r;
	}(this)),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
			newData[index] = val;
			var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
			newData[index + 1] = val1;
			var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
			newData[index + 2] = val2;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData;
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
	newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			var r;
			var idx = Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			source = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
	value;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data1[offset1] = pixel >> 8 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 0:
		data1[offset1] = pixel >> 24 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >> 24 & 255;
		data1[offset1 + 2] = pixel >> 16 & 255;
		data1[offset1 + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,byteArray,format) {
	if(image.buffer.data == null) return;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = byteArray.readUnsignedInt();
			switch(format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
				255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) this.rect = image.get_rect(); else {
		if(rect.x < 0) rect.x = 0;
		if(rect.y < 0) rect.y = 0;
		if(rect.x + rect.width > image.width) rect.width = image.width - rect.x;
		if(rect.y + rect.height > image.height) rect.height = image.height - rect.y;
		if(rect.width < 0) rect.width = 0;
		if(rect.height < 0) rect.height = 0;
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = true;
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = true;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[18];
	var offset = this1[19] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[12];
	var offset = this1[14] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[6];
	var offset = this1[9] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[0];
	var offset = this1[4] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = true;
lime_math_Matrix3.prototype = {
	clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = true;
lime_math_Rectangle.prototype = {
	clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime_math_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime_math_Rectangle();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = true;
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = true;
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = true;
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) argb = 0;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
		this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			var r;
			var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
		var r;
		var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 0:
		data[offset] = this1 >> 16 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = true;
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) bgra = 0;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var b;
			var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var r;
			var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var b;
		var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var r;
		var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = true;
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) rgba = 0;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var r;
			var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var r;
		var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 24 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 8 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net_URLLoader = function(request) {
	this.onSecurityError = new lime_app_Event_$lime_$net_$URLLoader_$String_$Void();
	this.onProgress = new lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void();
	this.onOpen = new lime_app_Event_$lime_$net_$URLLoader_$Void();
	this.onIOError = new lime_app_Event_$lime_$net_$URLLoader_$String_$Void();
	this.onHTTPStatus = new lime_app_Event_$lime_$net_$URLLoader_$Int_$Void();
	this.onComplete = new lime_app_Event_$lime_$net_$URLLoader_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime_net_URLLoader;
lime_net_URLLoader.__name__ = true;
lime_net_URLLoader.prototype = {
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onHTTPStatus.dispatch(_g,s);
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) self.onIOError.dispatch(_g,"Failed to connect or resolve host"); else if(s == 12029) self.onIOError.dispatch(_g,"Failed to connect to host"); else if(s == 12007) self.onIOError.dispatch(_g,"Unknown host"); else if(s == 0) {
				self.onIOError.dispatch(_g,"Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError.dispatch(_g,"Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onIOError.dispatch(_g,"Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,lime_utils_ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,lime_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js_Boot.__cast(method , String),url,true);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onIOError.dispatch(this,e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen.dispatch(this);
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime_utils_ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		this.onComplete.dispatch(this);
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		this.onProgress.dispatch(this,this.bytesLoaded,this.bytesTotal);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
};
var lime_net_URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
lime_net_URLLoaderDataFormat.BINARY.toString = $estr;
lime_net_URLLoaderDataFormat.BINARY.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
lime_net_URLLoaderDataFormat.TEXT.toString = $estr;
lime_net_URLLoaderDataFormat.TEXT.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
lime_net_URLLoaderDataFormat.VARIABLES.__enum__ = lime_net_URLLoaderDataFormat;
var lime_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime_net_URLRequest;
lime_net_URLRequest.__name__ = true;
lime_net_URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,lime_utils_ByteArray)) {
			res = res.slice();
			res.push(new lime_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime_net_URLRequest
};
var lime_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime_net_URLRequestHeader;
lime_net_URLRequestHeader.__name__ = true;
lime_net_URLRequestHeader.prototype = {
	__class__: lime_net_URLRequestHeader
};
var lime_net_URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["lime.net.URLVariables"] = lime_net_URLVariables;
lime_net_URLVariables.__name__ = true;
lime_net_URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: lime_net_URLVariables
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = true;
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(!lime_system_CFFI.enabled) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = true;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	if(this1 != null) {
	}
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = true;
lime_system_Display.prototype = {
	__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = true;
lime_system_DisplayMode.prototype = {
	__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : true, __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = true;
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return null;
};
lime_system_System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime_app_Application.current != null && lime_app_Application.current.config != null) {
		if(lime_app_Application.current.config.company != null) company = lime_app_Application.current.config.company;
		if(lime_app_Application.current.config.file != null) file = lime_app_Application.current.config.file;
	}
	return null;
};
lime_system_System.get_desktopDirectory = function() {
	return null;
};
lime_system_System.get_documentsDirectory = function() {
	return null;
};
lime_system_System.get_fontsDirectory = function() {
	return null;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return null;
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) maxThreads = 1;
	if(minThreads == null) minThreads = 0;
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = true;
lime_system_ThreadPool.prototype = {
	queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : true, __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = true;
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = true;
lime_text_Font.fromBytes = function(bytes) {
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.prototype = {
	decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = true;
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = true;
lime_text_GlyphMetrics.prototype = {
	__class__: lime_text_GlyphMetrics
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = true;
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.prototype = {
	get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = true;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = true;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app_Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$Int_$Void();
	this.onButtonDown = new lime_app_Event_$Int_$Void();
	this.onAxisMove = new lime_app_Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = true;
lime_ui_Joystick.prototype = {
	get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,get_numAxes: function() {
		return 0;
	}
	,get_numButtons: function() {
		return 0;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = true;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) this1 = 0;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) this1 |= 4; else this1 &= 268435455 - 4;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) this1 |= 8; else this1 &= 268435455 - 8;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) this1 |= 2; else this1 &= 268435455 - 2;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) this1 |= 1; else this1 &= 268435455 - 1;
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = true;
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = true;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = true;
lime_ui_Touch.prototype = {
	__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app_Event_$String_$Void();
	this.onTextEdit = new lime_app_Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app_Event_$Void_$Void();
	this.onResize = new lime_app_Event_$Int_$Int_$Void();
	this.onMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app_Event_$Void_$Void();
	this.onLeave = new lime_app_Event_$Void_$Void();
	this.onKeyUp = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app_Event_$Void_$Void();
	this.onFocusOut = new lime_app_Event_$Void_$Void();
	this.onFocusIn = new lime_app_Event_$Void_$Void();
	this.onEnter = new lime_app_Event_$Void_$Void();
	this.onDeactivate = new lime_app_Event_$Void_$Void();
	this.onCreate = new lime_app_Event_$Void_$Void();
	this.onClose = new lime_app_Event_$Void_$Void();
	this.onActivate = new lime_app_Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"x")) this.__x = config.x;
		if(Object.prototype.hasOwnProperty.call(config,"y")) this.__y = config.y;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
		if(Object.prototype.hasOwnProperty.call(config,"title")) this.__title = config.title;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = true;
lime_ui_Window.prototype = {
	alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) this.renderer.create();
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(this.__title);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",get_display:"get_display"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : true, __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_ByteArray = function(size) {
	if(size == null) size = 0;
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime_utils_ByteArray;
lime_utils_ByteArray.__name__ = true;
lime_utils_ByteArray.fromBytes = function(bytes) {
	var result = new lime_utils_ByteArray();
	result.byteView = new Uint8Array(bytes.b.bufferValue);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
lime_utils_ByteArray.readFile = function(path) {
	return null;
};
lime_utils_ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime_utils_ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime_utils_ByteArray.lime_bytes_from_data_pointer = function(data,length) {
	return lime_utils_ByteArray.cffi_lime_bytes_from_data_pointer(data,length);
};
lime_utils_ByteArray.lime_bytes_get_data_pointer = function(data) {
	return lime_utils_ByteArray.cffi_lime_bytes_get_data_pointer(data);
};
lime_utils_ByteArray.lime_bytes_read_file = function(path) {
	return lime_utils_ByteArray.cffi_lime_bytes_read_file(path);
};
lime_utils_ByteArray.prototype = {
	clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,compress: function(algorithm) {
	}
	,deflate: function() {
		this.compress(lime_utils_CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(lime_utils_CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw new js__$Boot_HaxeError("Read error - Out of bounds");
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure * 2) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function(algorithm) {
		haxe_Log.trace("Warning: ByteArray.uncompress on JS target requires the 'format' haxelib",{ fileName : "ByteArray.hx", lineNumber : 603, className : "lime.utils.ByteArray", methodName : "uncompress"});
	}
	,write_uncheck: function($byte) {
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(bytes.length == 0) return;
		if(_$UInt_UInt_$Impl_$.gt(0,offset) || _$UInt_UInt_$Impl_$.gt(0,length)) throw new js__$Boot_HaxeError("Write error - Out of bounds");
		if(length == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position = this.position + length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFile: function(path) {
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this.__getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(bytes) {
		this.byteView = new Uint8Array(bytes.b.bufferValue);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime_utils_ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var lime_utils_CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : true, __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
lime_utils_CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime_utils_CompressionAlgorithm.DEFLATE.toString = $estr;
lime_utils_CompressionAlgorithm.DEFLATE.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.ZLIB = ["ZLIB",1];
lime_utils_CompressionAlgorithm.ZLIB.toString = $estr;
lime_utils_CompressionAlgorithm.ZLIB.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.LZMA = ["LZMA",2];
lime_utils_CompressionAlgorithm.LZMA.toString = $estr;
lime_utils_CompressionAlgorithm.LZMA.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.GZIP = ["GZIP",3];
lime_utils_CompressionAlgorithm.GZIP.toString = $estr;
lime_utils_CompressionAlgorithm.GZIP.__enum__ = lime_utils_CompressionAlgorithm;
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = true;
lime_utils__$Float32Array_Float32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Float32Array_Float32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b.bufferValue);
	if(len == null) return new Float32Array(bytes.b.bufferValue,byteOffset);
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_IDataInput = function() { };
$hxClasses["lime.utils.IDataInput"] = lime_utils_IDataInput;
lime_utils_IDataInput.__name__ = true;
lime_utils_IDataInput.prototype = {
	__class__: lime_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var lime_utils_IMemoryRange = function() { };
$hxClasses["lime.utils.IMemoryRange"] = lime_utils_IMemoryRange;
lime_utils_IMemoryRange.__name__ = true;
lime_utils_IMemoryRange.prototype = {
	__class__: lime_utils_IMemoryRange
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = true;
lime_utils__$Int16Array_Int16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int16Array_Int16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int16Array(bytes.b.bufferValue);
	if(len == null) return new Int16Array(bytes.b.bufferValue,byteOffset);
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = true;
lime_utils__$Int32Array_Int32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int32Array_Int32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b.bufferValue);
	if(len == null) return new Int32Array(bytes.b.bufferValue,byteOffset);
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_LZMA = function() { };
$hxClasses["lime.utils.LZMA"] = lime_utils_LZMA;
lime_utils_LZMA.__name__ = true;
lime_utils_LZMA.decode = function(bytes) {
	return null;
};
lime_utils_LZMA.encode = function(bytes) {
	return null;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = true;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
	if(len == null) return new Uint32Array(bytes.b.bufferValue,byteOffset);
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = true;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
	if(len == null) return new Uint8Array(bytes.b.bufferValue,byteOffset);
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = true;
$hxClasses.Array = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = $global.DataView || js_html_compat_DataView;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1;
this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	var val = Math.ceil(i * 257.00392156862745);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
}
var this2;
this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
com_babylonhx_Engine.ALPHA_DISABLE = 0;
com_babylonhx_Engine.ALPHA_ADD = 1;
com_babylonhx_Engine.ALPHA_COMBINE = 2;
com_babylonhx_Engine.ALPHA_SUBTRACT = 3;
com_babylonhx_Engine.ALPHA_MULTIPLY = 4;
com_babylonhx_Engine.ALPHA_MAXIMIZED = 5;
com_babylonhx_Engine.ALPHA_ONEONE = 6;
com_babylonhx_Engine.DELAYLOADSTATE_NONE = 0;
com_babylonhx_Engine.DELAYLOADSTATE_LOADED = 1;
com_babylonhx_Engine.DELAYLOADSTATE_LOADING = 2;
com_babylonhx_Engine.DELAYLOADSTATE_NOTLOADED = 4;
com_babylonhx_Engine.TEXTUREFORMAT_ALPHA = 0;
com_babylonhx_Engine.TEXTUREFORMAT_LUMINANCE = 1;
com_babylonhx_Engine.TEXTUREFORMAT_LUMINANCE_ALPHA = 2;
com_babylonhx_Engine.TEXTUREFORMAT_RGB = 3;
com_babylonhx_Engine.TEXTUREFORMAT_RGBA = 4;
com_babylonhx_Engine.TEXTURETYPE_UNSIGNED_INT = 0;
com_babylonhx_Engine.TEXTURETYPE_FLOAT = 1;
com_babylonhx_Engine.Version = "2.0.0";
com_babylonhx_Engine.Epsilon = 0.001;
com_babylonhx_Engine.CollisionsEpsilon = 0.001;
com_babylonhx_Engine.ShadersRepository = "assets/shaders/";
com_babylonhx_Engine.mouseDown = [];
com_babylonhx_Engine.mouseUp = [];
com_babylonhx_Engine.mouseMove = [];
com_babylonhx_Engine.mouseWheel = [];
com_babylonhx_Engine.touchDown = [];
com_babylonhx_Engine.touchUp = [];
com_babylonhx_Engine.touchMove = [];
com_babylonhx_Engine.keyUp = [];
com_babylonhx_Engine.keyDown = [];
com_babylonhx_Scene.FOGMODE_NONE = 0;
com_babylonhx_Scene.FOGMODE_EXP = 1;
com_babylonhx_Scene.FOGMODE_EXP2 = 2;
com_babylonhx_Scene.FOGMODE_LINEAR = 3;
com_babylonhx_Scene.MinDeltaTime = 1.0;
com_babylonhx_Scene.MaxDeltaTime = 1000.0;
com_babylonhx_Scene._activeMeshes_ = [];
com_babylonhx_actions_ActionManager.NothingTrigger = 0;
com_babylonhx_actions_ActionManager.OnPickTrigger = 1;
com_babylonhx_actions_ActionManager.OnLeftPickTrigger = 2;
com_babylonhx_actions_ActionManager.OnRightPickTrigger = 3;
com_babylonhx_actions_ActionManager.OnCenterPickTrigger = 4;
com_babylonhx_actions_ActionManager.OnPointerOverTrigger = 5;
com_babylonhx_actions_ActionManager.OnPointerOutTrigger = 6;
com_babylonhx_actions_ActionManager.OnEveryFrameTrigger = 7;
com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger = 8;
com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger = 9;
com_babylonhx_actions_ActionManager.OnKeyDownTrigger = 10;
com_babylonhx_actions_ActionManager.OnKeyUpTrigger = 11;
com_babylonhx_actions_ActionManager.OnPickUpTrigger = 12;
com_babylonhx_animations_Animation.ANIMATIONTYPE_FLOAT = 0;
com_babylonhx_animations_Animation.ANIMATIONTYPE_VECTOR3 = 1;
com_babylonhx_animations_Animation.ANIMATIONTYPE_QUATERNION = 2;
com_babylonhx_animations_Animation.ANIMATIONTYPE_MATRIX = 3;
com_babylonhx_animations_Animation.ANIMATIONTYPE_COLOR3 = 4;
com_babylonhx_animations_Animation.ANIMATIONTYPE_VECTOR2 = 5;
com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_RELATIVE = 0;
com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CYCLE = 1;
com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CONSTANT = 2;
com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation = new com_babylonhx_math_Quaternion();
com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation = new com_babylonhx_math_Quaternion();
com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEIN = 0;
com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEOUT = 1;
com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEINOUT = 2;
com_babylonhx_cameras_Camera.PERSPECTIVE_CAMERA = 0;
com_babylonhx_cameras_Camera.ORTHOGRAPHIC_CAMERA = 1;
com_babylonhx_cameras_Camera.FOVMODE_VERTICAL_FIXED = 0;
com_babylonhx_cameras_Camera.FOVMODE_HORIZONTAL_FIXED = 1;
com_babylonhx_cameras_Camera.RIG_MODE_NONE = 0;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH = 10;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = 11;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = 12;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER = 13;
com_babylonhx_cameras_Camera.RIG_MODE_VR = 20;
com_babylonhx_cameras_TargetCamera.zUpVector = new com_babylonhx_math_Vector3(0,1.0,0);
com_babylonhx_cameras_TargetCamera.vDir = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_culling_BoundingBox.IntersectsSphere_vector = new com_babylonhx_math_Vector3();
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE = 0;
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP = 1;
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_POISSONSAMPLING = 2;
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP = 3;
com_babylonhx_materials_Material.TriangleFillMode = 0;
com_babylonhx_materials_Material.WireFrameFillMode = 1;
com_babylonhx_materials_Material.PointFillMode = 2;
com_babylonhx_materials_Material.ClockWiseSideOrientation = 0;
com_babylonhx_materials_Material.CounterClockWiseSideOrientation = 1;
com_babylonhx_materials_Material.maxSimultaneousLights = 4;
com_babylonhx_materials_ShadersStore.Shaders = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["anaglyph.fragment"] != null) _g.setReserved("anaglyph.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D leftSampler;\r\n\r\nvoid main(void)\r\n{\r\n    vec4 leftFrag = texture2D(leftSampler, vUV);\r\n    leftFrag = vec4(1.0, leftFrag.g, leftFrag.b, 1.0);\r\n\r\n\tvec4 rightFrag = texture2D(textureSampler, vUV);\r\n    rightFrag = vec4(rightFrag.r, 1.0, 1.0, 1.0);\r\n\r\n    gl_FragColor = vec4(rightFrag.rgb * leftFrag.rgb, 1.0);\r\n}"); else _g.h["anaglyph.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D leftSampler;\r\n\r\nvoid main(void)\r\n{\r\n    vec4 leftFrag = texture2D(leftSampler, vUV);\r\n    leftFrag = vec4(1.0, leftFrag.g, leftFrag.b, 1.0);\r\n\r\n\tvec4 rightFrag = texture2D(textureSampler, vUV);\r\n    rightFrag = vec4(rightFrag.r, 1.0, 1.0, 1.0);\r\n\r\n    gl_FragColor = vec4(rightFrag.rgb * leftFrag.rgb, 1.0);\r\n}";
	if(__map_reserved["blackAndWhite.fragment"] != null) _g.setReserved("blackAndWhite.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tfloat luminance = dot(texture2D(textureSampler, vUV).rgb, vec3(0.3, 0.59, 0.11));\r\n\tgl_FragColor = vec4(luminance, luminance, luminance, 1.0);\r\n}"); else _g.h["blackAndWhite.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tfloat luminance = dot(texture2D(textureSampler, vUV).rgb, vec3(0.3, 0.59, 0.11));\r\n\tgl_FragColor = vec4(luminance, luminance, luminance, 1.0);\r\n}";
	if(__map_reserved["blur.fragment"] != null) _g.setReserved("blur.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\nuniform vec2 direction;\r\nuniform float blurWidth;\r\n\r\nvoid main(void)\r\n{\r\n\tfloat weights[7];\r\n\tweights[0] = 0.05;\r\n\tweights[1] = 0.1;\r\n\tweights[2] = 0.2;\r\n\tweights[3] = 0.3;\r\n\tweights[4] = 0.2;\r\n\tweights[5] = 0.1;\r\n\tweights[6] = 0.05;\r\n\r\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\r\n\tvec2 texelStep = texelSize * direction * blurWidth;\r\n\tvec2 start = vUV - 3.0 * texelStep;\r\n\r\n\tvec4 baseColor = vec4(0., 0., 0., 0.);\r\n\tvec2 texelOffset = vec2(0., 0.);\r\n\r\n\tfor (int i = 0; i < 7; i++)\r\n\t{\r\n\t\tbaseColor += texture2D(textureSampler, start + texelOffset) * weights[i];\r\n\t\ttexelOffset += texelStep;\r\n\t}\r\n\r\n\tgl_FragColor = baseColor;\r\n}"); else _g.h["blur.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\nuniform vec2 direction;\r\nuniform float blurWidth;\r\n\r\nvoid main(void)\r\n{\r\n\tfloat weights[7];\r\n\tweights[0] = 0.05;\r\n\tweights[1] = 0.1;\r\n\tweights[2] = 0.2;\r\n\tweights[3] = 0.3;\r\n\tweights[4] = 0.2;\r\n\tweights[5] = 0.1;\r\n\tweights[6] = 0.05;\r\n\r\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\r\n\tvec2 texelStep = texelSize * direction * blurWidth;\r\n\tvec2 start = vUV - 3.0 * texelStep;\r\n\r\n\tvec4 baseColor = vec4(0., 0., 0., 0.);\r\n\tvec2 texelOffset = vec2(0., 0.);\r\n\r\n\tfor (int i = 0; i < 7; i++)\r\n\t{\r\n\t\tbaseColor += texture2D(textureSampler, start + texelOffset) * weights[i];\r\n\t\ttexelOffset += texelStep;\r\n\t}\r\n\r\n\tgl_FragColor = baseColor;\r\n}";
	if(__map_reserved["bricktexture.fragment"] != null) _g.setReserved("bricktexture.fragment","precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfBricksHeight;\r\nuniform float numberOfBricksWidth;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tfloat brickW = 1.0 / numberOfBricksWidth;\r\n\tfloat brickH = 1.0 / numberOfBricksHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.05;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) /  brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat brickColorSwitch = mod(floor(yi) + floor(xi), 3.0);\r\n\r\n\t\tif (brickColorSwitch == 0.0)\r\n\t\t\tcolor = mix(color, vec3(0.33, 0.33, 0.33), 0.3);\r\n\t\telse if (brickColorSwitch == 2.0)\r\n\t\t\tcolor = mix(color, vec3(0.11, 0.11, 0.11), 0.3);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}"); else _g.h["bricktexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfBricksHeight;\r\nuniform float numberOfBricksWidth;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tfloat brickW = 1.0 / numberOfBricksWidth;\r\n\tfloat brickH = 1.0 / numberOfBricksHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.05;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) /  brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat brickColorSwitch = mod(floor(yi) + floor(xi), 3.0);\r\n\r\n\t\tif (brickColorSwitch == 0.0)\r\n\t\t\tcolor = mix(color, vec3(0.33, 0.33, 0.33), 0.3);\r\n\t\telse if (brickColorSwitch == 2.0)\r\n\t\t\tcolor = mix(color, vec3(0.11, 0.11, 0.11), 0.3);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}";
	if(__map_reserved["chromaticAberration.fragment"] != null) _g.setReserved("chromaticAberration.fragment","// BABYLON.JS Chromatic Aberration GLSL Shader\r\n// Author: Olivier Guyot\r\n// Separates very slightly R, G and B colors on the edges of the screen\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\nprecision highp float;\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float chromatic_aberration;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 centered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tfloat radius2 = centered_screen_pos.x*centered_screen_pos.x\r\n\t\t+ centered_screen_pos.y*centered_screen_pos.y;\r\n\tfloat radius = sqrt(radius2);\r\n\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\tif (chromatic_aberration > 0.0) {\r\n\t\t//index of refraction of each color channel, causing chromatic dispersion\r\n\t\tvec3 ref_indices = vec3(-0.3, 0.0, 0.3);\r\n\t\tfloat ref_shiftX = chromatic_aberration * radius * 17.0 / screen_width;\r\n\t\tfloat ref_shiftY = chromatic_aberration * radius * 17.0 / screen_height;\r\n\r\n\t\t// shifts for red, green & blue\r\n\t\tvec2 ref_coords_r = vec2(vUV.x + ref_indices.r*ref_shiftX, vUV.y + ref_indices.r*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_g = vec2(vUV.x + ref_indices.g*ref_shiftX, vUV.y + ref_indices.g*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_b = vec2(vUV.x + ref_indices.b*ref_shiftX, vUV.y + ref_indices.b*ref_shiftY*0.5);\r\n\r\n\t\toriginal.r = texture2D(textureSampler, ref_coords_r).r;\r\n\t\toriginal.g = texture2D(textureSampler, ref_coords_g).g;\r\n\t\toriginal.b = texture2D(textureSampler, ref_coords_b).b;\r\n\t}\r\n\r\n\tgl_FragColor = original;\r\n}"); else _g.h["chromaticAberration.fragment"] = "// BABYLON.JS Chromatic Aberration GLSL Shader\r\n// Author: Olivier Guyot\r\n// Separates very slightly R, G and B colors on the edges of the screen\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\nprecision highp float;\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float chromatic_aberration;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 centered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tfloat radius2 = centered_screen_pos.x*centered_screen_pos.x\r\n\t\t+ centered_screen_pos.y*centered_screen_pos.y;\r\n\tfloat radius = sqrt(radius2);\r\n\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\tif (chromatic_aberration > 0.0) {\r\n\t\t//index of refraction of each color channel, causing chromatic dispersion\r\n\t\tvec3 ref_indices = vec3(-0.3, 0.0, 0.3);\r\n\t\tfloat ref_shiftX = chromatic_aberration * radius * 17.0 / screen_width;\r\n\t\tfloat ref_shiftY = chromatic_aberration * radius * 17.0 / screen_height;\r\n\r\n\t\t// shifts for red, green & blue\r\n\t\tvec2 ref_coords_r = vec2(vUV.x + ref_indices.r*ref_shiftX, vUV.y + ref_indices.r*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_g = vec2(vUV.x + ref_indices.g*ref_shiftX, vUV.y + ref_indices.g*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_b = vec2(vUV.x + ref_indices.b*ref_shiftX, vUV.y + ref_indices.b*ref_shiftY*0.5);\r\n\r\n\t\toriginal.r = texture2D(textureSampler, ref_coords_r).r;\r\n\t\toriginal.g = texture2D(textureSampler, ref_coords_g).g;\r\n\t\toriginal.b = texture2D(textureSampler, ref_coords_b).b;\r\n\t}\r\n\r\n\tgl_FragColor = original;\r\n}";
	if(__map_reserved["cloudtexture.fragment"] != null) _g.setReserved("cloudtexture.fragment","precision highp float;\r\n\r\nvarying vec2 vUV;\r\n\r\nuniform vec4 skyColor;\r\nuniform vec4 cloudColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\r\n\tvec2 p = vUV * 12.0;\r\n\tvec4 c = mix(skyColor, cloudColor, fbm(p));\r\n\tgl_FragColor = c;\r\n\r\n}\r\n\r\n"); else _g.h["cloudtexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vUV;\r\n\r\nuniform vec4 skyColor;\r\nuniform vec4 cloudColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\r\n\tvec2 p = vUV * 12.0;\r\n\tvec4 c = mix(skyColor, cloudColor, fbm(p));\r\n\tgl_FragColor = c;\r\n\r\n}\r\n\r\n";
	if(__map_reserved["color.fragment"] != null) _g.setReserved("color.fragment","precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = color;\r\n}"); else _g.h["color.fragment"] = "precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["color.vertex"] != null) _g.setReserved("color.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n\r\n// Uniforms\r\nuniform mat4 worldViewProjection;\r\n\r\nvoid main(void) {\r\n\tgl_Position = worldViewProjection * vec4(position, 1.0);\r\n}"); else _g.h["color.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n\r\n// Uniforms\r\nuniform mat4 worldViewProjection;\r\n\r\nvoid main(void) {\r\n\tgl_Position = worldViewProjection * vec4(position, 1.0);\r\n}";
	if(__map_reserved["colorCorrection.fragment"] != null) _g.setReserved("colorCorrection.fragment","precision highp float;\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// screen render\r\nuniform sampler2D colorTable;\t\t// color table with modified colors\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\nconst float SLICE_COUNT = 16.0;\t\t// how many slices in the color cube; 1 slice = 1 pixel\r\n// it means the image is 256x16 pixels\r\n\r\nvec4 sampleAs3DTexture(sampler2D texture, vec3 uv, float width) {\r\n\tfloat sliceSize = 1.0 / width;              // space of 1 slice\r\n\tfloat slicePixelSize = sliceSize / width;           // space of 1 pixel\r\n\tfloat sliceInnerSize = slicePixelSize * (width - 1.0);  // space of width pixels\r\n\tfloat zSlice0 = min(floor(uv.z * width), width - 1.0);\r\n\tfloat zSlice1 = min(zSlice0 + 1.0, width - 1.0);\r\n\tfloat xOffset = slicePixelSize * 0.5 + uv.x * sliceInnerSize;\r\n\tfloat s0 = xOffset + (zSlice0 * sliceSize);\r\n\tfloat s1 = xOffset + (zSlice1 * sliceSize);\r\n\tvec4 slice0Color = texture2D(texture, vec2(s0, uv.y));\r\n\tvec4 slice1Color = texture2D(texture, vec2(s1, uv.y));\r\n\tfloat zOffset = mod(uv.z * width, 1.0);\r\n\tvec4 result = mix(slice0Color, slice1Color, zOffset);\r\n\treturn result;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 screen_color = texture2D(textureSampler, vUV);\r\n\tgl_FragColor = sampleAs3DTexture(colorTable, screen_color.rgb, SLICE_COUNT);\r\n\r\n}"); else _g.h["colorCorrection.fragment"] = "precision highp float;\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// screen render\r\nuniform sampler2D colorTable;\t\t// color table with modified colors\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\nconst float SLICE_COUNT = 16.0;\t\t// how many slices in the color cube; 1 slice = 1 pixel\r\n// it means the image is 256x16 pixels\r\n\r\nvec4 sampleAs3DTexture(sampler2D texture, vec3 uv, float width) {\r\n\tfloat sliceSize = 1.0 / width;              // space of 1 slice\r\n\tfloat slicePixelSize = sliceSize / width;           // space of 1 pixel\r\n\tfloat sliceInnerSize = slicePixelSize * (width - 1.0);  // space of width pixels\r\n\tfloat zSlice0 = min(floor(uv.z * width), width - 1.0);\r\n\tfloat zSlice1 = min(zSlice0 + 1.0, width - 1.0);\r\n\tfloat xOffset = slicePixelSize * 0.5 + uv.x * sliceInnerSize;\r\n\tfloat s0 = xOffset + (zSlice0 * sliceSize);\r\n\tfloat s1 = xOffset + (zSlice1 * sliceSize);\r\n\tvec4 slice0Color = texture2D(texture, vec2(s0, uv.y));\r\n\tvec4 slice1Color = texture2D(texture, vec2(s1, uv.y));\r\n\tfloat zOffset = mod(uv.z * width, 1.0);\r\n\tvec4 result = mix(slice0Color, slice1Color, zOffset);\r\n\treturn result;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 screen_color = texture2D(textureSampler, vUV);\r\n\tgl_FragColor = sampleAs3DTexture(colorTable, screen_color.rgb, SLICE_COUNT);\r\n\r\n}";
	if(__map_reserved["convolution.fragment"] != null) _g.setReserved("convolution.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform vec2 screenSize;\r\nuniform float kernel[9];\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 onePixel = vec2(1.0, 1.0) / screenSize;\r\n\tvec4 colorSum =\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, -1)) * kernel[0] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, -1)) * kernel[1] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, -1)) * kernel[2] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 0)) * kernel[3] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 0)) * kernel[4] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 0)) * kernel[5] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 1)) * kernel[6] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 1)) * kernel[7] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 1)) * kernel[8];\r\n\r\n\tfloat kernelWeight =\r\n\t\tkernel[0] +\r\n\t\tkernel[1] +\r\n\t\tkernel[2] +\r\n\t\tkernel[3] +\r\n\t\tkernel[4] +\r\n\t\tkernel[5] +\r\n\t\tkernel[6] +\r\n\t\tkernel[7] +\r\n\t\tkernel[8];\r\n\r\n\tif (kernelWeight <= 0.0) {\r\n\t\tkernelWeight = 1.0;\r\n\t}\r\n\r\n\tgl_FragColor = vec4((colorSum / kernelWeight).rgb, 1);\r\n}"); else _g.h["convolution.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform vec2 screenSize;\r\nuniform float kernel[9];\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 onePixel = vec2(1.0, 1.0) / screenSize;\r\n\tvec4 colorSum =\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, -1)) * kernel[0] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, -1)) * kernel[1] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, -1)) * kernel[2] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 0)) * kernel[3] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 0)) * kernel[4] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 0)) * kernel[5] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 1)) * kernel[6] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 1)) * kernel[7] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 1)) * kernel[8];\r\n\r\n\tfloat kernelWeight =\r\n\t\tkernel[0] +\r\n\t\tkernel[1] +\r\n\t\tkernel[2] +\r\n\t\tkernel[3] +\r\n\t\tkernel[4] +\r\n\t\tkernel[5] +\r\n\t\tkernel[6] +\r\n\t\tkernel[7] +\r\n\t\tkernel[8];\r\n\r\n\tif (kernelWeight <= 0.0) {\r\n\t\tkernelWeight = 1.0;\r\n\t}\r\n\r\n\tgl_FragColor = vec4((colorSum / kernelWeight).rgb, 1);\r\n}";
	if(__map_reserved["default.fragment"] != null) _g.setReserved("default.fragment","#ifdef BUMP\r\n#extension GL_OES_standard_derivatives : enable\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\n#extension GL_EXT_frag_depth : enable\r\n#endif\r\n\r\nprecision highp float;\r\n\r\n// Constants\r\n#define RECIPROCAL_PI2 0.15915494\r\n\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#else\r\nuniform samplerCube shadowSampler0;\r\n#endif\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#else\r\nuniform samplerCube shadowSampler1;\r\n#endif\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#else\r\nuniform samplerCube shadowSampler2;\r\n#endif\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#else\r\nuniform samplerCube shadowSampler3;\r\n#endif\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\nvarying vec2 vLightmapUV;\r\nuniform vec2 vLightmapInfos;\r\nuniform sampler2D lightmapSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Reflection\r\n#ifdef REFLECTION\r\nuniform vec2 vReflectionInfos;\r\n\r\n#ifdef REFLECTIONMAP_3D\r\nuniform samplerCube reflectionCubeSampler;\r\n#else\r\nuniform sampler2D reflection2DSampler;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\nvarying vec3 vPositionUVW;\r\n#else\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\nvarying vec3 vDirectionW;\r\n#endif\r\n\r\n#if defined(REFLECTIONMAP_PLANAR) || defined(REFLECTIONMAP_CUBIC) || defined(REFLECTIONMAP_PROJECTION)\r\nuniform mat4 reflectionMatrix;\r\n#endif\r\n#if defined(REFLECTIONMAP_SPHERICAL) || defined(REFLECTIONMAP_PROJECTION)\r\nuniform mat4 view;\r\n#endif\r\n#endif\r\n\r\nvec3 computeReflectionCoords(vec4 worldPos, vec3 worldNormal)\r\n{\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\n\tvec3 direction = normalize(vDirectionW);\r\n\r\n\tfloat t = clamp(direction.y * -0.5 + 0.5, 0., 1.0);\r\n\tfloat s = atan(direction.z, direction.x) * RECIPROCAL_PI2 + 0.5;\r\n\r\n\treturn vec3(s, t, 0);\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SPHERICAL\r\n\tvec3 viewDir = normalize(vec3(view * worldPos));\r\n\tvec3 viewNormal = normalize(vec3(view * vec4(worldNormal, 0.0)));\r\n\r\n\tvec3 r = reflect(viewDir, viewNormal);\r\n\tr.z = r.z - 1.0;\r\n\r\n\tfloat m = 2.0 * length(r);\r\n\r\n\treturn vec3(r.x / m + 0.5, 1.0 - r.y / m - 0.5, 0);\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PLANAR\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_CUBIC\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = reflect(viewDir, worldNormal);\r\n#ifdef INVERTCUBICMAP\r\n\tcoords.y = 1.0 - coords.y;\r\n#endif\r\n\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\treturn vec3(reflectionMatrix * (view * worldPos));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\treturn vPositionUVW;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EXPLICIT\r\n\treturn vec3(0, 0, 0);\r\n#endif\r\n}\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(color, bit_shift);\r\n}\r\n\r\n#if defined(POINTLIGHT0) || defined(POINTLIGHT1) || defined(POINTLIGHT2) || defined(POINTLIGHT3)\r\nfloat computeShadowCube(vec3 lightPosition, samplerCube shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat shadow = unpack(textureCube(shadowSampler, directionToLight)) + bias;\r\n\r\n\tif (depth > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.0;\r\n}\r\n\r\nfloat computeShadowWithPCFCube(vec3 lightPosition, samplerCube shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\tfloat diskScale = (1.0 - (1.0 + depth * 3.0)) / mapSize;\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec3 poissonDisk[4];\r\n\tpoissonDisk[0] = vec3(-1.0, 1.0, -1.0);\r\n\tpoissonDisk[1] = vec3(1.0, -1.0, -1.0);\r\n\tpoissonDisk[2] = vec3(-1.0, -1.0, -1.0);\r\n\tpoissonDisk[3] = vec3(1.0, -1.0, 1.0);\r\n\r\n\t// Poisson Sampling\r\n\tfloat biasedDepth = depth - bias;\r\n\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[0] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[1] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[2] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[3] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\r\n\treturn  min(1.0, visibility + darkness);\r\n}\r\n#endif\r\n\r\n#if defined(SPOTLIGHT0) || defined(SPOTLIGHT1) || defined(SPOTLIGHT2) || defined(SPOTLIGHT3) ||  defined(DIRLIGHT0) || defined(DIRLIGHT1) || defined(DIRLIGHT2) || defined(DIRLIGHT3)\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\nfloat computeShadowWithPCF(vec4 vPositionFromLight, sampler2D shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec2 poissonDisk[4];\r\n\tpoissonDisk[0] = vec2(-0.94201624, -0.39906216);\r\n\tpoissonDisk[1] = vec2(0.94558609, -0.76890725);\r\n\tpoissonDisk[2] = vec2(-0.094184101, -0.92938870);\r\n\tpoissonDisk[3] = vec2(0.34495938, 0.29387760);\r\n\r\n\t// Poisson Sampling\r\n\tfloat biasedDepth = depth.z - bias;\r\n\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[0] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[1] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[2] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[3] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\r\n\treturn  min(1.0, visibility + darkness);\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n\tfloat p = smoothstep(compare - bias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x * moments.x, 0.02);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn min(1.0, 1.0 - ChebychevInequality(moments, depth.z, bias) + darkness);\r\n}\r\n#endif\r\n#endif\r\n\r\n// Bump\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform sampler2D bumpSampler;\r\n\r\n// Thanks to http://www.thetenthplanet.de/archives/1180\r\nmat3 cotangent_frame(vec3 normal, vec3 p, vec2 uv)\r\n{\r\n\t// get edge vectors of the pixel triangle\r\n\tvec3 dp1 = dFdx(p);\r\n\tvec3 dp2 = dFdy(p);\r\n\tvec2 duv1 = dFdx(uv);\r\n\tvec2 duv2 = dFdy(uv);\r\n\r\n\t// solve the linear system\r\n\tvec3 dp2perp = cross(dp2, normal);\r\n\tvec3 dp1perp = cross(normal, dp1);\r\n\tvec3 tangent = dp2perp * duv1.x + dp1perp * duv2.x;\r\n\tvec3 binormal = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\r\n\t// construct a scale-invariant frame \r\n\tfloat invmax = inversesqrt(max(dot(tangent, tangent), dot(binormal, binormal)));\r\n\treturn mat3(tangent * invmax, binormal * invmax, normal);\r\n}\r\n\r\nvec3 perturbNormal(vec3 viewDir)\r\n{\r\n\tvec3 map = texture2D(bumpSampler, vBumpUV).xyz;\r\n\tmap = map * 255. / 127. - 128. / 127.;\r\n\tmat3 TBN = cotangent_frame(vNormalW * vBumpInfos.y, -viewDir, vBumpUV);\r\n\treturn normalize(TBN * map);\r\n}\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\nuniform float logarithmicDepthConstant;\r\nvarying float vFragmentDepth;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nstruct lightingInfo\r\n{\r\n\tvec3 diffuse;\r\n#ifdef SPECULARTERM\r\n\tvec3 specular;\r\n#endif\r\n};\r\n\r\nlightingInfo computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, float range, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 lightVectorW;\r\n\tfloat attenuation = 1.0;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tvec3 direction = lightData.xyz - vPositionW;\r\n\r\n\t\tattenuation = max(0., 1.0 - length(direction) / range);\r\n\t\tlightVectorW = normalize(direction);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\tresult.diffuse = ndl * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\tresult.specular = specComp * specularColor * attenuation;\r\n#endif\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec3 diffuseColor, vec3 specularColor, float range, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 direction = lightData.xyz - vPositionW;\r\n\tvec3 lightVectorW = normalize(direction);\r\n\tfloat attenuation = max(0., 1.0 - length(direction) / range);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = clamp((cosAngle - lightDirection.w) / (1. - cosAngle), 0.0, 1.0);\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult.diffuse = ndl * spotAtten * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\t\tresult.specular = specComp * specularColor * spotAtten * attenuation;\r\n#endif\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult.diffuse = vec3(0.);\r\n#ifdef SPECULARTERM\r\n\tresult.specular = vec3(0.);\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, vec3 groundColor, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult.diffuse = mix(groundColor, diffuseColor, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\tresult.specular = specComp * specularColor;\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef ALPHAFROMDIFFUSE\r\n\talpha *= baseColor.a;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n#ifdef NORMAL\r\n\tvec3 normalW = normalize(vNormalW);\r\n#else\r\n\tvec3 normalW = vec3(1.0, 1.0, 1.0);\r\n#endif\r\n\r\n\r\n#ifdef BUMP\r\n\tnormalW = perturbNormal(viewDirectionW);\r\n#endif\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tfloat glossiness = vSpecularColor.a;\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n\r\n#ifdef SPECULAR\r\n\tvec4 specularMapColor = texture2D(specularSampler, vSpecularUV);\r\n\tspecularColor = specularMapColor.rgb;\r\n#ifdef GLOSSINESS\r\n\tglossiness = glossiness * specularMapColor.a;\r\n#endif\r\n#endif\r\n#else\r\n\tfloat glossiness = 0.;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tlightingInfo info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tlightingInfo info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightGround0, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT0) || defined(DIRLIGHT0)\r\n\tlightingInfo info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n#ifdef SHADOWPCF0\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowWithPCFCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight0, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#endif\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightGround1, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT1) || defined(DIRLIGHT1)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n#ifdef SHADOWPCF1\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowWithPCFCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight1, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#endif\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightGround2, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT2) || defined(DIRLIGHT2)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n#ifdef SHADOWPCF2\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowWithPCFCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight2, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#endif\r\n#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightGround3, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT3) || defined(DIRLIGHT3)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n#ifdef SHADOWPCF3\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowWithPCFCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight3, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#endif\r\n#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n\r\n#ifdef REFLECTION\r\n\tvec3 vReflectionUVW = computeReflectionCoords(vec4(vPositionW, 1.0), normalW);\r\n\r\n#ifdef REFLECTIONMAP_3D\r\n#ifdef ROUGHNESS\r\n\t float bias = vReflectionInfos.y;\r\n\r\n\t#ifdef SPECULARTERM\r\n\t#ifdef SPECULAR\r\n\t#ifdef GLOSSINESS\r\n\t\tbias *= (1.0 - specularMapColor.a);\r\n\t#endif\r\n\t#endif\r\n\t#endif\r\n\r\n\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW, bias).rgb * vReflectionInfos.x;\r\n#else\r\n\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#else\r\n\tvec2 coords = vReflectionUVW.xy;\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\tcoords /= vReflectionUVW.z;\r\n#endif\r\n\r\n\tcoords.y = 1.0 - coords.y;\r\n\r\n\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n#ifdef REFLECTIONFRESNELFROMSPECULAR\r\n#ifdef SPECULARTERM\r\n\treflectionColor *= specularColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#else\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#else\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n#endif\r\n\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n#ifdef EMISSIVEASILLUMINATION\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#else\r\n#ifdef LINKEMISSIVEWITHDIFFUSE\r\n\tvec3 finalDiffuse = clamp((diffuseBase + emissiveColor) * diffuseColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#else\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#endif\r\n#endif\r\n\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n#ifdef SPECULAROVERALPHA\r\n\talpha = clamp(alpha + dot(finalSpecular, vec3(0.3, 0.59, 0.11)), 0., 1.);\r\n#endif\r\n\r\n\t// Composition\r\n#ifdef EMISSIVEASILLUMINATION\r\n\tvec4 color = vec4(clamp(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor + emissiveColor, 0.0, 1.0), alpha);\r\n#else\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tvec3 lightmapColor = texture2D(lightmapSampler, vLightmapUV).rgb * vLightmapInfos.y;\r\n\r\n#ifdef USELIGHTMAPASSHADOWMAP\r\n\tcolor.rgb *= lightmapColor;\r\n#else\r\n\tcolor.rgb += lightmapColor;\r\n#endif\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\n\tgl_FragDepthEXT = log2(vFragmentDepth) * logarithmicDepthConstant * 0.5;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["default.fragment"] = "#ifdef BUMP\r\n#extension GL_OES_standard_derivatives : enable\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\n#extension GL_EXT_frag_depth : enable\r\n#endif\r\n\r\nprecision highp float;\r\n\r\n// Constants\r\n#define RECIPROCAL_PI2 0.15915494\r\n\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#else\r\nuniform samplerCube shadowSampler0;\r\n#endif\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#else\r\nuniform samplerCube shadowSampler1;\r\n#endif\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#else\r\nuniform samplerCube shadowSampler2;\r\n#endif\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#else\r\nuniform samplerCube shadowSampler3;\r\n#endif\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\nvarying vec2 vLightmapUV;\r\nuniform vec2 vLightmapInfos;\r\nuniform sampler2D lightmapSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Reflection\r\n#ifdef REFLECTION\r\nuniform vec2 vReflectionInfos;\r\n\r\n#ifdef REFLECTIONMAP_3D\r\nuniform samplerCube reflectionCubeSampler;\r\n#else\r\nuniform sampler2D reflection2DSampler;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\nvarying vec3 vPositionUVW;\r\n#else\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\nvarying vec3 vDirectionW;\r\n#endif\r\n\r\n#if defined(REFLECTIONMAP_PLANAR) || defined(REFLECTIONMAP_CUBIC) || defined(REFLECTIONMAP_PROJECTION)\r\nuniform mat4 reflectionMatrix;\r\n#endif\r\n#if defined(REFLECTIONMAP_SPHERICAL) || defined(REFLECTIONMAP_PROJECTION)\r\nuniform mat4 view;\r\n#endif\r\n#endif\r\n\r\nvec3 computeReflectionCoords(vec4 worldPos, vec3 worldNormal)\r\n{\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\n\tvec3 direction = normalize(vDirectionW);\r\n\r\n\tfloat t = clamp(direction.y * -0.5 + 0.5, 0., 1.0);\r\n\tfloat s = atan(direction.z, direction.x) * RECIPROCAL_PI2 + 0.5;\r\n\r\n\treturn vec3(s, t, 0);\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SPHERICAL\r\n\tvec3 viewDir = normalize(vec3(view * worldPos));\r\n\tvec3 viewNormal = normalize(vec3(view * vec4(worldNormal, 0.0)));\r\n\r\n\tvec3 r = reflect(viewDir, viewNormal);\r\n\tr.z = r.z - 1.0;\r\n\r\n\tfloat m = 2.0 * length(r);\r\n\r\n\treturn vec3(r.x / m + 0.5, 1.0 - r.y / m - 0.5, 0);\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PLANAR\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_CUBIC\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = reflect(viewDir, worldNormal);\r\n#ifdef INVERTCUBICMAP\r\n\tcoords.y = 1.0 - coords.y;\r\n#endif\r\n\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\treturn vec3(reflectionMatrix * (view * worldPos));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\treturn vPositionUVW;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EXPLICIT\r\n\treturn vec3(0, 0, 0);\r\n#endif\r\n}\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(color, bit_shift);\r\n}\r\n\r\n#if defined(POINTLIGHT0) || defined(POINTLIGHT1) || defined(POINTLIGHT2) || defined(POINTLIGHT3)\r\nfloat computeShadowCube(vec3 lightPosition, samplerCube shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat shadow = unpack(textureCube(shadowSampler, directionToLight)) + bias;\r\n\r\n\tif (depth > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.0;\r\n}\r\n\r\nfloat computeShadowWithPCFCube(vec3 lightPosition, samplerCube shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\tfloat diskScale = (1.0 - (1.0 + depth * 3.0)) / mapSize;\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec3 poissonDisk[4];\r\n\tpoissonDisk[0] = vec3(-1.0, 1.0, -1.0);\r\n\tpoissonDisk[1] = vec3(1.0, -1.0, -1.0);\r\n\tpoissonDisk[2] = vec3(-1.0, -1.0, -1.0);\r\n\tpoissonDisk[3] = vec3(1.0, -1.0, 1.0);\r\n\r\n\t// Poisson Sampling\r\n\tfloat biasedDepth = depth - bias;\r\n\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[0] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[1] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[2] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[3] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\r\n\treturn  min(1.0, visibility + darkness);\r\n}\r\n#endif\r\n\r\n#if defined(SPOTLIGHT0) || defined(SPOTLIGHT1) || defined(SPOTLIGHT2) || defined(SPOTLIGHT3) ||  defined(DIRLIGHT0) || defined(DIRLIGHT1) || defined(DIRLIGHT2) || defined(DIRLIGHT3)\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\nfloat computeShadowWithPCF(vec4 vPositionFromLight, sampler2D shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec2 poissonDisk[4];\r\n\tpoissonDisk[0] = vec2(-0.94201624, -0.39906216);\r\n\tpoissonDisk[1] = vec2(0.94558609, -0.76890725);\r\n\tpoissonDisk[2] = vec2(-0.094184101, -0.92938870);\r\n\tpoissonDisk[3] = vec2(0.34495938, 0.29387760);\r\n\r\n\t// Poisson Sampling\r\n\tfloat biasedDepth = depth.z - bias;\r\n\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[0] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[1] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[2] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[3] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\r\n\treturn  min(1.0, visibility + darkness);\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n\tfloat p = smoothstep(compare - bias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x * moments.x, 0.02);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn min(1.0, 1.0 - ChebychevInequality(moments, depth.z, bias) + darkness);\r\n}\r\n#endif\r\n#endif\r\n\r\n// Bump\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform sampler2D bumpSampler;\r\n\r\n// Thanks to http://www.thetenthplanet.de/archives/1180\r\nmat3 cotangent_frame(vec3 normal, vec3 p, vec2 uv)\r\n{\r\n\t// get edge vectors of the pixel triangle\r\n\tvec3 dp1 = dFdx(p);\r\n\tvec3 dp2 = dFdy(p);\r\n\tvec2 duv1 = dFdx(uv);\r\n\tvec2 duv2 = dFdy(uv);\r\n\r\n\t// solve the linear system\r\n\tvec3 dp2perp = cross(dp2, normal);\r\n\tvec3 dp1perp = cross(normal, dp1);\r\n\tvec3 tangent = dp2perp * duv1.x + dp1perp * duv2.x;\r\n\tvec3 binormal = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\r\n\t// construct a scale-invariant frame \r\n\tfloat invmax = inversesqrt(max(dot(tangent, tangent), dot(binormal, binormal)));\r\n\treturn mat3(tangent * invmax, binormal * invmax, normal);\r\n}\r\n\r\nvec3 perturbNormal(vec3 viewDir)\r\n{\r\n\tvec3 map = texture2D(bumpSampler, vBumpUV).xyz;\r\n\tmap = map * 255. / 127. - 128. / 127.;\r\n\tmat3 TBN = cotangent_frame(vNormalW * vBumpInfos.y, -viewDir, vBumpUV);\r\n\treturn normalize(TBN * map);\r\n}\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\nuniform float logarithmicDepthConstant;\r\nvarying float vFragmentDepth;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nstruct lightingInfo\r\n{\r\n\tvec3 diffuse;\r\n#ifdef SPECULARTERM\r\n\tvec3 specular;\r\n#endif\r\n};\r\n\r\nlightingInfo computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, float range, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 lightVectorW;\r\n\tfloat attenuation = 1.0;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tvec3 direction = lightData.xyz - vPositionW;\r\n\r\n\t\tattenuation = max(0., 1.0 - length(direction) / range);\r\n\t\tlightVectorW = normalize(direction);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\tresult.diffuse = ndl * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\tresult.specular = specComp * specularColor * attenuation;\r\n#endif\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec3 diffuseColor, vec3 specularColor, float range, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 direction = lightData.xyz - vPositionW;\r\n\tvec3 lightVectorW = normalize(direction);\r\n\tfloat attenuation = max(0., 1.0 - length(direction) / range);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = clamp((cosAngle - lightDirection.w) / (1. - cosAngle), 0.0, 1.0);\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult.diffuse = ndl * spotAtten * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\t\tresult.specular = specComp * specularColor * spotAtten * attenuation;\r\n#endif\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult.diffuse = vec3(0.);\r\n#ifdef SPECULARTERM\r\n\tresult.specular = vec3(0.);\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, vec3 groundColor, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult.diffuse = mix(groundColor, diffuseColor, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\tresult.specular = specComp * specularColor;\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef ALPHAFROMDIFFUSE\r\n\talpha *= baseColor.a;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n#ifdef NORMAL\r\n\tvec3 normalW = normalize(vNormalW);\r\n#else\r\n\tvec3 normalW = vec3(1.0, 1.0, 1.0);\r\n#endif\r\n\r\n\r\n#ifdef BUMP\r\n\tnormalW = perturbNormal(viewDirectionW);\r\n#endif\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tfloat glossiness = vSpecularColor.a;\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n\r\n#ifdef SPECULAR\r\n\tvec4 specularMapColor = texture2D(specularSampler, vSpecularUV);\r\n\tspecularColor = specularMapColor.rgb;\r\n#ifdef GLOSSINESS\r\n\tglossiness = glossiness * specularMapColor.a;\r\n#endif\r\n#endif\r\n#else\r\n\tfloat glossiness = 0.;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tlightingInfo info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tlightingInfo info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightGround0, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT0) || defined(DIRLIGHT0)\r\n\tlightingInfo info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n#ifdef SHADOWPCF0\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowWithPCFCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight0, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#endif\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightGround1, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT1) || defined(DIRLIGHT1)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n#ifdef SHADOWPCF1\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowWithPCFCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight1, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#endif\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightGround2, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT2) || defined(DIRLIGHT2)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n#ifdef SHADOWPCF2\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowWithPCFCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight2, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#endif\r\n#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightGround3, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT3) || defined(DIRLIGHT3)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n#ifdef SHADOWPCF3\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowWithPCFCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight3, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#endif\r\n#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n\r\n#ifdef REFLECTION\r\n\tvec3 vReflectionUVW = computeReflectionCoords(vec4(vPositionW, 1.0), normalW);\r\n\r\n#ifdef REFLECTIONMAP_3D\r\n#ifdef ROUGHNESS\r\n\t float bias = vReflectionInfos.y;\r\n\r\n\t#ifdef SPECULARTERM\r\n\t#ifdef SPECULAR\r\n\t#ifdef GLOSSINESS\r\n\t\tbias *= (1.0 - specularMapColor.a);\r\n\t#endif\r\n\t#endif\r\n\t#endif\r\n\r\n\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW, bias).rgb * vReflectionInfos.x;\r\n#else\r\n\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#else\r\n\tvec2 coords = vReflectionUVW.xy;\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\tcoords /= vReflectionUVW.z;\r\n#endif\r\n\r\n\tcoords.y = 1.0 - coords.y;\r\n\r\n\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n#ifdef REFLECTIONFRESNELFROMSPECULAR\r\n#ifdef SPECULARTERM\r\n\treflectionColor *= specularColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#else\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#else\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n#endif\r\n\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n#ifdef EMISSIVEASILLUMINATION\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#else\r\n#ifdef LINKEMISSIVEWITHDIFFUSE\r\n\tvec3 finalDiffuse = clamp((diffuseBase + emissiveColor) * diffuseColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#else\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#endif\r\n#endif\r\n\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n#ifdef SPECULAROVERALPHA\r\n\talpha = clamp(alpha + dot(finalSpecular, vec3(0.3, 0.59, 0.11)), 0., 1.);\r\n#endif\r\n\r\n\t// Composition\r\n#ifdef EMISSIVEASILLUMINATION\r\n\tvec4 color = vec4(clamp(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor + emissiveColor, 0.0, 1.0), alpha);\r\n#else\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tvec3 lightmapColor = texture2D(lightmapSampler, vLightmapUV).rgb * vLightmapInfos.y;\r\n\r\n#ifdef USELIGHTMAPASSHADOWMAP\r\n\tcolor.rgb *= lightmapColor;\r\n#else\r\n\tcolor.rgb += lightmapColor;\r\n#endif\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\n\tgl_FragDepthEXT = log2(vFragmentDepth) * logarithmicDepthConstant * 0.5;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["default.vertex"] != null) _g.setReserved("default.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\nvarying vec2 vLightmapUV;\r\nuniform vec2 vLightmapInfos;\r\nuniform mat4 lightmapMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\nvarying vec3 vPositionUVW;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\nvarying vec3 vDirectionW;\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\nuniform float logarithmicDepthConstant;\r\nvarying float vFragmentDepth;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\tvPositionUVW = position;\r\n#endif \r\n\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif \r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\n\tvDirectionW = normalize(vec3(finalWorld * vec4(position, 0.0)));\r\n#endif\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tif (vLightmapInfos.x == 0.)\r\n\t{\r\n\t\tvLightmapUV = vec2(lightmapMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvLightmapUV = vec2(lightmapMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n\r\n\t// Point size\r\n#ifdef POINTSIZE\r\n\tgl_PointSize = pointSize;\r\n#endif\r\n\r\n\t// Log. depth\r\n#ifdef LOGARITHMICDEPTH\r\n\tvFragmentDepth = 1.0 + gl_Position.w;\r\n\tgl_Position.z = log2(max(0.000001, vFragmentDepth)) * logarithmicDepthConstant;\r\n#endif\r\n}"); else _g.h["default.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\nvarying vec2 vLightmapUV;\r\nuniform vec2 vLightmapInfos;\r\nuniform mat4 lightmapMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\nvarying vec3 vPositionUVW;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\nvarying vec3 vDirectionW;\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\nuniform float logarithmicDepthConstant;\r\nvarying float vFragmentDepth;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\tvPositionUVW = position;\r\n#endif \r\n\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif \r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\n\tvDirectionW = normalize(vec3(finalWorld * vec4(position, 0.0)));\r\n#endif\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tif (vLightmapInfos.x == 0.)\r\n\t{\r\n\t\tvLightmapUV = vec2(lightmapMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvLightmapUV = vec2(lightmapMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n\r\n\t// Point size\r\n#ifdef POINTSIZE\r\n\tgl_PointSize = pointSize;\r\n#endif\r\n\r\n\t// Log. depth\r\n#ifdef LOGARITHMICDEPTH\r\n\tvFragmentDepth = 1.0 + gl_Position.w;\r\n\tgl_Position.z = log2(max(0.000001, vFragmentDepth)) * logarithmicDepthConstant;\r\n#endif\r\n}";
	if(__map_reserved["depth.fragment"] != null) _g.setReserved("depth.fragment","precision highp float;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nuniform float far;\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tfloat depth = (gl_FragCoord.z / gl_FragCoord.w) / far;\r\n\tgl_FragColor = vec4(depth, depth * depth, 0.0, 1.0);\r\n}"); else _g.h["depth.fragment"] = "precision highp float;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nuniform float far;\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tfloat depth = (gl_FragCoord.z / gl_FragCoord.w) / far;\r\n\tgl_FragColor = vec4(depth, depth * depth, 0.0, 1.0);\r\n}";
	if(__map_reserved["depth.vertex"] != null) _g.setReserved("depth.vertex","precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\t\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}"); else _g.h["depth.vertex"] = "precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\t\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}";
	if(__map_reserved["depthBoxBlur.fragment"] != null) _g.setReserved("depthBoxBlur.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 colorDepth = vec4(0.0);\r\n\r\n\tfor (int x = -OFFSET; x <= OFFSET; x++)\r\n\t\tfor (int y = -OFFSET; y <= OFFSET; y++)\r\n\t\t\tcolorDepth += texture2D(textureSampler, vUV + vec2(x, y) / screenSize);\r\n\r\n\tgl_FragColor = (colorDepth / float((OFFSET * 2 + 1) * (OFFSET * 2 + 1)));\r\n}"); else _g.h["depthBoxBlur.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 colorDepth = vec4(0.0);\r\n\r\n\tfor (int x = -OFFSET; x <= OFFSET; x++)\r\n\t\tfor (int y = -OFFSET; y <= OFFSET; y++)\r\n\t\t\tcolorDepth += texture2D(textureSampler, vUV + vec2(x, y) / screenSize);\r\n\r\n\tgl_FragColor = (colorDepth / float((OFFSET * 2 + 1) * (OFFSET * 2 + 1)));\r\n}";
	if(__map_reserved["depthOfField.fragment"] != null) _g.setReserved("depthOfField.fragment","// BABYLON.JS Depth-of-field GLSL Shader\r\n// Author: Olivier Guyot\r\n// Does depth-of-field blur, edge blur\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\nprecision highp float;\r\n\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D highlightsSampler;\r\nuniform sampler2D depthSampler;\r\nuniform sampler2D grainSampler;\r\n\r\n// uniforms\r\nuniform float grain_amount;\r\nuniform bool blur_noise;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\nuniform float distortion;\r\nuniform bool dof_enabled;\r\n//uniform float focus_distance;\t\t// not needed; already used to compute screen distance\r\nuniform float screen_distance;\t\t// precomputed screen distance from lens center; based on focal length & desired focus distance\r\nuniform float aperture;\r\nuniform float darken;\r\nuniform float edge_blur;\r\nuniform bool highlights;\r\n\r\n// preconputed uniforms (not effect parameters)\r\nuniform float near;\r\nuniform float far;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\n#define PI \t\t3.14159265\r\n#define TWOPI \t6.28318530\r\n#define inverse_focal_length 0.1\t// a property of the lens used\r\n\r\n// common calculations\r\nvec2 centered_screen_pos;\r\nvec2 distorted_coords;\r\nfloat radius2;\r\nfloat radius;\r\n\r\n\r\n// on-the-fly constant noise\r\nvec2 rand(vec2 co)\r\n{\r\n\tfloat noise1 = (fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453));\r\n\tfloat noise2 = (fract(sin(dot(co, vec2(12.9898, 78.233)*2.0)) * 43758.5453));\r\n\treturn clamp(vec2(noise1, noise2), 0.0, 1.0);\r\n}\r\n\r\n// applies edge distortion on texture coords\r\nvec2 getDistortedCoords(vec2 coords) {\r\n\r\n\tif (distortion == 0.0) { return coords; }\r\n\r\n\tvec2 direction = 1.0 * normalize(centered_screen_pos);\r\n\tvec2 dist_coords = vec2(0.5, 0.5);\r\n\tdist_coords.x = 0.5 + direction.x * radius2 * 1.0;\r\n\tdist_coords.y = 0.5 + direction.y * radius2 * 1.0;\r\n\tfloat dist_amount = clamp(distortion*0.23, 0.0, 1.0);\r\n\r\n\tdist_coords = mix(coords, dist_coords, dist_amount);\r\n\r\n\treturn dist_coords;\r\n}\r\n\r\n// sample screen with an offset (randomize offset angle for better smothness), returns partial sample weight\r\nfloat sampleScreen(inout vec4 color, const in vec2 offset, const in float weight) {\r\n\r\n\t// compute coords with offset (a random angle is added)\r\n\tvec2 coords = distorted_coords;\r\n\tfloat angle = rand(coords * 100.0).x * TWOPI;\r\n\tcoords += vec2(offset.x * cos(angle) - offset.y * sin(angle), offset.x * sin(angle) + offset.y * cos(angle));\r\n\r\n\tcolor += texture2D(textureSampler, coords)*weight;\r\n\r\n\treturn weight;\r\n}\r\n\r\n// returns blur level according to blur size required\r\nfloat getBlurLevel(float size) {\r\n\treturn min(3.0, ceil(size / 1.0));\r\n}\r\n\r\n// returns original screen color after blur\r\nvec4 getBlurColor(float size) {\r\n\r\n\tvec4 col = texture2D(textureSampler, distorted_coords);\r\n\tif (size == 0.0) { return col; }\r\n\r\n\t// there are max. 30 samples; the number of samples chosen is dependant on the blur size\r\n\t// there can be 10, 20 or 30 samples chosen; levels of blur are then 1, 2 or 3\r\n\tfloat blur_level = getBlurLevel(size);\r\n\r\n\tfloat w = (size / screen_width);\r\n\tfloat h = (size / screen_height);\r\n\tfloat total_weight = 1.0;\r\n\tvec2 sample_coords;\r\n\r\n\ttotal_weight += sampleScreen(col, vec2(-0.50*w, 0.24*h), 0.93);\r\n\ttotal_weight += sampleScreen(col, vec2(0.30*w, -0.75*h), 0.90);\r\n\ttotal_weight += sampleScreen(col, vec2(0.36*w, 0.96*h), 0.87);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.08*w, -0.55*h), 0.85);\r\n\ttotal_weight += sampleScreen(col, vec2(1.33*w, -0.37*h), 0.83);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.82*w, 1.31*h), 0.80);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.31*w, -1.67*h), 0.78);\r\n\ttotal_weight += sampleScreen(col, vec2(1.47*w, 1.11*h), 0.76);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.97*w, 0.19*h), 0.74);\r\n\ttotal_weight += sampleScreen(col, vec2(1.42*w, -1.57*h), 0.72);\r\n\r\n\tif (blur_level > 1.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.01*w, 2.25*h), 0.70);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.62*w, -1.74*h), 0.67);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.49*w, 0.20*h), 0.65);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.07*w, 1.61*h), 0.63);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.46*w, -2.70*h), 0.61);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.55*w, 2.40*h), 0.59);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.88*w, -0.75*h), 0.56);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.73*w, -1.44*h), 0.54);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.08*w, 3.02*h), 0.52);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.28*w, -3.05*h), 0.49);\r\n\t}\r\n\r\n\tif (blur_level > 2.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.11*w, 1.43*h), 0.46);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.36*w, 1.08*h), 0.44);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.80*w, -3.16*h), 0.41);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.83*w, 3.65*h), 0.38);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.16*w, -2.19*h), 0.34);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.92*w, -0.53*h), 0.31);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.59*w, 3.12*h), 0.26);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-0.20*w, -4.15*h), 0.22);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.02*w, 3.00*h), 0.15);\r\n\t}\r\n\r\n\tcol /= total_weight;\t\t// scales color according to weights\r\n\r\n\t\t\t\t\t\t\t\t// darken if out of focus\r\n\tif (darken > 0.0) {\r\n\t\tcol.rgb *= clamp(0.3, 1.0, 1.05 - size*0.5*darken);\r\n\t}\r\n\r\n\t// blur levels debug\r\n\t// if(blur_level == 1.0) { col.b *= 0.5; }\r\n\t// if(blur_level == 2.0) { col.r *= 0.5; }\r\n\t// if(blur_level == 3.0) { col.g *= 0.5; }\r\n\r\n\treturn col;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\r\n\t// Common calc: position relative to screen center, screen radius, distorted coords, position in texel space\r\n\tcentered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tradius2 = centered_screen_pos.x*centered_screen_pos.x + centered_screen_pos.y*centered_screen_pos.y;\r\n\tradius = sqrt(radius2);\r\n\tdistorted_coords = getDistortedCoords(vUV);\t\t// we distort the screen coordinates (lens \"magnifying\" effect)\r\n\tvec2 texels_coords = vec2(vUV.x * screen_width, vUV.y * screen_height);\t// varies from 0 to SCREEN_WIDTH or _HEIGHT\r\n\r\n\tfloat depth = texture2D(depthSampler, distorted_coords).r;\t// depth value from DepthRenderer: 0 to 1\r\n\tfloat distance = near + (far - near)*depth;\t\t// actual distance from the lens\r\n\tvec4 color = texture2D(textureSampler, vUV);\t// original raster\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// compute the circle of confusion size (CoC), i.e. blur radius depending on depth\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// screen_distance is precomputed in code\r\n\tfloat coc = abs(aperture * (screen_distance * (inverse_focal_length - 1.0 / distance) - 1.0));\r\n\r\n\t// disable blur\r\n\tif (dof_enabled == false || coc < 0.07) { coc = 0.0; }\r\n\r\n\t// blur from edge blur effect\r\n\tfloat edge_blur_amount = 0.0;\r\n\tif (edge_blur > 0.0) {\r\n\t\tedge_blur_amount = clamp((radius*2.0 - 1.0 + 0.15*edge_blur) * 1.5, 0.0, 1.0) * 1.3;\r\n\t}\r\n\r\n\t// total blur amount\r\n\tfloat blur_amount = max(edge_blur_amount, coc);\r\n\r\n\t// apply blur if necessary\r\n\tif (blur_amount == 0.0) {\r\n\t\tgl_FragColor = texture2D(textureSampler, distorted_coords);\r\n\t}\r\n\telse {\r\n\r\n\t\t// add blurred color\r\n\t\tgl_FragColor = getBlurColor(blur_amount * 1.7);\r\n\r\n\t\t// if we have computed highlights: enhance highlights\r\n\t\tif (highlights) {\r\n\t\t\tgl_FragColor.rgb += clamp(coc, 0.0, 1.0)*texture2D(highlightsSampler, distorted_coords).rgb;\r\n\t\t}\r\n\r\n\t\tif (blur_noise) {\r\n\t\t\t// we put a slight amount of noise in the blurred color\r\n\t\t\tvec2 noise = rand(distorted_coords) * 0.01 * blur_amount;\r\n\t\t\tvec2 blurred_coord = vec2(distorted_coords.x + noise.x, distorted_coords.y + noise.y);\r\n\t\t\tgl_FragColor = 0.04 * texture2D(textureSampler, blurred_coord) + 0.96 * gl_FragColor;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// apply grain\r\n\tif (grain_amount > 0.0) {\r\n\t\tvec4 grain_color = texture2D(grainSampler, texels_coords*0.003);\r\n\t\tgl_FragColor.rgb += (-0.5 + grain_color.rgb) * 0.30 * grain_amount;\r\n\t}\r\n\r\n}\r\n"); else _g.h["depthOfField.fragment"] = "// BABYLON.JS Depth-of-field GLSL Shader\r\n// Author: Olivier Guyot\r\n// Does depth-of-field blur, edge blur\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\nprecision highp float;\r\n\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D highlightsSampler;\r\nuniform sampler2D depthSampler;\r\nuniform sampler2D grainSampler;\r\n\r\n// uniforms\r\nuniform float grain_amount;\r\nuniform bool blur_noise;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\nuniform float distortion;\r\nuniform bool dof_enabled;\r\n//uniform float focus_distance;\t\t// not needed; already used to compute screen distance\r\nuniform float screen_distance;\t\t// precomputed screen distance from lens center; based on focal length & desired focus distance\r\nuniform float aperture;\r\nuniform float darken;\r\nuniform float edge_blur;\r\nuniform bool highlights;\r\n\r\n// preconputed uniforms (not effect parameters)\r\nuniform float near;\r\nuniform float far;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\n#define PI \t\t3.14159265\r\n#define TWOPI \t6.28318530\r\n#define inverse_focal_length 0.1\t// a property of the lens used\r\n\r\n// common calculations\r\nvec2 centered_screen_pos;\r\nvec2 distorted_coords;\r\nfloat radius2;\r\nfloat radius;\r\n\r\n\r\n// on-the-fly constant noise\r\nvec2 rand(vec2 co)\r\n{\r\n\tfloat noise1 = (fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453));\r\n\tfloat noise2 = (fract(sin(dot(co, vec2(12.9898, 78.233)*2.0)) * 43758.5453));\r\n\treturn clamp(vec2(noise1, noise2), 0.0, 1.0);\r\n}\r\n\r\n// applies edge distortion on texture coords\r\nvec2 getDistortedCoords(vec2 coords) {\r\n\r\n\tif (distortion == 0.0) { return coords; }\r\n\r\n\tvec2 direction = 1.0 * normalize(centered_screen_pos);\r\n\tvec2 dist_coords = vec2(0.5, 0.5);\r\n\tdist_coords.x = 0.5 + direction.x * radius2 * 1.0;\r\n\tdist_coords.y = 0.5 + direction.y * radius2 * 1.0;\r\n\tfloat dist_amount = clamp(distortion*0.23, 0.0, 1.0);\r\n\r\n\tdist_coords = mix(coords, dist_coords, dist_amount);\r\n\r\n\treturn dist_coords;\r\n}\r\n\r\n// sample screen with an offset (randomize offset angle for better smothness), returns partial sample weight\r\nfloat sampleScreen(inout vec4 color, const in vec2 offset, const in float weight) {\r\n\r\n\t// compute coords with offset (a random angle is added)\r\n\tvec2 coords = distorted_coords;\r\n\tfloat angle = rand(coords * 100.0).x * TWOPI;\r\n\tcoords += vec2(offset.x * cos(angle) - offset.y * sin(angle), offset.x * sin(angle) + offset.y * cos(angle));\r\n\r\n\tcolor += texture2D(textureSampler, coords)*weight;\r\n\r\n\treturn weight;\r\n}\r\n\r\n// returns blur level according to blur size required\r\nfloat getBlurLevel(float size) {\r\n\treturn min(3.0, ceil(size / 1.0));\r\n}\r\n\r\n// returns original screen color after blur\r\nvec4 getBlurColor(float size) {\r\n\r\n\tvec4 col = texture2D(textureSampler, distorted_coords);\r\n\tif (size == 0.0) { return col; }\r\n\r\n\t// there are max. 30 samples; the number of samples chosen is dependant on the blur size\r\n\t// there can be 10, 20 or 30 samples chosen; levels of blur are then 1, 2 or 3\r\n\tfloat blur_level = getBlurLevel(size);\r\n\r\n\tfloat w = (size / screen_width);\r\n\tfloat h = (size / screen_height);\r\n\tfloat total_weight = 1.0;\r\n\tvec2 sample_coords;\r\n\r\n\ttotal_weight += sampleScreen(col, vec2(-0.50*w, 0.24*h), 0.93);\r\n\ttotal_weight += sampleScreen(col, vec2(0.30*w, -0.75*h), 0.90);\r\n\ttotal_weight += sampleScreen(col, vec2(0.36*w, 0.96*h), 0.87);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.08*w, -0.55*h), 0.85);\r\n\ttotal_weight += sampleScreen(col, vec2(1.33*w, -0.37*h), 0.83);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.82*w, 1.31*h), 0.80);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.31*w, -1.67*h), 0.78);\r\n\ttotal_weight += sampleScreen(col, vec2(1.47*w, 1.11*h), 0.76);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.97*w, 0.19*h), 0.74);\r\n\ttotal_weight += sampleScreen(col, vec2(1.42*w, -1.57*h), 0.72);\r\n\r\n\tif (blur_level > 1.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.01*w, 2.25*h), 0.70);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.62*w, -1.74*h), 0.67);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.49*w, 0.20*h), 0.65);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.07*w, 1.61*h), 0.63);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.46*w, -2.70*h), 0.61);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.55*w, 2.40*h), 0.59);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.88*w, -0.75*h), 0.56);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.73*w, -1.44*h), 0.54);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.08*w, 3.02*h), 0.52);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.28*w, -3.05*h), 0.49);\r\n\t}\r\n\r\n\tif (blur_level > 2.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.11*w, 1.43*h), 0.46);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.36*w, 1.08*h), 0.44);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.80*w, -3.16*h), 0.41);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.83*w, 3.65*h), 0.38);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.16*w, -2.19*h), 0.34);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.92*w, -0.53*h), 0.31);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.59*w, 3.12*h), 0.26);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-0.20*w, -4.15*h), 0.22);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.02*w, 3.00*h), 0.15);\r\n\t}\r\n\r\n\tcol /= total_weight;\t\t// scales color according to weights\r\n\r\n\t\t\t\t\t\t\t\t// darken if out of focus\r\n\tif (darken > 0.0) {\r\n\t\tcol.rgb *= clamp(0.3, 1.0, 1.05 - size*0.5*darken);\r\n\t}\r\n\r\n\t// blur levels debug\r\n\t// if(blur_level == 1.0) { col.b *= 0.5; }\r\n\t// if(blur_level == 2.0) { col.r *= 0.5; }\r\n\t// if(blur_level == 3.0) { col.g *= 0.5; }\r\n\r\n\treturn col;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\r\n\t// Common calc: position relative to screen center, screen radius, distorted coords, position in texel space\r\n\tcentered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tradius2 = centered_screen_pos.x*centered_screen_pos.x + centered_screen_pos.y*centered_screen_pos.y;\r\n\tradius = sqrt(radius2);\r\n\tdistorted_coords = getDistortedCoords(vUV);\t\t// we distort the screen coordinates (lens \"magnifying\" effect)\r\n\tvec2 texels_coords = vec2(vUV.x * screen_width, vUV.y * screen_height);\t// varies from 0 to SCREEN_WIDTH or _HEIGHT\r\n\r\n\tfloat depth = texture2D(depthSampler, distorted_coords).r;\t// depth value from DepthRenderer: 0 to 1\r\n\tfloat distance = near + (far - near)*depth;\t\t// actual distance from the lens\r\n\tvec4 color = texture2D(textureSampler, vUV);\t// original raster\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// compute the circle of confusion size (CoC), i.e. blur radius depending on depth\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// screen_distance is precomputed in code\r\n\tfloat coc = abs(aperture * (screen_distance * (inverse_focal_length - 1.0 / distance) - 1.0));\r\n\r\n\t// disable blur\r\n\tif (dof_enabled == false || coc < 0.07) { coc = 0.0; }\r\n\r\n\t// blur from edge blur effect\r\n\tfloat edge_blur_amount = 0.0;\r\n\tif (edge_blur > 0.0) {\r\n\t\tedge_blur_amount = clamp((radius*2.0 - 1.0 + 0.15*edge_blur) * 1.5, 0.0, 1.0) * 1.3;\r\n\t}\r\n\r\n\t// total blur amount\r\n\tfloat blur_amount = max(edge_blur_amount, coc);\r\n\r\n\t// apply blur if necessary\r\n\tif (blur_amount == 0.0) {\r\n\t\tgl_FragColor = texture2D(textureSampler, distorted_coords);\r\n\t}\r\n\telse {\r\n\r\n\t\t// add blurred color\r\n\t\tgl_FragColor = getBlurColor(blur_amount * 1.7);\r\n\r\n\t\t// if we have computed highlights: enhance highlights\r\n\t\tif (highlights) {\r\n\t\t\tgl_FragColor.rgb += clamp(coc, 0.0, 1.0)*texture2D(highlightsSampler, distorted_coords).rgb;\r\n\t\t}\r\n\r\n\t\tif (blur_noise) {\r\n\t\t\t// we put a slight amount of noise in the blurred color\r\n\t\t\tvec2 noise = rand(distorted_coords) * 0.01 * blur_amount;\r\n\t\t\tvec2 blurred_coord = vec2(distorted_coords.x + noise.x, distorted_coords.y + noise.y);\r\n\t\t\tgl_FragColor = 0.04 * texture2D(textureSampler, blurred_coord) + 0.96 * gl_FragColor;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// apply grain\r\n\tif (grain_amount > 0.0) {\r\n\t\tvec4 grain_color = texture2D(grainSampler, texels_coords*0.003);\r\n\t\tgl_FragColor.rgb += (-0.5 + grain_color.rgb) * 0.30 * grain_amount;\r\n\t}\r\n\r\n}\r\n";
	if(__map_reserved["displayPass.fragment"] != null) _g.setReserved("displayPass.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D passSampler;\r\n\r\nvoid main(void)\r\n{\r\n    gl_FragColor = texture2D(passSampler, vUV);\r\n}"); else _g.h["displayPass.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D passSampler;\r\n\r\nvoid main(void)\r\n{\r\n    gl_FragColor = texture2D(passSampler, vUV);\r\n}";
	if(__map_reserved["filter.fragment"] != null) _g.setReserved("filter.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform mat4 kernelMatrix;\r\n\r\nvoid main(void)\r\n{\r\n\tvec3 baseColor = texture2D(textureSampler, vUV).rgb;\r\n\tvec3 updatedColor = (kernelMatrix * vec4(baseColor, 1.0)).rgb;\r\n\r\n\tgl_FragColor = vec4(updatedColor, 1.0);\r\n}"); else _g.h["filter.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform mat4 kernelMatrix;\r\n\r\nvoid main(void)\r\n{\r\n\tvec3 baseColor = texture2D(textureSampler, vUV).rgb;\r\n\tvec3 updatedColor = (kernelMatrix * vec4(baseColor, 1.0)).rgb;\r\n\r\n\tgl_FragColor = vec4(updatedColor, 1.0);\r\n}";
	if(__map_reserved["firetexture.fragment"] != null) _g.setReserved("firetexture.fragment","precision highp float;\r\n\r\nuniform float time;\r\nuniform vec3 c1;\r\nuniform vec3 c2;\r\nuniform vec3 c3;\r\nuniform vec3 c4;\r\nuniform vec3 c5;\r\nuniform vec3 c6;\r\nuniform vec2 speed;\r\nuniform float shift;\r\nuniform float alphaThreshold;\r\n\r\nvarying vec2 vUV;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\tvec2 p = vUV * 8.0;\r\n\tfloat q = fbm(p - time * 0.1);\r\n\tvec2 r = vec2(fbm(p + q + time * speed.x - p.x - p.y), fbm(p + q - time * speed.y));\r\n\tvec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);\r\n\tvec3 color = c * cos(shift * vUV.y);\r\n\tfloat luminance = dot(color.rgb, vec3(0.3, 0.59, 0.11));\r\n\r\n\tgl_FragColor = vec4(color, luminance * alphaThreshold + (1.0 - alphaThreshold));\r\n}"); else _g.h["firetexture.fragment"] = "precision highp float;\r\n\r\nuniform float time;\r\nuniform vec3 c1;\r\nuniform vec3 c2;\r\nuniform vec3 c3;\r\nuniform vec3 c4;\r\nuniform vec3 c5;\r\nuniform vec3 c6;\r\nuniform vec2 speed;\r\nuniform float shift;\r\nuniform float alphaThreshold;\r\n\r\nvarying vec2 vUV;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\tvec2 p = vUV * 8.0;\r\n\tfloat q = fbm(p - time * 0.1);\r\n\tvec2 r = vec2(fbm(p + q + time * speed.x - p.x - p.y), fbm(p + q - time * speed.y));\r\n\tvec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);\r\n\tvec3 color = c * cos(shift * vUV.y);\r\n\tfloat luminance = dot(color.rgb, vec3(0.3, 0.59, 0.11));\r\n\r\n\tgl_FragColor = vec4(color, luminance * alphaThreshold + (1.0 - alphaThreshold));\r\n}";
	if(__map_reserved["fxaa.fragment"] != null) _g.setReserved("fxaa.fragment","precision highp float;\r\n\r\n#define FXAA_REDUCE_MIN   (1.0/128.0)\r\n#define FXAA_REDUCE_MUL   (1.0/8.0)\r\n#define FXAA_SPAN_MAX     8.0\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 texelSize;\r\n\r\nvoid main(){\r\n\tvec2 localTexelSize = texelSize;\r\n\tvec4 rgbNW = texture2D(textureSampler, (vUV + vec2(-1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbNE = texture2D(textureSampler, (vUV + vec2(1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbSW = texture2D(textureSampler, (vUV + vec2(-1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbSE = texture2D(textureSampler, (vUV + vec2(1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbM = texture2D(textureSampler, vUV);\r\n\tvec4 luma = vec4(0.299, 0.587, 0.114, 1.0);\r\n\tfloat lumaNW = dot(rgbNW, luma);\r\n\tfloat lumaNE = dot(rgbNE, luma);\r\n\tfloat lumaSW = dot(rgbSW, luma);\r\n\tfloat lumaSE = dot(rgbSE, luma);\r\n\tfloat lumaM = dot(rgbM, luma);\r\n\tfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\r\n\tfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\r\n\r\n\tvec2 dir = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)), ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\r\n\r\n\tfloat dirReduce = max(\r\n\t\t(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),\r\n\t\tFXAA_REDUCE_MIN);\r\n\r\n\tfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\r\n\tdir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\r\n\t\tmax(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\r\n\t\tdir * rcpDirMin)) * localTexelSize;\r\n\r\n\tvec4 rgbA = 0.5 * (\r\n\t\ttexture2D(textureSampler, vUV + dir * (1.0 / 3.0 - 0.5)) +\r\n\t\ttexture2D(textureSampler, vUV + dir * (2.0 / 3.0 - 0.5)));\r\n\r\n\tvec4 rgbB = rgbA * 0.5 + 0.25 * (\r\n\t\ttexture2D(textureSampler, vUV + dir *  -0.5) +\r\n\t\ttexture2D(textureSampler, vUV + dir * 0.5));\r\n\tfloat lumaB = dot(rgbB, luma);\r\n\tif ((lumaB < lumaMin) || (lumaB > lumaMax)) {\r\n\t\tgl_FragColor = rgbA;\r\n\t}\r\n\telse {\r\n\t\tgl_FragColor = rgbB;\r\n\t}\r\n}"); else _g.h["fxaa.fragment"] = "precision highp float;\r\n\r\n#define FXAA_REDUCE_MIN   (1.0/128.0)\r\n#define FXAA_REDUCE_MUL   (1.0/8.0)\r\n#define FXAA_SPAN_MAX     8.0\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 texelSize;\r\n\r\nvoid main(){\r\n\tvec2 localTexelSize = texelSize;\r\n\tvec4 rgbNW = texture2D(textureSampler, (vUV + vec2(-1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbNE = texture2D(textureSampler, (vUV + vec2(1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbSW = texture2D(textureSampler, (vUV + vec2(-1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbSE = texture2D(textureSampler, (vUV + vec2(1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbM = texture2D(textureSampler, vUV);\r\n\tvec4 luma = vec4(0.299, 0.587, 0.114, 1.0);\r\n\tfloat lumaNW = dot(rgbNW, luma);\r\n\tfloat lumaNE = dot(rgbNE, luma);\r\n\tfloat lumaSW = dot(rgbSW, luma);\r\n\tfloat lumaSE = dot(rgbSE, luma);\r\n\tfloat lumaM = dot(rgbM, luma);\r\n\tfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\r\n\tfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\r\n\r\n\tvec2 dir = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)), ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\r\n\r\n\tfloat dirReduce = max(\r\n\t\t(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),\r\n\t\tFXAA_REDUCE_MIN);\r\n\r\n\tfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\r\n\tdir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\r\n\t\tmax(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\r\n\t\tdir * rcpDirMin)) * localTexelSize;\r\n\r\n\tvec4 rgbA = 0.5 * (\r\n\t\ttexture2D(textureSampler, vUV + dir * (1.0 / 3.0 - 0.5)) +\r\n\t\ttexture2D(textureSampler, vUV + dir * (2.0 / 3.0 - 0.5)));\r\n\r\n\tvec4 rgbB = rgbA * 0.5 + 0.25 * (\r\n\t\ttexture2D(textureSampler, vUV + dir *  -0.5) +\r\n\t\ttexture2D(textureSampler, vUV + dir * 0.5));\r\n\tfloat lumaB = dot(rgbB, luma);\r\n\tif ((lumaB < lumaMin) || (lumaB > lumaMax)) {\r\n\t\tgl_FragColor = rgbA;\r\n\t}\r\n\telse {\r\n\t\tgl_FragColor = rgbB;\r\n\t}\r\n}";
	if(__map_reserved["grasstexture.fragment"] != null) _g.setReserved("grasstexture.fragment","precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform vec3 herb1Color;\r\nuniform vec3 herb2Color;\r\nuniform vec3 herb3Color;\r\nuniform vec3 groundColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tvec3 color = mix(groundColor, herb1Color, rand(gl_FragCoord.xy * 4.0));\r\n\tcolor = mix(color, herb2Color, rand(gl_FragCoord.xy * 8.0));\r\n\tcolor = mix(color, herb3Color, rand(gl_FragCoord.xy));\r\n\tcolor = mix(color, herb1Color, fbm(gl_FragCoord.xy * 16.0));\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}"); else _g.h["grasstexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform vec3 herb1Color;\r\nuniform vec3 herb2Color;\r\nuniform vec3 herb3Color;\r\nuniform vec3 groundColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tvec3 color = mix(groundColor, herb1Color, rand(gl_FragCoord.xy * 4.0));\r\n\tcolor = mix(color, herb2Color, rand(gl_FragCoord.xy * 8.0));\r\n\tcolor = mix(color, herb3Color, rand(gl_FragCoord.xy));\r\n\tcolor = mix(color, herb1Color, fbm(gl_FragCoord.xy * 16.0));\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}";
	if(__map_reserved["hdr.fragment"] != null) _g.setReserved("hdr.fragment","precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nvarying vec2 vUV;\r\n\r\n#if defined(GAUSSIAN_BLUR_H) || defined(GAUSSIAN_BLUR_V)\r\nuniform float blurOffsets[9];\r\nuniform float blurWeights[9];\r\nuniform float multiplier;\r\n\r\nvoid main(void) {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\t#ifdef GAUSSIAN_BLUR_H\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(blurOffsets[i] * multiplier, 0.0)) * blurWeights[i]);\r\n\t\t#else\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(0.0, blurOffsets[i] * multiplier)) * blurWeights[i]);\r\n\t\t#endif\r\n\t}\r\n\r\n\tcolor.a = 1.0;\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n\r\n#if defined(TEXTURE_ADDER)\r\nuniform sampler2D otherSampler;\r\n\r\nvoid main() {\r\n\tvec4 sum = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tsum.a = clamp(sum.a, 0.0, 1.0);\r\n\r\n\tgl_FragColor = sum;\r\n}\r\n#endif\r\n\r\n#if defined(LUMINANCE_GENERATOR)\r\nuniform vec2 lumOffsets[4];\r\n\r\nvoid main() {\r\n\tfloat average = 0.0;\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat maximum = -1e20;\r\n\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + lumOffsets[i]);\r\n\r\n\t\tfloat GreyValue = length(color.rgb);\r\n\r\n\t\tmaximum = max(maximum, GreyValue);\r\n\t\taverage += (0.25 * log(1e-5 + GreyValue));\r\n\t}\r\n\r\n\taverage = exp(average);\r\n\r\n\tgl_FragColor = vec4(average, maximum, 0.0, 1.0);\r\n\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE)\r\nuniform vec2 dsOffsets[9];\r\nuniform float halfDestPixelSize;\r\n\r\n#ifdef FINAL_DOWN_SAMPLE\r\nvec4 pack(float value) {\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(value * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n#endif\r\n\r\nvoid main() {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat average = 0.0;\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + vec2(halfDestPixelSize, halfDestPixelSize) + dsOffsets[i]);\r\n\t\taverage += color.r;\r\n\t}\r\n\r\n\taverage /= 9.0;\r\n\r\n\t#ifndef FINAL_DOWN_SAMPLE\r\n\tgl_FragColor = vec4(average, average, 0.0, 1.0);\r\n\t#else\r\n\tgl_FragColor = pack(average);\r\n\t#endif\r\n}\r\n#endif\r\n\r\n#if defined(BRIGHT_PASS)\r\nuniform vec2 dsOffsets[4];\r\nuniform float brightThreshold;\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + vec2(dsOffsets[0].x, dsOffsets[0].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[1].x, dsOffsets[1].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[2].x, dsOffsets[2].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[3].x, dsOffsets[3].y));\r\n\r\n\taverage *= 0.25;\r\n\r\n\tfloat luminance = length(average.rgb);\r\n\r\n\tif (luminance < brightThreshold) {\r\n\t\taverage = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t}\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE_X4)\r\nuniform vec2 dsOffsets[16];\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + dsOffsets[0]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[1]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[2]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[3]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[4]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[5]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[6]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[7]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[8]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[9]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[10]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[11]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[12]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[13]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[14]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[15]);\r\n\r\n\taverage /= 16.0;\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(HDR)\r\nuniform sampler2D otherSampler;\r\n\r\nuniform float exposure;\r\nuniform float avgLuminance;\r\n\r\nvoid main() {\r\n\tvec4 color = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tvec4 adjustedColor = color / avgLuminance * exposure;\r\n\r\n\tcolor = adjustedColor;\r\n\tcolor.a = 1.0;\r\n\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n"); else _g.h["hdr.fragment"] = "precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nvarying vec2 vUV;\r\n\r\n#if defined(GAUSSIAN_BLUR_H) || defined(GAUSSIAN_BLUR_V)\r\nuniform float blurOffsets[9];\r\nuniform float blurWeights[9];\r\nuniform float multiplier;\r\n\r\nvoid main(void) {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\t#ifdef GAUSSIAN_BLUR_H\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(blurOffsets[i] * multiplier, 0.0)) * blurWeights[i]);\r\n\t\t#else\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(0.0, blurOffsets[i] * multiplier)) * blurWeights[i]);\r\n\t\t#endif\r\n\t}\r\n\r\n\tcolor.a = 1.0;\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n\r\n#if defined(TEXTURE_ADDER)\r\nuniform sampler2D otherSampler;\r\n\r\nvoid main() {\r\n\tvec4 sum = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tsum.a = clamp(sum.a, 0.0, 1.0);\r\n\r\n\tgl_FragColor = sum;\r\n}\r\n#endif\r\n\r\n#if defined(LUMINANCE_GENERATOR)\r\nuniform vec2 lumOffsets[4];\r\n\r\nvoid main() {\r\n\tfloat average = 0.0;\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat maximum = -1e20;\r\n\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + lumOffsets[i]);\r\n\r\n\t\tfloat GreyValue = length(color.rgb);\r\n\r\n\t\tmaximum = max(maximum, GreyValue);\r\n\t\taverage += (0.25 * log(1e-5 + GreyValue));\r\n\t}\r\n\r\n\taverage = exp(average);\r\n\r\n\tgl_FragColor = vec4(average, maximum, 0.0, 1.0);\r\n\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE)\r\nuniform vec2 dsOffsets[9];\r\nuniform float halfDestPixelSize;\r\n\r\n#ifdef FINAL_DOWN_SAMPLE\r\nvec4 pack(float value) {\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(value * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n#endif\r\n\r\nvoid main() {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat average = 0.0;\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + vec2(halfDestPixelSize, halfDestPixelSize) + dsOffsets[i]);\r\n\t\taverage += color.r;\r\n\t}\r\n\r\n\taverage /= 9.0;\r\n\r\n\t#ifndef FINAL_DOWN_SAMPLE\r\n\tgl_FragColor = vec4(average, average, 0.0, 1.0);\r\n\t#else\r\n\tgl_FragColor = pack(average);\r\n\t#endif\r\n}\r\n#endif\r\n\r\n#if defined(BRIGHT_PASS)\r\nuniform vec2 dsOffsets[4];\r\nuniform float brightThreshold;\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + vec2(dsOffsets[0].x, dsOffsets[0].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[1].x, dsOffsets[1].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[2].x, dsOffsets[2].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[3].x, dsOffsets[3].y));\r\n\r\n\taverage *= 0.25;\r\n\r\n\tfloat luminance = length(average.rgb);\r\n\r\n\tif (luminance < brightThreshold) {\r\n\t\taverage = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t}\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE_X4)\r\nuniform vec2 dsOffsets[16];\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + dsOffsets[0]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[1]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[2]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[3]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[4]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[5]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[6]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[7]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[8]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[9]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[10]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[11]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[12]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[13]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[14]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[15]);\r\n\r\n\taverage /= 16.0;\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(HDR)\r\nuniform sampler2D otherSampler;\r\n\r\nuniform float exposure;\r\nuniform float avgLuminance;\r\n\r\nvoid main() {\r\n\tvec4 color = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tvec4 adjustedColor = color / avgLuminance * exposure;\r\n\r\n\tcolor = adjustedColor;\r\n\tcolor.a = 1.0;\r\n\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n";
	if(__map_reserved["layer.fragment"] != null) _g.setReserved("layer.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}"); else _g.h["layer.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}";
	if(__map_reserved["layer.vertex"] != null) _g.setReserved("layer.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 textureMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = vec2(textureMatrix * vec4(position * madd + madd, 1.0, 0.0));\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}"); else _g.h["layer.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 textureMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = vec2(textureMatrix * vec4(position * madd + madd, 1.0, 0.0));\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["legacydefault.fragment"] != null) _g.setReserved("legacydefault.fragment","precision highp float;\r\n\r\n#define MAP_PROJECTION\t4.\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#else\r\nuniform samplerCube shadowSampler0;\r\n#endif\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#else\r\nuniform samplerCube shadowSampler1;\r\n#endif\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#else\r\nuniform samplerCube shadowSampler2;\r\n#endif\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#else\r\nuniform samplerCube shadowSampler3;\r\n#endif\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nvarying vec3 vReflectionUVW;\r\n#ifdef REFLECTIONMAP_3D\r\nuniform samplerCube reflectionCubeSampler;\r\n#else\r\nuniform sampler2D reflection2DSampler;\r\n#endif\r\nuniform vec2 vReflectionInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(color, bit_shift);\r\n}\r\n\r\n#if defined(POINTLIGHT0) || defined(POINTLIGHT1) || defined(POINTLIGHT2) || defined(POINTLIGHT3)\r\nfloat computeShadowCube(vec3 lightPosition, samplerCube shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat shadow = unpack(textureCube(shadowSampler, directionToLight)) + bias;\r\n\r\n\tif (depth > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.0;\r\n}\r\n#endif\r\n\r\n#if defined(SPOTLIGHT0) || defined(SPOTLIGHT1) || defined(SPOTLIGHT2) || defined(SPOTLIGHT3) ||  defined(DIRLIGHT0) || defined(DIRLIGHT1) || defined(DIRLIGHT2) || defined(DIRLIGHT3)\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n\tfloat p = smoothstep(compare - bias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x * moments.x, 0.02);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn min(1.0, 1.0 - ChebychevInequality(moments, depth.z, bias) + darkness);\r\n}\r\n#endif\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nmat3 computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tlightVectorW = normalize(lightData.xyz - vPositionW);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\r\n\tresult[0] = ndl * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = max(0., pow(specComp, max(1.0, vSpecularColor.a)));\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW = normalize(lightData.xyz - vPositionW);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = max(0., (cosAngle - lightDirection.w) / (1. - cosAngle));\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult[0] = ndl * spotAtten * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, vSpecularColor.a);\r\n\t\tresult[1] = specComp * specularColor * spotAtten;\r\n#else\r\n\t\tresult[1] = vec3(0.);\r\n#endif\r\n\t\tresult[2] = vec3(0.);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult[0] = vec3(0.);\r\n\tresult[1] = vec3(0.);\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor, vec3 groundColor) {\r\n\tmat3 result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult[0] = mix(groundColor, diffuseColor.rgb, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, vSpecularColor.a);\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n\tvec3 normalW = normalize(vNormalW);\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tmat3 info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tmat3 info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0, vLightGround0);\r\n#endif\r\n#if defined(POINTLIGHT0) || defined(DIRLIGHT0)\r\n\tmat3 info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1, vLightGround1);\r\n#endif\r\n#if defined(POINTLIGHT1) || defined(DIRLIGHT1)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2, vLightGround2);\r\n#endif\r\n#if defined(POINTLIGHT2) || defined(DIRLIGHT2)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3, vLightGround3);\r\n#endif\r\n#if defined(POINTLIGHT3) || defined(DIRLIGHT3)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n#ifdef REFLECTION\r\n#ifdef REFLECTIONMAP_3D\r\n\t\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.x;\r\n#else\r\n\t\tvec2 coords = vReflectionUVW.xy;\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\t\tcoords /= vReflectionUVW.z;\r\n#endif\r\n\r\n\t\tcoords.y = 1.0 - coords.y;\r\n\r\n\t\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n#ifdef SPECULAR\r\n\tspecularColor = texture2D(specularSampler, vSpecularUV).rgb * vSpecularInfos.y;\r\n#endif\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["legacydefault.fragment"] = "precision highp float;\r\n\r\n#define MAP_PROJECTION\t4.\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#else\r\nuniform samplerCube shadowSampler0;\r\n#endif\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#else\r\nuniform samplerCube shadowSampler1;\r\n#endif\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#else\r\nuniform samplerCube shadowSampler2;\r\n#endif\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#else\r\nuniform samplerCube shadowSampler3;\r\n#endif\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nvarying vec3 vReflectionUVW;\r\n#ifdef REFLECTIONMAP_3D\r\nuniform samplerCube reflectionCubeSampler;\r\n#else\r\nuniform sampler2D reflection2DSampler;\r\n#endif\r\nuniform vec2 vReflectionInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(color, bit_shift);\r\n}\r\n\r\n#if defined(POINTLIGHT0) || defined(POINTLIGHT1) || defined(POINTLIGHT2) || defined(POINTLIGHT3)\r\nfloat computeShadowCube(vec3 lightPosition, samplerCube shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat shadow = unpack(textureCube(shadowSampler, directionToLight)) + bias;\r\n\r\n\tif (depth > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.0;\r\n}\r\n#endif\r\n\r\n#if defined(SPOTLIGHT0) || defined(SPOTLIGHT1) || defined(SPOTLIGHT2) || defined(SPOTLIGHT3) ||  defined(DIRLIGHT0) || defined(DIRLIGHT1) || defined(DIRLIGHT2) || defined(DIRLIGHT3)\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n\tfloat p = smoothstep(compare - bias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x * moments.x, 0.02);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn min(1.0, 1.0 - ChebychevInequality(moments, depth.z, bias) + darkness);\r\n}\r\n#endif\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nmat3 computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tlightVectorW = normalize(lightData.xyz - vPositionW);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\r\n\tresult[0] = ndl * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = max(0., pow(specComp, max(1.0, vSpecularColor.a)));\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW = normalize(lightData.xyz - vPositionW);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = max(0., (cosAngle - lightDirection.w) / (1. - cosAngle));\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult[0] = ndl * spotAtten * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, vSpecularColor.a);\r\n\t\tresult[1] = specComp * specularColor * spotAtten;\r\n#else\r\n\t\tresult[1] = vec3(0.);\r\n#endif\r\n\t\tresult[2] = vec3(0.);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult[0] = vec3(0.);\r\n\tresult[1] = vec3(0.);\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor, vec3 groundColor) {\r\n\tmat3 result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult[0] = mix(groundColor, diffuseColor.rgb, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, vSpecularColor.a);\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n\tvec3 normalW = normalize(vNormalW);\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tmat3 info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tmat3 info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0, vLightGround0);\r\n#endif\r\n#if defined(POINTLIGHT0) || defined(DIRLIGHT0)\r\n\tmat3 info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1, vLightGround1);\r\n#endif\r\n#if defined(POINTLIGHT1) || defined(DIRLIGHT1)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2, vLightGround2);\r\n#endif\r\n#if defined(POINTLIGHT2) || defined(DIRLIGHT2)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3, vLightGround3);\r\n#endif\r\n#if defined(POINTLIGHT3) || defined(DIRLIGHT3)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n#ifdef REFLECTION\r\n#ifdef REFLECTIONMAP_3D\r\n\t\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.x;\r\n#else\r\n\t\tvec2 coords = vReflectionUVW.xy;\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\t\tcoords /= vReflectionUVW.z;\r\n#endif\r\n\r\n\t\tcoords.y = 1.0 - coords.y;\r\n\r\n\t\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n#ifdef SPECULAR\r\n\tspecularColor = texture2D(specularSampler, vSpecularUV).rgb * vSpecularInfos.y;\r\n#endif\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["legacydefault.vertex"] != null) _g.setReserved("legacydefault.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\nuniform mat4 world;\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nuniform vec3 vEyePosition;\r\nvarying vec3 vReflectionUVW;\r\nuniform mat4 reflectionMatrix;\r\n\r\nvec3 computeReflectionCoords(vec4 worldPos, vec3 worldNormal)\r\n{\r\n#ifdef REFLECTIONMAP_SPHERICAL\r\n\tvec3 coords = vec3(view * vec4(worldNormal, 0.0));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1.0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PLANAR\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_CUBIC\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = reflect(viewDir, worldNormal);\r\n#ifdef INVERTCUBICMAP\r\n\tcoords.y = 1.0 - coords.y;\r\n#endif\r\n\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\treturn vec3(reflectionMatrix * (view * worldPos));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\treturn position;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EXPLICIT\r\n\treturn vec3(0, 0, 0);\r\n#endif\r\n}\r\n#endif\r\n\r\nvoid main(void) {\r\n\tmat4 finalWorld = world;\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif \r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\t\r\n#ifdef REFLECTION\r\n\tvReflectionUVW = computeReflectionCoords(vec4(vPositionW, 1.0), vNormalW);\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n}"); else _g.h["legacydefault.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\nuniform mat4 world;\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nuniform vec3 vEyePosition;\r\nvarying vec3 vReflectionUVW;\r\nuniform mat4 reflectionMatrix;\r\n\r\nvec3 computeReflectionCoords(vec4 worldPos, vec3 worldNormal)\r\n{\r\n#ifdef REFLECTIONMAP_SPHERICAL\r\n\tvec3 coords = vec3(view * vec4(worldNormal, 0.0));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1.0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PLANAR\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_CUBIC\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = reflect(viewDir, worldNormal);\r\n#ifdef INVERTCUBICMAP\r\n\tcoords.y = 1.0 - coords.y;\r\n#endif\r\n\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\treturn vec3(reflectionMatrix * (view * worldPos));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\treturn position;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EXPLICIT\r\n\treturn vec3(0, 0, 0);\r\n#endif\r\n}\r\n#endif\r\n\r\nvoid main(void) {\r\n\tmat4 finalWorld = world;\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif \r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\t\r\n#ifdef REFLECTION\r\n\tvReflectionUVW = computeReflectionCoords(vec4(vPositionW, 1.0), vNormalW);\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n}";
	if(__map_reserved["lensFlare.fragment"] != null) _g.setReserved("lensFlare.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}"); else _g.h["lensFlare.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}";
	if(__map_reserved["lensFlare.vertex"] != null) _g.setReserved("lensFlare.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 viewportMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = viewportMatrix * vec4(position, 0.0, 1.0);\r\n}"); else _g.h["lensFlare.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 viewportMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = viewportMatrix * vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["lensHighlights.fragment"] != null) _g.setReserved("lensHighlights.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float gain;\r\nuniform float threshold;\r\nuniform bool pentagon;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// apply luminance filter\r\nvec4 highlightColor(vec4 color) {\r\n\tvec4 highlight = color;\r\n\tfloat luminance = dot(highlight.rgb, vec3(0.2125, 0.7154, 0.0721));\r\n\tfloat lum_threshold;\r\n\tif (threshold > 1.0) { lum_threshold = 0.94 + 0.01 * threshold; }\r\n\telse { lum_threshold = 0.5 + 0.44 * threshold; }\r\n\r\n\tluminance = clamp((luminance - lum_threshold) * (1.0 / (1.0 - lum_threshold)), 0.0, 1.0);\r\n\r\n\thighlight *= luminance * gain;\r\n\thighlight.a = 1.0;\r\n\r\n\treturn highlight;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\t// quick exit if no highlight computing\r\n\tif (gain == -1.0) {\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t\treturn;\r\n\t}\r\n\r\n\tfloat w = 2.0 / screen_width;\r\n\tfloat h = 2.0 / screen_height;\r\n\r\n\tfloat weight = 1.0;\r\n\r\n\t// compute blurred color\r\n\tvec4 blurred = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tif (pentagon) {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.84*w, 0.43*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.48*w, -1.29*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.61*w, 1.51*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.55*w, -0.74*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.71*w, -0.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.94*w, 1.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.40*w, -1.87*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.62*w, 1.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.09*w, 0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.46*w, -1.71*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.08*w, 2.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.85*w, -1.89*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.89*w, 0.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.29*w, 1.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.40*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.54*w, 2.26*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.60*w, -0.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.31*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.83*w, 2.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.12*w, -2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.60*w, 1.11*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.99*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.50*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.85*w, 3.33*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.94*w, -1.92*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.27*w, -0.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.95*w, 2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.23*w, -3.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.17*w, 2.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.97*w, -0.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.25*w, -2.00*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.31*w, 3.08*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.94*w, -2.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.37*w, 0.64*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.13*w, 1.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.03*w, -3.65*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.60*w, 3.17*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.14*w, -1.19*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.00*w, -1.19*h)));\r\n\t}\r\n\telse {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.85*w, 0.36*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.52*w, -1.14*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.46*w, 1.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.46*w, -0.83*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.79*w, -0.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.11*w, 1.62*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.29*w, -2.07*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.69*w, 1.39*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.28*w, 0.12*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.65*w, -1.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.08*w, 2.44*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.63*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.55*w, 0.31*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.13*w, 1.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.56*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.38*w, 2.34*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.64*w, -0.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.53*w, -1.21*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.06*w, 2.63*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.00*w, -2.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.59*w, 1.32*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.78*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.57*w, -2.50*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.54*w, 2.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.39*w, -1.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, -0.28*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.04*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.02*w, -3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.09*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.07*w, -0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.44*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.52*w, 3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.68*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, 0.79*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.76*w, 1.46*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.05*w, -2.94*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.21*w, 2.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.84*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.98*w, -0.96*h)));\r\n\t}\r\n\r\n\tblurred /= 39.0;\r\n\r\n\tgl_FragColor = blurred;\r\n\r\n\t//if(vUV.x > 0.5) { gl_FragColor.rgb *= 0.0; }\r\n}"); else _g.h["lensHighlights.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float gain;\r\nuniform float threshold;\r\nuniform bool pentagon;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// apply luminance filter\r\nvec4 highlightColor(vec4 color) {\r\n\tvec4 highlight = color;\r\n\tfloat luminance = dot(highlight.rgb, vec3(0.2125, 0.7154, 0.0721));\r\n\tfloat lum_threshold;\r\n\tif (threshold > 1.0) { lum_threshold = 0.94 + 0.01 * threshold; }\r\n\telse { lum_threshold = 0.5 + 0.44 * threshold; }\r\n\r\n\tluminance = clamp((luminance - lum_threshold) * (1.0 / (1.0 - lum_threshold)), 0.0, 1.0);\r\n\r\n\thighlight *= luminance * gain;\r\n\thighlight.a = 1.0;\r\n\r\n\treturn highlight;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\t// quick exit if no highlight computing\r\n\tif (gain == -1.0) {\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t\treturn;\r\n\t}\r\n\r\n\tfloat w = 2.0 / screen_width;\r\n\tfloat h = 2.0 / screen_height;\r\n\r\n\tfloat weight = 1.0;\r\n\r\n\t// compute blurred color\r\n\tvec4 blurred = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tif (pentagon) {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.84*w, 0.43*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.48*w, -1.29*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.61*w, 1.51*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.55*w, -0.74*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.71*w, -0.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.94*w, 1.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.40*w, -1.87*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.62*w, 1.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.09*w, 0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.46*w, -1.71*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.08*w, 2.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.85*w, -1.89*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.89*w, 0.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.29*w, 1.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.40*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.54*w, 2.26*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.60*w, -0.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.31*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.83*w, 2.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.12*w, -2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.60*w, 1.11*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.99*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.50*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.85*w, 3.33*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.94*w, -1.92*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.27*w, -0.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.95*w, 2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.23*w, -3.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.17*w, 2.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.97*w, -0.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.25*w, -2.00*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.31*w, 3.08*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.94*w, -2.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.37*w, 0.64*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.13*w, 1.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.03*w, -3.65*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.60*w, 3.17*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.14*w, -1.19*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.00*w, -1.19*h)));\r\n\t}\r\n\telse {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.85*w, 0.36*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.52*w, -1.14*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.46*w, 1.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.46*w, -0.83*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.79*w, -0.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.11*w, 1.62*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.29*w, -2.07*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.69*w, 1.39*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.28*w, 0.12*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.65*w, -1.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.08*w, 2.44*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.63*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.55*w, 0.31*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.13*w, 1.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.56*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.38*w, 2.34*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.64*w, -0.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.53*w, -1.21*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.06*w, 2.63*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.00*w, -2.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.59*w, 1.32*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.78*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.57*w, -2.50*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.54*w, 2.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.39*w, -1.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, -0.28*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.04*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.02*w, -3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.09*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.07*w, -0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.44*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.52*w, 3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.68*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, 0.79*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.76*w, 1.46*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.05*w, -2.94*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.21*w, 2.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.84*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.98*w, -0.96*h)));\r\n\t}\r\n\r\n\tblurred /= 39.0;\r\n\r\n\tgl_FragColor = blurred;\r\n\r\n\t//if(vUV.x > 0.5) { gl_FragColor.rgb *= 0.0; }\r\n}";
	if(__map_reserved["line.fragment"] != null) _g.setReserved("line.fragment","precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = color;\r\n}"); else _g.h["line.fragment"] = "precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["line.vertex"] != null) _g.setReserved("line.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec4 normal;\r\n\r\n// Uniforms\r\nuniform mat4 worldViewProjection;\r\n\r\nuniform float width;\r\nuniform float aspectRatio;\r\n\r\nvoid main(void) {\r\n\tvec4 viewPosition = worldViewProjection * vec4(position, 1.0);\r\n\tvec4 viewPositionNext = worldViewProjection * vec4(normal.xyz, 1.0);\r\n\r\n\tvec2 currentScreen = viewPosition.xy / viewPosition.w;\r\n\tvec2 nextScreen = viewPositionNext.xy / viewPositionNext.w;\r\n\r\n\tcurrentScreen.x *= aspectRatio;\r\n\tnextScreen.x *= aspectRatio;\r\n\r\n\tvec2 dir = normalize(nextScreen - currentScreen);\r\n\tvec2 normalDir = vec2(-dir.y, dir.x);\r\n\r\n\tnormalDir *= width / 2.0;\r\n\tnormalDir.x /= aspectRatio;\r\n\r\n\tvec4 offset = vec4(normalDir * normal.w, 0.0, 0.0);\r\n\tgl_Position = viewPosition + offset;\r\n}"); else _g.h["line.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec4 normal;\r\n\r\n// Uniforms\r\nuniform mat4 worldViewProjection;\r\n\r\nuniform float width;\r\nuniform float aspectRatio;\r\n\r\nvoid main(void) {\r\n\tvec4 viewPosition = worldViewProjection * vec4(position, 1.0);\r\n\tvec4 viewPositionNext = worldViewProjection * vec4(normal.xyz, 1.0);\r\n\r\n\tvec2 currentScreen = viewPosition.xy / viewPosition.w;\r\n\tvec2 nextScreen = viewPositionNext.xy / viewPositionNext.w;\r\n\r\n\tcurrentScreen.x *= aspectRatio;\r\n\tnextScreen.x *= aspectRatio;\r\n\r\n\tvec2 dir = normalize(nextScreen - currentScreen);\r\n\tvec2 normalDir = vec2(-dir.y, dir.x);\r\n\r\n\tnormalDir *= width / 2.0;\r\n\tnormalDir.x /= aspectRatio;\r\n\r\n\tvec4 offset = vec4(normalDir * normal.w, 0.0, 0.0);\r\n\tgl_Position = viewPosition + offset;\r\n}";
	if(__map_reserved["marbletexture.fragment"] != null) _g.setReserved("marbletexture.fragment","precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfTilesHeight;\r\nuniform float numberOfTilesWidth;\r\nuniform float amplitude;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nconst vec3 tileSize = vec3(1.1, 1.0, 1.1);\r\nconst vec3 tilePct = vec3(0.98, 1.0, 0.98);\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat turbulence(vec2 P)\r\n{\r\n\tfloat val = 0.0;\r\n\tfloat freq = 1.0;\r\n\tfor (int i = 0; i < 4; i++)\r\n\t{\r\n\t\tval += abs(noise(P*freq) / freq);\r\n\t\tfreq *= 2.07;\r\n\t}\r\n\treturn val;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvec3 marble_color(float x)\r\n{\r\n\tvec3 col;\r\n\tx = 0.5*(x + 1.);\r\n\tx = sqrt(x);             \r\n\tx = sqrt(x);\r\n\tx = sqrt(x);\r\n\tcol = vec3(.2 + .75*x);  \r\n\tcol.b *= 0.95;           \r\n\treturn col;\r\n}\r\n\r\nvoid main()\r\n{\r\n\tfloat brickW = 1.0 / numberOfTilesWidth;\r\n\tfloat brickH = 1.0 / numberOfTilesHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.01;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) / brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat t = 6.28 * brickvUV.x / (tileSize.x + noise(vec2(vUV)*6.0));\r\n\t\tt += amplitude * turbulence(brickvUV.xy);\r\n\t\tt = sin(t);\r\n\t\tcolor = marble_color(t);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 0.0);\r\n}"); else _g.h["marbletexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfTilesHeight;\r\nuniform float numberOfTilesWidth;\r\nuniform float amplitude;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nconst vec3 tileSize = vec3(1.1, 1.0, 1.1);\r\nconst vec3 tilePct = vec3(0.98, 1.0, 0.98);\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat turbulence(vec2 P)\r\n{\r\n\tfloat val = 0.0;\r\n\tfloat freq = 1.0;\r\n\tfor (int i = 0; i < 4; i++)\r\n\t{\r\n\t\tval += abs(noise(P*freq) / freq);\r\n\t\tfreq *= 2.07;\r\n\t}\r\n\treturn val;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvec3 marble_color(float x)\r\n{\r\n\tvec3 col;\r\n\tx = 0.5*(x + 1.);\r\n\tx = sqrt(x);             \r\n\tx = sqrt(x);\r\n\tx = sqrt(x);\r\n\tcol = vec3(.2 + .75*x);  \r\n\tcol.b *= 0.95;           \r\n\treturn col;\r\n}\r\n\r\nvoid main()\r\n{\r\n\tfloat brickW = 1.0 / numberOfTilesWidth;\r\n\tfloat brickH = 1.0 / numberOfTilesHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.01;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) / brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat t = 6.28 * brickvUV.x / (tileSize.x + noise(vec2(vUV)*6.0));\r\n\t\tt += amplitude * turbulence(brickvUV.xy);\r\n\t\tt = sin(t);\r\n\t\tcolor = marble_color(t);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 0.0);\r\n}";
	if(__map_reserved["outline.fragment"] != null) _g.setReserved("outline.fragment","precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["outline.fragment"] = "precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["outline.vertex"] != null) _g.setReserved("outline.vertex","precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\nuniform mat4 mBones[BonesPerMesh];\r\n\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#if NUM_BONE_INFLUENCERS > 4\r\nattribute vec4 matricesIndicesExtra;\r\nattribute vec4 matricesWeightsExtra;\r\n#endif\r\n#endif\r\n\r\n// Uniform\r\nuniform float offset;\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n\tvec3 offsetPosition = position + normal * offset;\r\n\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n#if NUM_BONE_INFLUENCERS > 1\r\n\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 2\r\n\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 3\r\n\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n#endif\t\r\n\r\n#if NUM_BONE_INFLUENCERS > 4\r\n\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 5\r\n\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 6\r\n\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 7\r\n\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(offsetPosition, 1.0);\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}\r\n"); else _g.h["outline.vertex"] = "precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\nuniform mat4 mBones[BonesPerMesh];\r\n\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#if NUM_BONE_INFLUENCERS > 4\r\nattribute vec4 matricesIndicesExtra;\r\nattribute vec4 matricesWeightsExtra;\r\n#endif\r\n#endif\r\n\r\n// Uniform\r\nuniform float offset;\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n\tvec3 offsetPosition = position + normal * offset;\r\n\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n#if NUM_BONE_INFLUENCERS > 1\r\n\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 2\r\n\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 3\r\n\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n#endif\t\r\n\r\n#if NUM_BONE_INFLUENCERS > 4\r\n\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 5\r\n\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 6\r\n\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 7\r\n\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(offsetPosition, 1.0);\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}\r\n";
	if(__map_reserved["particles.fragment"] != null) _g.setReserved("particles.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\nuniform vec4 textureMask;\r\nuniform sampler2D diffuseSampler;\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tgl_FragColor = (baseColor * textureMask + (vec4(1., 1., 1., 1.) - textureMask)) * vColor;\r\n}"); else _g.h["particles.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\nuniform vec4 textureMask;\r\nuniform sampler2D diffuseSampler;\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tgl_FragColor = (baseColor * textureMask + (vec4(1., 1., 1., 1.) - textureMask)) * vColor;\r\n}";
	if(__map_reserved["particles.vertex"] != null) _g.setReserved("particles.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec4 color;\r\nattribute vec4 options;\r\n\r\n// Uniforms\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nuniform mat4 invView;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position, 1.0)).xyz; \r\n\tvec3 cornerPos;\r\n\tfloat size = options.y;\r\n\tfloat angle = options.x;\r\n\tvec2 offset = options.zw;\r\n\r\n\tcornerPos = vec3(offset.x - 0.5, offset.y  - 0.5, 0.) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\t\r\n\tvColor = color;\r\n\tvUV = offset;\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tvec4 worldPos = invView * vec4(viewPos, 1.0);\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n}"); else _g.h["particles.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec4 color;\r\nattribute vec4 options;\r\n\r\n// Uniforms\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nuniform mat4 invView;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position, 1.0)).xyz; \r\n\tvec3 cornerPos;\r\n\tfloat size = options.y;\r\n\tfloat angle = options.x;\r\n\tvec2 offset = options.zw;\r\n\r\n\tcornerPos = vec3(offset.x - 0.5, offset.y  - 0.5, 0.) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\t\r\n\tvColor = color;\r\n\tvUV = offset;\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tvec4 worldPos = invView * vec4(viewPos, 1.0);\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n}";
	if(__map_reserved["pass.fragment"] != null) _g.setReserved("pass.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tgl_FragColor = texture2D(textureSampler, vUV);\r\n}"); else _g.h["pass.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tgl_FragColor = texture2D(textureSampler, vUV);\r\n}";
	if(__map_reserved["pbr.fragment"] != null) _g.setReserved("pbr.fragment","precision highp float;\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec4 vAlbedoColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec3 baseColor = vAlbedoColor.rgb;\r\n\r\n\t// Alpha\r\n\tfloat alpha = vAlbedoColor.a;\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor *= vColor.rgb;\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n\t// Composition\r\n    vec4 color = vec4(clamp(baseColor, 0.0, 1.0), alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["pbr.fragment"] = "precision highp float;\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec4 vAlbedoColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec3 baseColor = vAlbedoColor.rgb;\r\n\r\n\t// Alpha\r\n\tfloat alpha = vAlbedoColor.a;\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor *= vColor.rgb;\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n\t// Composition\r\n    vec4 color = vec4(clamp(baseColor, 0.0, 1.0), alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["pbr.vertex"] != null) _g.setReserved("pbr.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\t\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n\r\n\t// Point size\r\n#ifdef POINTSIZE\r\n\tgl_PointSize = pointSize;\r\n#endif\r\n}"); else _g.h["pbr.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\t\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n\r\n\t// Point size\r\n#ifdef POINTSIZE\r\n\tgl_PointSize = pointSize;\r\n#endif\r\n}";
	if(__map_reserved["postprocess.vertex"] != null) _g.setReserved("postprocess.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}"); else _g.h["postprocess.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["procedural.vertex"] != null) _g.setReserved("procedural.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\tvPosition = position;\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}"); else _g.h["procedural.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\tvPosition = position;\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["refraction.fragment"] != null) _g.setReserved("refraction.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D refractionSampler;\r\n\r\n// Parameters\r\nuniform vec3 baseColor;\r\nuniform float depth;\r\nuniform float colorLevel;\r\n\r\nvoid main() {\r\n\tfloat ref = 1.0 - texture2D(refractionSampler, vUV).r;\r\n\r\n\tvec2 uv = vUV - vec2(0.5);\r\n\tvec2 offset = uv * depth * ref;\r\n\tvec3 sourceColor = texture2D(textureSampler, vUV - offset).rgb;\r\n\r\n\tgl_FragColor = vec4(sourceColor + sourceColor * ref * colorLevel, 1.0);\r\n}"); else _g.h["refraction.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D refractionSampler;\r\n\r\n// Parameters\r\nuniform vec3 baseColor;\r\nuniform float depth;\r\nuniform float colorLevel;\r\n\r\nvoid main() {\r\n\tfloat ref = 1.0 - texture2D(refractionSampler, vUV).r;\r\n\r\n\tvec2 uv = vUV - vec2(0.5);\r\n\tvec2 offset = uv * depth * ref;\r\n\tvec3 sourceColor = texture2D(textureSampler, vUV - offset).rgb;\r\n\r\n\tgl_FragColor = vec4(sourceColor + sourceColor * ref * colorLevel, 1.0);\r\n}";
	if(__map_reserved["roadtexture.fragment"] != null) _g.setReserved("roadtexture.fragment","precision highp float;\r\n\r\nvarying vec2 vUV;                    \r\nuniform vec3 roadColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(gl_FragCoord.y * 100.0 , fbm(vUV * 2.0));\r\n\tvec3 color = roadColor * ratioy;\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}"); else _g.h["roadtexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vUV;                    \r\nuniform vec3 roadColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(gl_FragCoord.y * 100.0 , fbm(vUV * 2.0));\r\n\tvec3 color = roadColor * ratioy;\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}";
	if(__map_reserved["shadowMap.fragment"] != null) _g.setReserved("shadowMap.fragment","precision highp float;\r\n\r\nvec4 pack(float depth)\r\n{\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(depth * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nvec2 packHalf(float depth) \r\n{ \r\n\tconst vec2 bitOffset = vec2(1.0 / 255., 0.);\r\n\tvec2 color = vec2(depth, fract(depth * 255.));\r\n\r\n\treturn color - (color.yy * bitOffset);\r\n}\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\tfloat depth = vPosition.z / vPosition.w;\r\n\tdepth = depth * 0.5 + 0.5;\r\n\r\n#ifdef VSM\r\n\tfloat moment1 = depth;\r\n\tfloat moment2 = moment1 * moment1;\r\n\r\n\tgl_FragColor = vec4(packHalf(moment1), packHalf(moment2));\r\n#else\r\n\tgl_FragColor = pack(depth);\r\n#endif\r\n}"); else _g.h["shadowMap.fragment"] = "precision highp float;\r\n\r\nvec4 pack(float depth)\r\n{\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(depth * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nvec2 packHalf(float depth) \r\n{ \r\n\tconst vec2 bitOffset = vec2(1.0 / 255., 0.);\r\n\tvec2 color = vec2(depth, fract(depth * 255.));\r\n\r\n\treturn color - (color.yy * bitOffset);\r\n}\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\tfloat depth = vPosition.z / vPosition.w;\r\n\tdepth = depth * 0.5 + 0.5;\r\n\r\n#ifdef VSM\r\n\tfloat moment1 = depth;\r\n\tfloat moment2 = moment1 * moment1;\r\n\r\n\tgl_FragColor = vec4(packHalf(moment1), packHalf(moment2));\r\n#else\r\n\tgl_FragColor = pack(depth);\r\n#endif\r\n}";
	if(__map_reserved["shadowMap.vertex"] != null) _g.setReserved("shadowMap.vertex","precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n// having bone influencers implies you have bones\r\nuniform mat4 mBones[BonesPerMesh];\r\n\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#if NUM_BONE_INFLUENCERS > 4\r\nattribute vec4 matricesIndicesExtra;\r\nattribute vec4 matricesWeightsExtra;\r\n#endif\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n#if NUM_BONE_INFLUENCERS > 1\r\n\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 2\r\n\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 3\r\n\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n#endif\t\r\n\r\n#if NUM_BONE_INFLUENCERS > 4\r\n\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 5\r\n\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 6\r\n\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 7\r\n\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tvPosition = viewProjection * finalWorld * vec4(position, 1.0);\r\n\tgl_Position = vPosition;\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}"); else _g.h["shadowMap.vertex"] = "precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n// having bone influencers implies you have bones\r\nuniform mat4 mBones[BonesPerMesh];\r\n\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#if NUM_BONE_INFLUENCERS > 4\r\nattribute vec4 matricesIndicesExtra;\r\nattribute vec4 matricesWeightsExtra;\r\n#endif\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n#if NUM_BONE_INFLUENCERS > 1\r\n\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 2\r\n\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 3\r\n\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n#endif\t\r\n\r\n#if NUM_BONE_INFLUENCERS > 4\r\n\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 5\r\n\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 6\r\n\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 7\r\n\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tvPosition = viewProjection * finalWorld * vec4(position, 1.0);\r\n\tgl_Position = vPosition;\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}";
	if(__map_reserved["sprites.fragment"] != null) _g.setReserved("sprites.fragment","precision highp float;\r\n\r\nuniform bool alphaTest;\r\n\r\nvarying vec4 vColor;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn min(1., max(0., fogCoeff));\r\n}\r\n#endif\r\n\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tif (alphaTest) \r\n\t{\r\n\t\tif (baseColor.a < 0.95)\r\n\t\t\tdiscard;\r\n\t}\r\n\r\n\tbaseColor *= vColor;\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tbaseColor.rgb = fog * baseColor.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = baseColor;\r\n}"); else _g.h["sprites.fragment"] = "precision highp float;\r\n\r\nuniform bool alphaTest;\r\n\r\nvarying vec4 vColor;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn min(1., max(0., fogCoeff));\r\n}\r\n#endif\r\n\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tif (alphaTest) \r\n\t{\r\n\t\tif (baseColor.a < 0.95)\r\n\t\t\tdiscard;\r\n\t}\r\n\r\n\tbaseColor *= vColor;\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tbaseColor.rgb = fog * baseColor.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = baseColor;\r\n}";
	if(__map_reserved["sprites.vertex"] != null) _g.setReserved("sprites.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec4 position;\r\nattribute vec4 options;\r\nattribute vec4 cellInfo;\r\nattribute vec4 color;\r\n\r\n// Uniforms\r\nuniform vec2 textureInfos;\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position.xyz, 1.0)).xyz; \r\n\tvec2 cornerPos;\r\n\t\r\n\tfloat angle = position.w;\r\n\tvec2 size = vec2(options.x, options.y);\r\n\tvec2 offset = options.zw;\r\n\tvec2 uvScale = textureInfos.xy;\r\n\r\n\tcornerPos = vec2(offset.x - 0.5, offset.y  - 0.5) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\r\n\t// Color\r\n\tvColor = color;\r\n\t\r\n\t// Texture\r\n\tvec2 uvOffset = vec2(abs(offset.x - cellInfo.x), 1.0 - abs(offset.y - cellInfo.y));\r\n\r\n\tvUV = (uvOffset + cellInfo.zw) * uvScale;\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = viewPos.z;\r\n#endif\r\n}"); else _g.h["sprites.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec4 position;\r\nattribute vec4 options;\r\nattribute vec4 cellInfo;\r\nattribute vec4 color;\r\n\r\n// Uniforms\r\nuniform vec2 textureInfos;\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position.xyz, 1.0)).xyz; \r\n\tvec2 cornerPos;\r\n\t\r\n\tfloat angle = position.w;\r\n\tvec2 size = vec2(options.x, options.y);\r\n\tvec2 offset = options.zw;\r\n\tvec2 uvScale = textureInfos.xy;\r\n\r\n\tcornerPos = vec2(offset.x - 0.5, offset.y  - 0.5) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\r\n\t// Color\r\n\tvColor = color;\r\n\t\r\n\t// Texture\r\n\tvec2 uvOffset = vec2(abs(offset.x - cellInfo.x), 1.0 - abs(offset.y - cellInfo.y));\r\n\r\n\tvUV = (uvOffset + cellInfo.zw) * uvScale;\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = viewPos.z;\r\n#endif\r\n}";
	if(__map_reserved["ssao.fragment"] != null) _g.setReserved("ssao.fragment","precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D randomSampler;\r\n\r\nuniform float randTextureTiles;\r\nuniform float samplesFactor;\r\nuniform vec3 sampleSphere[SAMPLES];\r\n\r\nuniform float totalStrength;\r\nuniform float radius;\r\nuniform float area;\r\nuniform float fallOff;\r\nuniform float base;\r\n\r\nvarying vec2 vUV;\r\n\r\nvec3 normalFromDepth(float depth, vec2 coords) {\r\n\tvec2 offset1 = vec2(0.0, radius);\r\n\tvec2 offset2 = vec2(radius, 0.0);\r\n\r\n\tfloat depth1 = texture2D(textureSampler, coords + offset1).r;\r\n\tfloat depth2 = texture2D(textureSampler, coords + offset2).r;\r\n\r\n    vec3 p1 = vec3(offset1, depth1 - depth);\r\n    vec3 p2 = vec3(offset2, depth2 - depth);\r\n\r\n    vec3 normal = cross(p1, p2);\r\n\tnormal.z = -normal.z;\r\n\r\n    return normalize(normal);\r\n}\r\n\r\nvoid main()\r\n{\r\n\tvec3 random = normalize(texture2D(randomSampler, vUV * randTextureTiles).rgb);\r\n\tfloat depth = texture2D(textureSampler, vUV).r;\r\n\tvec3 position = vec3(vUV, depth);\r\n\tvec3 normal = normalFromDepth(depth, vUV);\r\n\tfloat radiusDepth = radius / depth;\r\n\tfloat occlusion = 0.0;\r\n\r\n\tvec3 ray;\r\n\tvec3 hemiRay;\r\n\tfloat occlusionDepth;\r\n\tfloat difference;\r\n\r\n\tfor (int i = 0; i < SAMPLES; i++)\r\n\t{\r\n\t\tray = radiusDepth * reflect(sampleSphere[i], random);\r\n\t\themiRay = position + sign(dot(ray, normal)) * ray;\r\n\r\n\t\tocclusionDepth = texture2D(textureSampler, clamp(hemiRay.xy, vec2(0.001, 0.001), vec2(0.999, 0.999))).r;\r\n\t\tdifference = depth - occlusionDepth;\r\n\r\n\t\tocclusion += step(fallOff, difference) * (1.0 - smoothstep(fallOff, area, difference));\r\n\t}\r\n\r\n\tfloat ao = 1.0 - totalStrength * occlusion * samplesFactor;\r\n\r\n\tfloat result = clamp(ao + base, 0.0, 1.0);\r\n\tgl_FragColor.r = result;\r\n\tgl_FragColor.g = result;\r\n\tgl_FragColor.b = result;\r\n\tgl_FragColor.a = 1.0;\r\n}\r\n"); else _g.h["ssao.fragment"] = "precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D randomSampler;\r\n\r\nuniform float randTextureTiles;\r\nuniform float samplesFactor;\r\nuniform vec3 sampleSphere[SAMPLES];\r\n\r\nuniform float totalStrength;\r\nuniform float radius;\r\nuniform float area;\r\nuniform float fallOff;\r\nuniform float base;\r\n\r\nvarying vec2 vUV;\r\n\r\nvec3 normalFromDepth(float depth, vec2 coords) {\r\n\tvec2 offset1 = vec2(0.0, radius);\r\n\tvec2 offset2 = vec2(radius, 0.0);\r\n\r\n\tfloat depth1 = texture2D(textureSampler, coords + offset1).r;\r\n\tfloat depth2 = texture2D(textureSampler, coords + offset2).r;\r\n\r\n    vec3 p1 = vec3(offset1, depth1 - depth);\r\n    vec3 p2 = vec3(offset2, depth2 - depth);\r\n\r\n    vec3 normal = cross(p1, p2);\r\n\tnormal.z = -normal.z;\r\n\r\n    return normalize(normal);\r\n}\r\n\r\nvoid main()\r\n{\r\n\tvec3 random = normalize(texture2D(randomSampler, vUV * randTextureTiles).rgb);\r\n\tfloat depth = texture2D(textureSampler, vUV).r;\r\n\tvec3 position = vec3(vUV, depth);\r\n\tvec3 normal = normalFromDepth(depth, vUV);\r\n\tfloat radiusDepth = radius / depth;\r\n\tfloat occlusion = 0.0;\r\n\r\n\tvec3 ray;\r\n\tvec3 hemiRay;\r\n\tfloat occlusionDepth;\r\n\tfloat difference;\r\n\r\n\tfor (int i = 0; i < SAMPLES; i++)\r\n\t{\r\n\t\tray = radiusDepth * reflect(sampleSphere[i], random);\r\n\t\themiRay = position + sign(dot(ray, normal)) * ray;\r\n\r\n\t\tocclusionDepth = texture2D(textureSampler, clamp(hemiRay.xy, vec2(0.001, 0.001), vec2(0.999, 0.999))).r;\r\n\t\tdifference = depth - occlusionDepth;\r\n\r\n\t\tocclusion += step(fallOff, difference) * (1.0 - smoothstep(fallOff, area, difference));\r\n\t}\r\n\r\n\tfloat ao = 1.0 - totalStrength * occlusion * samplesFactor;\r\n\r\n\tfloat result = clamp(ao + base, 0.0, 1.0);\r\n\tgl_FragColor.r = result;\r\n\tgl_FragColor.g = result;\r\n\tgl_FragColor.b = result;\r\n\tgl_FragColor.a = 1.0;\r\n}\r\n";
	if(__map_reserved["ssaoCombine.fragment"] != null) _g.setReserved("ssaoCombine.fragment","precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D originalColor;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n\tvec4 ssaoColor = texture2D(textureSampler, vUV);\r\n\tvec4 sceneColor = texture2D(originalColor, vUV);\r\n\r\n\tgl_FragColor = sceneColor * ssaoColor;\r\n}\r\n"); else _g.h["ssaoCombine.fragment"] = "precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D originalColor;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n\tvec4 ssaoColor = texture2D(textureSampler, vUV);\r\n\tvec4 sceneColor = texture2D(originalColor, vUV);\r\n\r\n\tgl_FragColor = sceneColor * ssaoColor;\r\n}\r\n";
	if(__map_reserved["stereoscopicInterlace.fragment"] != null) _g.setReserved("stereoscopicInterlace.fragment","precision highp float;\r\n\r\nconst vec3 TWO = vec3(2.0, 2.0, 2.0);\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D camASampler;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 stepSize;\r\n\r\nvoid main(void)\r\n{\r\n    bool useCamB;\r\n    vec2 texCoord1;\r\n    vec2 texCoord2;\r\n    \r\n    vec3 frag1;\r\n    vec3 frag2;\r\n    \r\n#ifdef IS_STEREOSCOPIC_HORIZ\r\n\t    useCamB = vUV.x > 0.5;\r\n\t    texCoord1 = vec2(useCamB ? (vUV.x - 0.5) * 2.0 : vUV.x * 2.0, vUV.y);\r\n\t    texCoord2 = vec2(texCoord1.x + stepSize.x, vUV.y);\r\n#else\r\n\t    useCamB = vUV.y > 0.5;\r\n\t    texCoord1 = vec2(vUV.x, useCamB ? (vUV.y - 0.5) * 2.0 : vUV.y * 2.0);\r\n\t    texCoord2 = vec2(vUV.x, texCoord1.y + stepSize.y);\r\n#endif\r\n    \r\n    // cannot assign a sampler to a variable, so must duplicate texture accesses\r\n    if (useCamB){\r\n        frag1 = texture2D(textureSampler, texCoord1).rgb;\r\n        frag2 = texture2D(textureSampler, texCoord2).rgb;\r\n    }else{\r\n        frag1 = texture2D(camASampler   , texCoord1).rgb;\r\n        frag2 = texture2D(camASampler   , texCoord2).rgb;\r\n    }\r\n    \r\n    gl_FragColor = vec4((frag1 + frag2) / TWO, 1.0);\r\n}"); else _g.h["stereoscopicInterlace.fragment"] = "precision highp float;\r\n\r\nconst vec3 TWO = vec3(2.0, 2.0, 2.0);\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D camASampler;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 stepSize;\r\n\r\nvoid main(void)\r\n{\r\n    bool useCamB;\r\n    vec2 texCoord1;\r\n    vec2 texCoord2;\r\n    \r\n    vec3 frag1;\r\n    vec3 frag2;\r\n    \r\n#ifdef IS_STEREOSCOPIC_HORIZ\r\n\t    useCamB = vUV.x > 0.5;\r\n\t    texCoord1 = vec2(useCamB ? (vUV.x - 0.5) * 2.0 : vUV.x * 2.0, vUV.y);\r\n\t    texCoord2 = vec2(texCoord1.x + stepSize.x, vUV.y);\r\n#else\r\n\t    useCamB = vUV.y > 0.5;\r\n\t    texCoord1 = vec2(vUV.x, useCamB ? (vUV.y - 0.5) * 2.0 : vUV.y * 2.0);\r\n\t    texCoord2 = vec2(vUV.x, texCoord1.y + stepSize.y);\r\n#endif\r\n    \r\n    // cannot assign a sampler to a variable, so must duplicate texture accesses\r\n    if (useCamB){\r\n        frag1 = texture2D(textureSampler, texCoord1).rgb;\r\n        frag2 = texture2D(textureSampler, texCoord2).rgb;\r\n    }else{\r\n        frag1 = texture2D(camASampler   , texCoord1).rgb;\r\n        frag2 = texture2D(camASampler   , texCoord2).rgb;\r\n    }\r\n    \r\n    gl_FragColor = vec4((frag1 + frag2) / TWO, 1.0);\r\n}";
	if(__map_reserved["tonemap.fragment"] != null) _g.setReserved("tonemap.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Constants\r\nuniform float _ExposureAdjustment;\r\n\r\n#if defined(HABLE_TONEMAPPING)\r\n    const float A = 0.15;\r\n    const float B = 0.50;\r\n    const float C = 0.10;\r\n    const float D = 0.20;\r\n    const float E = 0.02;\r\n    const float F = 0.30;\r\n    const float W = 11.2;\r\n#endif\r\n\r\nfloat Luminance(vec3 c)\r\n{\r\n    return dot(c, vec3(0.22, 0.707, 0.071));\r\n}\r\n\r\nvoid main(void) \r\n{\r\n    vec3 colour = texture2D(textureSampler, vUV).rgb;\r\n\r\n#if defined(REINHARD_TONEMAPPING)\r\n\r\n    float lum = Luminance(colour.rgb); \r\n    float lumTm = lum * _ExposureAdjustment;\r\n    float scale = lumTm / (1.0 + lumTm);  \r\n\r\n    colour *= scale / lum;\r\n\r\n#elif defined(HABLE_TONEMAPPING)\r\n\r\n    colour *= _ExposureAdjustment;\r\n\r\n    const float ExposureBias = 2.0;\r\n    vec3 x = ExposureBias * colour;\r\n\r\n    vec3 curr = ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;\r\n    \r\n    x = vec3(W, W, W);\r\n    vec3 whiteScale = 1.0 / (((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F);\r\n    colour = curr * whiteScale;\r\n\r\n#elif defined(OPTIMIZED_HEJIDAWSON_TONEMAPPING)\r\n\r\n    colour *= _ExposureAdjustment;\r\n    \r\n    vec3 X = max(vec3(0.0, 0.0, 0.0), colour - 0.004);\r\n    vec3 retColor = (X * (6.2 * X + 0.5)) / (X * (6.2 * X + 1.7) + 0.06);\r\n\r\n    colour = retColor * retColor;\r\n\r\n#elif defined(PHOTOGRAPHIC_TONEMAPPING)\r\n\r\n    colour =  vec3(1.0, 1.0, 1.0) - exp2(-_ExposureAdjustment * colour);\r\n\r\n#endif\r\n\r\n\tgl_FragColor = vec4(colour.rgb, 1.0);\r\n}"); else _g.h["tonemap.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Constants\r\nuniform float _ExposureAdjustment;\r\n\r\n#if defined(HABLE_TONEMAPPING)\r\n    const float A = 0.15;\r\n    const float B = 0.50;\r\n    const float C = 0.10;\r\n    const float D = 0.20;\r\n    const float E = 0.02;\r\n    const float F = 0.30;\r\n    const float W = 11.2;\r\n#endif\r\n\r\nfloat Luminance(vec3 c)\r\n{\r\n    return dot(c, vec3(0.22, 0.707, 0.071));\r\n}\r\n\r\nvoid main(void) \r\n{\r\n    vec3 colour = texture2D(textureSampler, vUV).rgb;\r\n\r\n#if defined(REINHARD_TONEMAPPING)\r\n\r\n    float lum = Luminance(colour.rgb); \r\n    float lumTm = lum * _ExposureAdjustment;\r\n    float scale = lumTm / (1.0 + lumTm);  \r\n\r\n    colour *= scale / lum;\r\n\r\n#elif defined(HABLE_TONEMAPPING)\r\n\r\n    colour *= _ExposureAdjustment;\r\n\r\n    const float ExposureBias = 2.0;\r\n    vec3 x = ExposureBias * colour;\r\n\r\n    vec3 curr = ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;\r\n    \r\n    x = vec3(W, W, W);\r\n    vec3 whiteScale = 1.0 / (((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F);\r\n    colour = curr * whiteScale;\r\n\r\n#elif defined(OPTIMIZED_HEJIDAWSON_TONEMAPPING)\r\n\r\n    colour *= _ExposureAdjustment;\r\n    \r\n    vec3 X = max(vec3(0.0, 0.0, 0.0), colour - 0.004);\r\n    vec3 retColor = (X * (6.2 * X + 0.5)) / (X * (6.2 * X + 1.7) + 0.06);\r\n\r\n    colour = retColor * retColor;\r\n\r\n#elif defined(PHOTOGRAPHIC_TONEMAPPING)\r\n\r\n    colour =  vec3(1.0, 1.0, 1.0) - exp2(-_ExposureAdjustment * colour);\r\n\r\n#endif\r\n\r\n\tgl_FragColor = vec4(colour.rgb, 1.0);\r\n}";
	if(__map_reserved["volumetricLightScattering.fragment"] != null) _g.setReserved("volumetricLightScattering.fragment","precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D lightScatteringSampler;\r\n\r\nuniform float decay;\r\nuniform float exposure;\r\nuniform float weight;\r\nuniform float density;\r\nuniform vec2 meshPositionOnScreen;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n    vec2 tc = vUV;\r\n\tvec2 deltaTexCoord = (tc - meshPositionOnScreen.xy);\r\n    deltaTexCoord *= 1.0 / float(NUM_SAMPLES) * density;\r\n\r\n    float illuminationDecay = 1.0;\r\n\r\n\tvec4 color = texture2D(lightScatteringSampler, tc) * 0.4;\r\n\r\n    for(int i=0; i < NUM_SAMPLES; i++) {\r\n        tc -= deltaTexCoord;\r\n\t\tvec4 sample = texture2D(lightScatteringSampler, tc) * 0.4;\r\n        sample *= illuminationDecay * weight;\r\n        color += sample;\r\n        illuminationDecay *= decay;\r\n    }\r\n\r\n    vec4 realColor = texture2D(textureSampler, vUV);\r\n    gl_FragColor = ((vec4((vec3(color.r, color.g, color.b) * exposure), 1)) + (realColor * (1.5 - 0.4)));\r\n}\r\n"); else _g.h["volumetricLightScattering.fragment"] = "precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D lightScatteringSampler;\r\n\r\nuniform float decay;\r\nuniform float exposure;\r\nuniform float weight;\r\nuniform float density;\r\nuniform vec2 meshPositionOnScreen;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n    vec2 tc = vUV;\r\n\tvec2 deltaTexCoord = (tc - meshPositionOnScreen.xy);\r\n    deltaTexCoord *= 1.0 / float(NUM_SAMPLES) * density;\r\n\r\n    float illuminationDecay = 1.0;\r\n\r\n\tvec4 color = texture2D(lightScatteringSampler, tc) * 0.4;\r\n\r\n    for(int i=0; i < NUM_SAMPLES; i++) {\r\n        tc -= deltaTexCoord;\r\n\t\tvec4 sample = texture2D(lightScatteringSampler, tc) * 0.4;\r\n        sample *= illuminationDecay * weight;\r\n        color += sample;\r\n        illuminationDecay *= decay;\r\n    }\r\n\r\n    vec4 realColor = texture2D(textureSampler, vUV);\r\n    gl_FragColor = ((vec4((vec3(color.r, color.g, color.b) * exposure), 1)) + (realColor * (1.5 - 0.4)));\r\n}\r\n";
	if(__map_reserved["volumetricLightScatteringPass.fragment"] != null) _g.setReserved("volumetricLightScatteringPass.fragment","precision highp float;\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\n#if defined(DIFFUSE_COLOR_RENDER)\r\nuniform vec3 color;\r\n#endif\r\n\r\n#if defined(OPACITY)\r\nuniform sampler2D opacitySampler;\r\nuniform float opacityLevel;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n\tvec4 diffuseColor = texture2D(diffuseSampler, vUV);\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n\tif (diffuseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityColor = texture2D(opacitySampler, vUV);\r\n\tfloat alpha = 1.0;\r\n\r\n\t#ifdef OPACITYRGB\r\n\topacityColor.rgb = opacityColor.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityColor.x + opacityColor.y + opacityColor.z) * opacityLevel;\r\n\t#else\r\n\talpha *= opacityColor.a * opacityLevel;\r\n\t#endif\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = vec4(diffuseColor.rgb, alpha);\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, alpha);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, alpha);\r\n\t#endif\r\n\r\n\tgl_FragColor.a = alpha;\r\n#else\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = diffuseColor;\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, 1.0);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t#endif\r\n#endif\r\n\r\n}\r\n"); else _g.h["volumetricLightScatteringPass.fragment"] = "precision highp float;\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\n#if defined(DIFFUSE_COLOR_RENDER)\r\nuniform vec3 color;\r\n#endif\r\n\r\n#if defined(OPACITY)\r\nuniform sampler2D opacitySampler;\r\nuniform float opacityLevel;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n\tvec4 diffuseColor = texture2D(diffuseSampler, vUV);\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n\tif (diffuseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityColor = texture2D(opacitySampler, vUV);\r\n\tfloat alpha = 1.0;\r\n\r\n\t#ifdef OPACITYRGB\r\n\topacityColor.rgb = opacityColor.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityColor.x + opacityColor.y + opacityColor.z) * opacityLevel;\r\n\t#else\r\n\talpha *= opacityColor.a * opacityLevel;\r\n\t#endif\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = vec4(diffuseColor.rgb, alpha);\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, alpha);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, alpha);\r\n\t#endif\r\n\r\n\tgl_FragColor.a = alpha;\r\n#else\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = diffuseColor;\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, 1.0);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t#endif\r\n#endif\r\n\r\n}\r\n";
	if(__map_reserved["vrDistortionCorrection.fragment"] != null) _g.setReserved("vrDistortionCorrection.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 LensCenter;\r\nuniform vec2 Scale;\r\nuniform vec2 ScaleIn;\r\nuniform vec4 HmdWarpParam;\r\n\r\nvec2 HmdWarp(vec2 in01) {\r\n\r\n\tvec2 theta = (in01 - LensCenter) * ScaleIn; // Scales to [-1, 1]\r\n\tfloat rSq = theta.x * theta.x + theta.y * theta.y;\r\n\tvec2 rvector = theta * (HmdWarpParam.x + HmdWarpParam.y * rSq + HmdWarpParam.z * rSq * rSq + HmdWarpParam.w * rSq * rSq * rSq);\r\n\treturn LensCenter + Scale * rvector;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 tc = HmdWarp(vUV);\r\n\tif (tc.x <0.0 || tc.x>1.0 || tc.y<0.0 || tc.y>1.0)\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\telse{\r\n\t\tgl_FragColor = vec4(texture2D(textureSampler, tc).rgb, 1.0);\r\n\t}\r\n}"); else _g.h["vrDistortionCorrection.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 LensCenter;\r\nuniform vec2 Scale;\r\nuniform vec2 ScaleIn;\r\nuniform vec4 HmdWarpParam;\r\n\r\nvec2 HmdWarp(vec2 in01) {\r\n\r\n\tvec2 theta = (in01 - LensCenter) * ScaleIn; // Scales to [-1, 1]\r\n\tfloat rSq = theta.x * theta.x + theta.y * theta.y;\r\n\tvec2 rvector = theta * (HmdWarpParam.x + HmdWarpParam.y * rSq + HmdWarpParam.z * rSq * rSq + HmdWarpParam.w * rSq * rSq * rSq);\r\n\treturn LensCenter + Scale * rvector;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 tc = HmdWarp(vUV);\r\n\tif (tc.x <0.0 || tc.x>1.0 || tc.y<0.0 || tc.y>1.0)\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\telse{\r\n\t\tgl_FragColor = vec4(texture2D(textureSampler, tc).rgb, 1.0);\r\n\t}\r\n}";
	if(__map_reserved["woodtexture.fragment"] != null) _g.setReserved("woodtexture.fragment","precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float ampScale;\r\nuniform vec3 woodColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(vUV.x * ampScale, 2.0 + fbm(vUV * 0.8));\r\n\tvec3 wood = woodColor * ratioy;\r\n\tgl_FragColor = vec4(wood, 1.0);\r\n}"); else _g.h["woodtexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float ampScale;\r\nuniform vec3 woodColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(vUV.x * ampScale, 2.0 + fbm(vUV * 0.8));\r\n\tvec3 wood = woodColor * ratioy;\r\n\tgl_FragColor = vec4(wood, 1.0);\r\n}";
	if(__map_reserved["compose.fragment"] != null) _g.setReserved("compose.fragment","#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\nuniform sampler2D sceneSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float sceneIntensity;\nuniform float glowIntensity;\nuniform float highlightIntensity;\n\nvoid main(void) \n{\n\tvec4 orig = texture2D(sceneSampler, vUV);\n\tvec4 blur = texture2D(textureSampler, vUV);\n\n\tvec4 final = sceneIntensity * orig + glowIntensity * blur + highlightIntensity * blur.a;\n\tfinal.a = 1.0;\n\n\tgl_FragColor = final;\n}"); else _g.h["compose.fragment"] = "#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\nuniform sampler2D sceneSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float sceneIntensity;\nuniform float glowIntensity;\nuniform float highlightIntensity;\n\nvoid main(void) \n{\n\tvec4 orig = texture2D(sceneSampler, vUV);\n\tvec4 blur = texture2D(textureSampler, vUV);\n\n\tvec4 final = sceneIntensity * orig + glowIntensity * blur + highlightIntensity * blur.a;\n\tfinal.a = 1.0;\n\n\tgl_FragColor = final;\n}";
	if(__map_reserved["downsample.fragment"] != null) _g.setReserved("downsample.fragment","#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float highlightThreshold;\n\nfloat highlights(vec3 color)\n{\n\treturn smoothstep(highlightThreshold, 1.0, dot(color, vec3(0.3, 0.59, 0.11)));\n}\n\nvoid main(void) \n{\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\n\tvec4 baseColor = texture2D(textureSampler, vUV + vec2(-1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, 1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(-1.0, 1.0) * texelSize) * 0.25;\n\t\n\tbaseColor.a = highlights(baseColor.rgb);\n\n\tgl_FragColor = baseColor;\n}"); else _g.h["downsample.fragment"] = "#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float highlightThreshold;\n\nfloat highlights(vec3 color)\n{\n\treturn smoothstep(highlightThreshold, 1.0, dot(color, vec3(0.3, 0.59, 0.11)));\n}\n\nvoid main(void) \n{\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\n\tvec4 baseColor = texture2D(textureSampler, vUV + vec2(-1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, 1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(-1.0, 1.0) * texelSize) * 0.25;\n\t\n\tbaseColor.a = highlights(baseColor.rgb);\n\n\tgl_FragColor = baseColor;\n}";
	if(__map_reserved["cellShading.vertex"] != null) _g.setReserved("cellShading.vertex","\n #ifdef GL_ES \n precision highp float; \n #endif \n attribute vec3 position; \n attribute vec3 normal; \n attribute vec2 uv; \n uniform mat4 world; \n uniform mat4 viewProjection; \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n void main(void) { \n vec4 outPosition = viewProjection * world * vec4(position, 1.0); \n gl_Position = outPosition; \n vPositionW = vec3(world * vec4(position, 1.0)); \n vNormalW = normalize(vec3(world * vec4(normal, 0.0))); \n vUV = uv; \n } \n"); else _g.h["cellShading.vertex"] = "\n #ifdef GL_ES \n precision highp float; \n #endif \n attribute vec3 position; \n attribute vec3 normal; \n attribute vec2 uv; \n uniform mat4 world; \n uniform mat4 viewProjection; \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n void main(void) { \n vec4 outPosition = viewProjection * world * vec4(position, 1.0); \n gl_Position = outPosition; \n vPositionW = vec3(world * vec4(position, 1.0)); \n vNormalW = normalize(vec3(world * vec4(normal, 0.0))); \n vUV = uv; \n } \n";
	if(__map_reserved["cellShading.fragment"] != null) _g.setReserved("cellShading.fragment","\n #ifdef GL_ES \n precision highp float; \n #endif \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n uniform float ToonThresholds[4]; \n uniform float ToonBrightnessLevels[5]; \n uniform vec3 vLightPosition; \n uniform vec3 vLightColor; \n uniform sampler2D textureSampler; \n void main(void) { \n vec3 lightVectorW = normalize(vLightPosition - vPositionW); \n float ndl = max(0., dot(vNormalW, lightVectorW)); \n vec3 color = texture2D(textureSampler, vUV).rgb * vLightColor; \n if (ndl > ToonThresholds[0]) { color *= ToonBrightnessLevels[0]; } \n else if (ndl > ToonThresholds[1]) { \n color *= ToonBrightnessLevels[1]; } \n else if (ndl > ToonThresholds[2]) { color *= ToonBrightnessLevels[2]; } \n else if (ndl > ToonThresholds[3]) { color *= ToonBrightnessLevels[3]; } \n else { color *= ToonBrightnessLevels[4]; } \n gl_FragColor = vec4(color, 1.); \n } \n"); else _g.h["cellShading.fragment"] = "\n #ifdef GL_ES \n precision highp float; \n #endif \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n uniform float ToonThresholds[4]; \n uniform float ToonBrightnessLevels[5]; \n uniform vec3 vLightPosition; \n uniform vec3 vLightColor; \n uniform sampler2D textureSampler; \n void main(void) { \n vec3 lightVectorW = normalize(vLightPosition - vPositionW); \n float ndl = max(0., dot(vNormalW, lightVectorW)); \n vec3 color = texture2D(textureSampler, vUV).rgb * vLightColor; \n if (ndl > ToonThresholds[0]) { color *= ToonBrightnessLevels[0]; } \n else if (ndl > ToonThresholds[1]) { \n color *= ToonBrightnessLevels[1]; } \n else if (ndl > ToonThresholds[2]) { color *= ToonBrightnessLevels[2]; } \n else if (ndl > ToonThresholds[3]) { color *= ToonBrightnessLevels[3]; } \n else { color *= ToonBrightnessLevels[4]; } \n gl_FragColor = vec4(color, 1.); \n } \n";
	$r = _g;
	return $r;
}(this));
com_babylonhx_math_Color3.ToGammaSpace = 0.45454545454545453;
com_babylonhx_math_Color3.ToLinearSpace = 2.2;
com_babylonhx_materials_StandardMaterial.DiffuseTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.AmbientTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.OpacityTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.ReflectionTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.EmissiveTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.SpecularTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.BumpTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.FresnelEnabled = true;
com_babylonhx_materials_StandardMaterial.LightmapEnabled = true;
com_babylonhx_materials_StandardMaterial._scaledDiffuse = new com_babylonhx_math_Color3();
com_babylonhx_materials_StandardMaterial._scaledSpecular = new com_babylonhx_math_Color3();
com_babylonhx_materials_StandardMaterialDefines.DIFFUSE = 0;
com_babylonhx_materials_StandardMaterialDefines.AMBIENT = 1;
com_babylonhx_materials_StandardMaterialDefines.OPACITY = 2;
com_babylonhx_materials_StandardMaterialDefines.OPACITYRGB = 3;
com_babylonhx_materials_StandardMaterialDefines.REFLECTION = 4;
com_babylonhx_materials_StandardMaterialDefines.EMISSIVE = 5;
com_babylonhx_materials_StandardMaterialDefines.SPECULAR = 6;
com_babylonhx_materials_StandardMaterialDefines.BUMP = 7;
com_babylonhx_materials_StandardMaterialDefines.SPECULAROVERALPHA = 8;
com_babylonhx_materials_StandardMaterialDefines.CLIPPLANE = 9;
com_babylonhx_materials_StandardMaterialDefines.ALPHATEST = 10;
com_babylonhx_materials_StandardMaterialDefines.ALPHAFROMDIFFUSE = 11;
com_babylonhx_materials_StandardMaterialDefines.POINTSIZE = 12;
com_babylonhx_materials_StandardMaterialDefines.FOG = 13;
com_babylonhx_materials_StandardMaterialDefines.LIGHT0 = 14;
com_babylonhx_materials_StandardMaterialDefines.LIGHT1 = 15;
com_babylonhx_materials_StandardMaterialDefines.LIGHT2 = 16;
com_babylonhx_materials_StandardMaterialDefines.LIGHT3 = 17;
com_babylonhx_materials_StandardMaterialDefines.SPOTLIGHT0 = 18;
com_babylonhx_materials_StandardMaterialDefines.SPOTLIGHT1 = 19;
com_babylonhx_materials_StandardMaterialDefines.SPOTLIGHT2 = 20;
com_babylonhx_materials_StandardMaterialDefines.SPOTLIGHT3 = 21;
com_babylonhx_materials_StandardMaterialDefines.HEMILIGHT0 = 22;
com_babylonhx_materials_StandardMaterialDefines.HEMILIGHT1 = 23;
com_babylonhx_materials_StandardMaterialDefines.HEMILIGHT2 = 24;
com_babylonhx_materials_StandardMaterialDefines.HEMILIGHT3 = 25;
com_babylonhx_materials_StandardMaterialDefines.POINTLIGHT0 = 26;
com_babylonhx_materials_StandardMaterialDefines.POINTLIGHT1 = 27;
com_babylonhx_materials_StandardMaterialDefines.POINTLIGHT2 = 28;
com_babylonhx_materials_StandardMaterialDefines.POINTLIGHT3 = 29;
com_babylonhx_materials_StandardMaterialDefines.DIRLIGHT0 = 30;
com_babylonhx_materials_StandardMaterialDefines.DIRLIGHT1 = 31;
com_babylonhx_materials_StandardMaterialDefines.DIRLIGHT2 = 32;
com_babylonhx_materials_StandardMaterialDefines.DIRLIGHT3 = 33;
com_babylonhx_materials_StandardMaterialDefines.SPECULARTERM = 34;
com_babylonhx_materials_StandardMaterialDefines.SHADOW0 = 35;
com_babylonhx_materials_StandardMaterialDefines.SHADOW1 = 36;
com_babylonhx_materials_StandardMaterialDefines.SHADOW2 = 37;
com_babylonhx_materials_StandardMaterialDefines.SHADOW3 = 38;
com_babylonhx_materials_StandardMaterialDefines.SHADOWS = 39;
com_babylonhx_materials_StandardMaterialDefines.SHADOWVSM0 = 40;
com_babylonhx_materials_StandardMaterialDefines.SHADOWVSM1 = 41;
com_babylonhx_materials_StandardMaterialDefines.SHADOWVSM2 = 42;
com_babylonhx_materials_StandardMaterialDefines.SHADOWVSM3 = 43;
com_babylonhx_materials_StandardMaterialDefines.SHADOWPCF0 = 44;
com_babylonhx_materials_StandardMaterialDefines.SHADOWPCF1 = 45;
com_babylonhx_materials_StandardMaterialDefines.SHADOWPCF2 = 46;
com_babylonhx_materials_StandardMaterialDefines.SHADOWPCF3 = 47;
com_babylonhx_materials_StandardMaterialDefines.DIFFUSEFRESNEL = 48;
com_babylonhx_materials_StandardMaterialDefines.OPACITYFRESNEL = 49;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONFRESNEL = 50;
com_babylonhx_materials_StandardMaterialDefines.EMISSIVEFRESNEL = 51;
com_babylonhx_materials_StandardMaterialDefines.FRESNEL = 52;
com_babylonhx_materials_StandardMaterialDefines.NORMAL = 53;
com_babylonhx_materials_StandardMaterialDefines.UV1 = 54;
com_babylonhx_materials_StandardMaterialDefines.UV2 = 55;
com_babylonhx_materials_StandardMaterialDefines.VERTEXCOLOR = 56;
com_babylonhx_materials_StandardMaterialDefines.VERTEXALPHA = 57;
com_babylonhx_materials_StandardMaterialDefines.INSTANCES = 58;
com_babylonhx_materials_StandardMaterialDefines.GLOSSINESS = 59;
com_babylonhx_materials_StandardMaterialDefines.ROUGHNESS = 60;
com_babylonhx_materials_StandardMaterialDefines.EMISSIVEASILLUMINATION = 61;
com_babylonhx_materials_StandardMaterialDefines.LINKEMISSIVEWITHDIFFUSE = 62;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONFRESNELFROMSPECULAR = 63;
com_babylonhx_materials_StandardMaterialDefines.LIGHTMAP = 64;
com_babylonhx_materials_StandardMaterialDefines.USELIGHTMAPASSHADOWMAP = 65;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_3D = 66;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_SPHERICAL = 67;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_PLANAR = 68;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_CUBIC = 69;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_PROJECTION = 70;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_SKYBOX = 71;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_EXPLICIT = 72;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_EQUIRECTANGULAR = 73;
com_babylonhx_materials_StandardMaterialDefines.INVERTCUBICMAP = 74;
com_babylonhx_materials_StandardMaterialDefines.LOGARITHMICDEPTH = 75;
com_babylonhx_materials_textures_Texture.NEAREST_SAMPLINGMODE = 1;
com_babylonhx_materials_textures_Texture.BILINEAR_SAMPLINGMODE = 2;
com_babylonhx_materials_textures_Texture.TRILINEAR_SAMPLINGMODE = 3;
com_babylonhx_materials_textures_Texture.EXPLICIT_MODE = 0;
com_babylonhx_materials_textures_Texture.SPHERICAL_MODE = 1;
com_babylonhx_materials_textures_Texture.PLANAR_MODE = 2;
com_babylonhx_materials_textures_Texture.CUBIC_MODE = 3;
com_babylonhx_materials_textures_Texture.PROJECTION_MODE = 4;
com_babylonhx_materials_textures_Texture.SKYBOX_MODE = 5;
com_babylonhx_materials_textures_Texture.INVCUBIC_MODE = 6;
com_babylonhx_materials_textures_Texture.EQUIRECTANGULAR_MODE = 7;
com_babylonhx_materials_textures_Texture.CLAMP_ADDRESSMODE = 0;
com_babylonhx_materials_textures_Texture.WRAP_ADDRESSMODE = 1;
com_babylonhx_materials_textures_Texture.MIRROR_ADDRESSMODE = 2;
com_babylonhx_materials_textures_RenderTargetTexture.REFRESHRATE_RENDER_ONCE = 0;
com_babylonhx_materials_textures_RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYFRAME = 1;
com_babylonhx_materials_textures_RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYTWOFRAMES = 2;
com_babylonhx_math_Axis.X = new com_babylonhx_math_Vector3(1,0,0);
com_babylonhx_math_Axis.Y = new com_babylonhx_math_Vector3(0,1,0);
com_babylonhx_math_Axis.Z = new com_babylonhx_math_Vector3(0,0,1);
com_babylonhx_math_Matrix._tempQuaternion = new com_babylonhx_math_Quaternion();
com_babylonhx_math_Matrix._xAxis = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_math_Matrix._yAxis = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_math_Matrix._zAxis = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_math_Plane.transposedMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE = 0;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_X = 1;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Y = 2;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Z = 4;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_ALL = 7;
com_babylonhx_mesh_AbstractMesh.cameraGlobalPosition = new com_babylonhx_math_Vector3();
com_babylonhx_mesh_Geometry.UID_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
com_babylonhx_mesh_Mesh.FRONTSIDE = 0;
com_babylonhx_mesh_Mesh.BACKSIDE = 1;
com_babylonhx_mesh_Mesh.DOUBLESIDE = 2;
com_babylonhx_mesh_Mesh.DEFAULTSIDE = 0;
com_babylonhx_mesh_Mesh.NO_CAP = 0;
com_babylonhx_mesh_Mesh.CAP_START = 1;
com_babylonhx_mesh_Mesh.CAP_END = 2;
com_babylonhx_mesh_Mesh.CAP_ALL = 3;
com_babylonhx_mesh_VertexData.transformed = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_mesh_MeshBuilder.CreateDecal_target = new com_babylonhx_math_Vector3(0,0,1);
com_babylonhx_mesh_MeshBuilder.CreateDecal_cameraWorldTarget = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_mesh_MeshBuilder.decalWorldMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_MeshBuilder.inverseDecalWorldMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_MeshBuilder.CreateDecal_indices = [];
com_babylonhx_mesh_MeshBuilder.CreateDecal_positions = [];
com_babylonhx_mesh_MeshBuilder.CreateDecal_normals = [];
com_babylonhx_mesh_MeshBuilder.CreateDecal_meshWorldMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_MeshBuilder.CreateDecal_transformMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData = new com_babylonhx_mesh_VertexData();
com_babylonhx_mesh_VertexBuffer.PositionKind = "position";
com_babylonhx_mesh_VertexBuffer.NormalKind = "normal";
com_babylonhx_mesh_VertexBuffer.UVKind = "uv";
com_babylonhx_mesh_VertexBuffer.UV2Kind = "uv2";
com_babylonhx_mesh_VertexBuffer.UV3Kind = "uv3";
com_babylonhx_mesh_VertexBuffer.UV4Kind = "uv4";
com_babylonhx_mesh_VertexBuffer.UV5Kind = "uv5";
com_babylonhx_mesh_VertexBuffer.UV6Kind = "uv6";
com_babylonhx_mesh_VertexBuffer.ColorKind = "color";
com_babylonhx_mesh_VertexBuffer.MatricesIndicesKind = "matricesIndices";
com_babylonhx_mesh_VertexBuffer.MatricesWeightsKind = "matricesWeights";
com_babylonhx_mesh_VertexBuffer.MatricesIndicesExtraKind = "matricesIndicesExtra";
com_babylonhx_mesh_VertexBuffer.MatricesWeightsExtraKind = "matricesWeightsExtra";
com_babylonhx_mesh_VertexBuffer.count = 0;
com_babylonhx_mesh_simplification_SimplificationSettings.QUADRATIC = 0;
com_babylonhx_particles_ParticleSystem.BLENDMODE_ONEONE = 0;
com_babylonhx_particles_ParticleSystem.BLENDMODE_STANDARD = 1;
com_babylonhx_physics_PhysicsEngine.NoImpostor = 0;
com_babylonhx_physics_PhysicsEngine.SphereImpostor = 1;
com_babylonhx_physics_PhysicsEngine.BoxImpostor = 2;
com_babylonhx_physics_PhysicsEngine.PlaneImpostor = 3;
com_babylonhx_physics_PhysicsEngine.MeshImpostor = 4;
com_babylonhx_physics_PhysicsEngine.CapsuleImpostor = 5;
com_babylonhx_physics_PhysicsEngine.ConeImpostor = 6;
com_babylonhx_physics_PhysicsEngine.CylinderImpostor = 7;
com_babylonhx_physics_PhysicsEngine.ConvexHullImpostor = 8;
com_babylonhx_physics_PhysicsEngine.Epsilon = 0.001;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.PASS_EFFECT_NAME = "passEffect";
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.PASS_SAMPLER_NAME = "passSampler";
com_babylonhx_rendering_RenderingManager.MAX_RENDERINGGROUPS = 4;
com_babylonhx_tools_SmartArray._GlobalId = 0;
com_babylonhx_tools_Tools.BaseUrl = "";
com_babylonhx_tools_Tools.__startTime = haxe_Timer.stamp();
com_babylonhx_utils_Scancodes.MASK = 1073741824;
com_babylonhx_utils_Scancodes.unknown = 0;
com_babylonhx_utils_Scancodes.key_a = 4;
com_babylonhx_utils_Scancodes.key_b = 5;
com_babylonhx_utils_Scancodes.key_c = 6;
com_babylonhx_utils_Scancodes.key_d = 7;
com_babylonhx_utils_Scancodes.key_e = 8;
com_babylonhx_utils_Scancodes.key_f = 9;
com_babylonhx_utils_Scancodes.key_g = 10;
com_babylonhx_utils_Scancodes.key_h = 11;
com_babylonhx_utils_Scancodes.key_i = 12;
com_babylonhx_utils_Scancodes.key_j = 13;
com_babylonhx_utils_Scancodes.key_k = 14;
com_babylonhx_utils_Scancodes.key_l = 15;
com_babylonhx_utils_Scancodes.key_m = 16;
com_babylonhx_utils_Scancodes.key_n = 17;
com_babylonhx_utils_Scancodes.key_o = 18;
com_babylonhx_utils_Scancodes.key_p = 19;
com_babylonhx_utils_Scancodes.key_q = 20;
com_babylonhx_utils_Scancodes.key_r = 21;
com_babylonhx_utils_Scancodes.key_s = 22;
com_babylonhx_utils_Scancodes.key_t = 23;
com_babylonhx_utils_Scancodes.key_u = 24;
com_babylonhx_utils_Scancodes.key_v = 25;
com_babylonhx_utils_Scancodes.key_w = 26;
com_babylonhx_utils_Scancodes.key_x = 27;
com_babylonhx_utils_Scancodes.key_y = 28;
com_babylonhx_utils_Scancodes.key_z = 29;
com_babylonhx_utils_Scancodes.key_1 = 30;
com_babylonhx_utils_Scancodes.key_2 = 31;
com_babylonhx_utils_Scancodes.key_3 = 32;
com_babylonhx_utils_Scancodes.key_4 = 33;
com_babylonhx_utils_Scancodes.key_5 = 34;
com_babylonhx_utils_Scancodes.key_6 = 35;
com_babylonhx_utils_Scancodes.key_7 = 36;
com_babylonhx_utils_Scancodes.key_8 = 37;
com_babylonhx_utils_Scancodes.key_9 = 38;
com_babylonhx_utils_Scancodes.key_0 = 39;
com_babylonhx_utils_Scancodes.enter = 40;
com_babylonhx_utils_Scancodes.escape = 41;
com_babylonhx_utils_Scancodes.backspace = 42;
com_babylonhx_utils_Scancodes.tab = 43;
com_babylonhx_utils_Scancodes.space = 44;
com_babylonhx_utils_Scancodes.minus = 45;
com_babylonhx_utils_Scancodes.equals = 46;
com_babylonhx_utils_Scancodes.leftbracket = 47;
com_babylonhx_utils_Scancodes.rightbracket = 48;
com_babylonhx_utils_Scancodes.backslash = 49;
com_babylonhx_utils_Scancodes.nonushash = 50;
com_babylonhx_utils_Scancodes.semicolon = 51;
com_babylonhx_utils_Scancodes.apostrophe = 52;
com_babylonhx_utils_Scancodes.grave = 53;
com_babylonhx_utils_Scancodes.comma = 54;
com_babylonhx_utils_Scancodes.period = 55;
com_babylonhx_utils_Scancodes.slash = 56;
com_babylonhx_utils_Scancodes.capslock = 57;
com_babylonhx_utils_Scancodes.f1 = 58;
com_babylonhx_utils_Scancodes.f2 = 59;
com_babylonhx_utils_Scancodes.f3 = 60;
com_babylonhx_utils_Scancodes.f4 = 61;
com_babylonhx_utils_Scancodes.f5 = 62;
com_babylonhx_utils_Scancodes.f6 = 63;
com_babylonhx_utils_Scancodes.f7 = 64;
com_babylonhx_utils_Scancodes.f8 = 65;
com_babylonhx_utils_Scancodes.f9 = 66;
com_babylonhx_utils_Scancodes.f10 = 67;
com_babylonhx_utils_Scancodes.f11 = 68;
com_babylonhx_utils_Scancodes.f12 = 69;
com_babylonhx_utils_Scancodes.printscreen = 70;
com_babylonhx_utils_Scancodes.scrolllock = 71;
com_babylonhx_utils_Scancodes.pause = 72;
com_babylonhx_utils_Scancodes.insert = 73;
com_babylonhx_utils_Scancodes.home = 74;
com_babylonhx_utils_Scancodes.pageup = 75;
com_babylonhx_utils_Scancodes["delete"] = 76;
com_babylonhx_utils_Scancodes.end = 77;
com_babylonhx_utils_Scancodes.pagedown = 78;
com_babylonhx_utils_Scancodes.right = 79;
com_babylonhx_utils_Scancodes.left = 80;
com_babylonhx_utils_Scancodes.down = 81;
com_babylonhx_utils_Scancodes.up = 82;
com_babylonhx_utils_Scancodes.numlockclear = 83;
com_babylonhx_utils_Scancodes.kp_divide = 84;
com_babylonhx_utils_Scancodes.kp_multiply = 85;
com_babylonhx_utils_Scancodes.kp_minus = 86;
com_babylonhx_utils_Scancodes.kp_plus = 87;
com_babylonhx_utils_Scancodes.kp_enter = 88;
com_babylonhx_utils_Scancodes.kp_1 = 89;
com_babylonhx_utils_Scancodes.kp_2 = 90;
com_babylonhx_utils_Scancodes.kp_3 = 91;
com_babylonhx_utils_Scancodes.kp_4 = 92;
com_babylonhx_utils_Scancodes.kp_5 = 93;
com_babylonhx_utils_Scancodes.kp_6 = 94;
com_babylonhx_utils_Scancodes.kp_7 = 95;
com_babylonhx_utils_Scancodes.kp_8 = 96;
com_babylonhx_utils_Scancodes.kp_9 = 97;
com_babylonhx_utils_Scancodes.kp_0 = 98;
com_babylonhx_utils_Scancodes.kp_period = 99;
com_babylonhx_utils_Scancodes.nonusbackslash = 100;
com_babylonhx_utils_Scancodes.application = 101;
com_babylonhx_utils_Scancodes.power = 102;
com_babylonhx_utils_Scancodes.kp_equals = 103;
com_babylonhx_utils_Scancodes.f13 = 104;
com_babylonhx_utils_Scancodes.f14 = 105;
com_babylonhx_utils_Scancodes.f15 = 106;
com_babylonhx_utils_Scancodes.f16 = 107;
com_babylonhx_utils_Scancodes.f17 = 108;
com_babylonhx_utils_Scancodes.f18 = 109;
com_babylonhx_utils_Scancodes.f19 = 110;
com_babylonhx_utils_Scancodes.f20 = 111;
com_babylonhx_utils_Scancodes.f21 = 112;
com_babylonhx_utils_Scancodes.f22 = 113;
com_babylonhx_utils_Scancodes.f23 = 114;
com_babylonhx_utils_Scancodes.f24 = 115;
com_babylonhx_utils_Scancodes.execute = 116;
com_babylonhx_utils_Scancodes.help = 117;
com_babylonhx_utils_Scancodes.menu = 118;
com_babylonhx_utils_Scancodes.select = 119;
com_babylonhx_utils_Scancodes.stop = 120;
com_babylonhx_utils_Scancodes.again = 121;
com_babylonhx_utils_Scancodes.undo = 122;
com_babylonhx_utils_Scancodes.cut = 123;
com_babylonhx_utils_Scancodes.copy = 124;
com_babylonhx_utils_Scancodes.paste = 125;
com_babylonhx_utils_Scancodes.find = 126;
com_babylonhx_utils_Scancodes.mute = 127;
com_babylonhx_utils_Scancodes.volumeup = 128;
com_babylonhx_utils_Scancodes.volumedown = 129;
com_babylonhx_utils_Scancodes.kp_comma = 133;
com_babylonhx_utils_Scancodes.kp_equalsas400 = 134;
com_babylonhx_utils_Scancodes.international1 = 135;
com_babylonhx_utils_Scancodes.international2 = 136;
com_babylonhx_utils_Scancodes.international3 = 137;
com_babylonhx_utils_Scancodes.international4 = 138;
com_babylonhx_utils_Scancodes.international5 = 139;
com_babylonhx_utils_Scancodes.international6 = 140;
com_babylonhx_utils_Scancodes.international7 = 141;
com_babylonhx_utils_Scancodes.international8 = 142;
com_babylonhx_utils_Scancodes.international9 = 143;
com_babylonhx_utils_Scancodes.lang1 = 144;
com_babylonhx_utils_Scancodes.lang2 = 145;
com_babylonhx_utils_Scancodes.lang3 = 146;
com_babylonhx_utils_Scancodes.lang4 = 147;
com_babylonhx_utils_Scancodes.lang5 = 148;
com_babylonhx_utils_Scancodes.lang6 = 149;
com_babylonhx_utils_Scancodes.lang7 = 150;
com_babylonhx_utils_Scancodes.lang8 = 151;
com_babylonhx_utils_Scancodes.lang9 = 152;
com_babylonhx_utils_Scancodes.alterase = 153;
com_babylonhx_utils_Scancodes.sysreq = 154;
com_babylonhx_utils_Scancodes.cancel = 155;
com_babylonhx_utils_Scancodes.clear = 156;
com_babylonhx_utils_Scancodes.prior = 157;
com_babylonhx_utils_Scancodes.return2 = 158;
com_babylonhx_utils_Scancodes.separator = 159;
com_babylonhx_utils_Scancodes.out = 160;
com_babylonhx_utils_Scancodes.oper = 161;
com_babylonhx_utils_Scancodes.clearagain = 162;
com_babylonhx_utils_Scancodes.crsel = 163;
com_babylonhx_utils_Scancodes.exsel = 164;
com_babylonhx_utils_Scancodes.kp_00 = 176;
com_babylonhx_utils_Scancodes.kp_000 = 177;
com_babylonhx_utils_Scancodes.thousandsseparator = 178;
com_babylonhx_utils_Scancodes.decimalseparator = 179;
com_babylonhx_utils_Scancodes.currencyunit = 180;
com_babylonhx_utils_Scancodes.currencysubunit = 181;
com_babylonhx_utils_Scancodes.kp_leftparen = 182;
com_babylonhx_utils_Scancodes.kp_rightparen = 183;
com_babylonhx_utils_Scancodes.kp_leftbrace = 184;
com_babylonhx_utils_Scancodes.kp_rightbrace = 185;
com_babylonhx_utils_Scancodes.kp_tab = 186;
com_babylonhx_utils_Scancodes.kp_backspace = 187;
com_babylonhx_utils_Scancodes.kp_a = 188;
com_babylonhx_utils_Scancodes.kp_b = 189;
com_babylonhx_utils_Scancodes.kp_c = 190;
com_babylonhx_utils_Scancodes.kp_d = 191;
com_babylonhx_utils_Scancodes.kp_e = 192;
com_babylonhx_utils_Scancodes.kp_f = 193;
com_babylonhx_utils_Scancodes.kp_xor = 194;
com_babylonhx_utils_Scancodes.kp_power = 195;
com_babylonhx_utils_Scancodes.kp_percent = 196;
com_babylonhx_utils_Scancodes.kp_less = 197;
com_babylonhx_utils_Scancodes.kp_greater = 198;
com_babylonhx_utils_Scancodes.kp_ampersand = 199;
com_babylonhx_utils_Scancodes.kp_dblampersand = 200;
com_babylonhx_utils_Scancodes.kp_verticalbar = 201;
com_babylonhx_utils_Scancodes.kp_dblverticalbar = 202;
com_babylonhx_utils_Scancodes.kp_colon = 203;
com_babylonhx_utils_Scancodes.kp_hash = 204;
com_babylonhx_utils_Scancodes.kp_space = 205;
com_babylonhx_utils_Scancodes.kp_at = 206;
com_babylonhx_utils_Scancodes.kp_exclam = 207;
com_babylonhx_utils_Scancodes.kp_memstore = 208;
com_babylonhx_utils_Scancodes.kp_memrecall = 209;
com_babylonhx_utils_Scancodes.kp_memclear = 210;
com_babylonhx_utils_Scancodes.kp_memadd = 211;
com_babylonhx_utils_Scancodes.kp_memsubtract = 212;
com_babylonhx_utils_Scancodes.kp_memmultiply = 213;
com_babylonhx_utils_Scancodes.kp_memdivide = 214;
com_babylonhx_utils_Scancodes.kp_plusminus = 215;
com_babylonhx_utils_Scancodes.kp_clear = 216;
com_babylonhx_utils_Scancodes.kp_clearentry = 217;
com_babylonhx_utils_Scancodes.kp_binary = 218;
com_babylonhx_utils_Scancodes.kp_octal = 219;
com_babylonhx_utils_Scancodes.kp_decimal = 220;
com_babylonhx_utils_Scancodes.kp_hexadecimal = 221;
com_babylonhx_utils_Scancodes.lctrl = 224;
com_babylonhx_utils_Scancodes.lshift = 225;
com_babylonhx_utils_Scancodes.lalt = 226;
com_babylonhx_utils_Scancodes.lmeta = 227;
com_babylonhx_utils_Scancodes.rctrl = 228;
com_babylonhx_utils_Scancodes.rshift = 229;
com_babylonhx_utils_Scancodes.ralt = 230;
com_babylonhx_utils_Scancodes.rmeta = 231;
com_babylonhx_utils_Scancodes.mode = 257;
com_babylonhx_utils_Scancodes.audionext = 258;
com_babylonhx_utils_Scancodes.audioprev = 259;
com_babylonhx_utils_Scancodes.audiostop = 260;
com_babylonhx_utils_Scancodes.audioplay = 261;
com_babylonhx_utils_Scancodes.audiomute = 262;
com_babylonhx_utils_Scancodes.mediaselect = 263;
com_babylonhx_utils_Scancodes.www = 264;
com_babylonhx_utils_Scancodes.mail = 265;
com_babylonhx_utils_Scancodes.calculator = 266;
com_babylonhx_utils_Scancodes.computer = 267;
com_babylonhx_utils_Scancodes.ac_search = 268;
com_babylonhx_utils_Scancodes.ac_home = 269;
com_babylonhx_utils_Scancodes.ac_back = 270;
com_babylonhx_utils_Scancodes.ac_forward = 271;
com_babylonhx_utils_Scancodes.ac_stop = 272;
com_babylonhx_utils_Scancodes.ac_refresh = 273;
com_babylonhx_utils_Scancodes.ac_bookmarks = 274;
com_babylonhx_utils_Scancodes.brightnessdown = 275;
com_babylonhx_utils_Scancodes.brightnessup = 276;
com_babylonhx_utils_Scancodes.displayswitch = 277;
com_babylonhx_utils_Scancodes.kbdillumtoggle = 278;
com_babylonhx_utils_Scancodes.kbdillumdown = 279;
com_babylonhx_utils_Scancodes.kbdillumup = 280;
com_babylonhx_utils_Scancodes.eject = 281;
com_babylonhx_utils_Scancodes.sleep = 282;
com_babylonhx_utils_Scancodes.app1 = 283;
com_babylonhx_utils_Scancodes.app2 = 284;
com_babylonhx_utils_Scancodes.scancode_names = [null,null,null,null,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","Enter","Escape","Backspace","Tab","Space","-","=","[","]","\\","#",";","'","`",",",".","/","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PrintScreen","ScrollLock","Pause","Insert","Home","PageUp","Delete","End","PageDown","Right","Left","Down","Up","Numlock","Keypad /","Keypad *","Keypad -","Keypad +","Keypad Enter","Keypad 1","Keypad 2","Keypad 3","Keypad 4","Keypad 5","Keypad 6","Keypad 7","Keypad 8","Keypad 9","Keypad 0","Keypad .",null,"Application","Power","Keypad =","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Execute","Help","Menu","Select","Stop","Again","Undo","Cut","Copy","Paste","Find","Mute","VolumeUp","VolumeDown",null,null,null,"Keypad ,","Keypad = (AS400)",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"AltErase","SysReq","Cancel","Clear","Prior","Enter","Separator","Out","Oper","Clear / Again","CrSel","ExSel",null,null,null,null,null,null,null,null,null,null,null,"Keypad 00","Keypad 000","ThousandsSeparator","DecimalSeparator","CurrencyUnit","CurrencySubUnit","Keypad (","Keypad )","Keypad {","Keypad }","Keypad Tab","Keypad Backspace","Keypad A","Keypad B","Keypad C","Keypad D","Keypad E","Keypad F","Keypad XOR","Keypad ^","Keypad %","Keypad <","Keypad >","Keypad &","Keypad &&","Keypad |","Keypad ||","Keypad :","Keypad #","Keypad Space","Keypad @","Keypad !","Keypad MemStore","Keypad MemRecall","Keypad MemClear","Keypad MemAdd","Keypad MemSubtract","Keypad MemMultiply","Keypad MemDivide","Keypad +/-","Keypad Clear","Keypad ClearEntry","Keypad Binary","Keypad Octal","Keypad Decimal","Keypad Hexadecimal",null,null,"Left Ctrl","Left Shift","Left Alt","Left Meta","Right Ctrl","Right Shift","Right Alt","Right Meta",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ModeSwitch","AudioNext","AudioPrev","AudioStop","AudioPlay","AudioMute","MediaSelect","WWW","Mail","Calculator","Computer","AC Search","AC Home","AC Back","AC Forward","AC Stop","AC Refresh","AC Bookmarks","BrightnessDown","BrightnessUp","DisplaySwitch","KBDIllumToggle","KBDIllumDown","KBDIllumUp","Eject","Sleep"];
com_babylonhx_utils_Keycodes.unknown = 0;
com_babylonhx_utils_Keycodes.enter = 13;
com_babylonhx_utils_Keycodes.escape = 27;
com_babylonhx_utils_Keycodes.backspace = 8;
com_babylonhx_utils_Keycodes.tab = 9;
com_babylonhx_utils_Keycodes.space = 32;
com_babylonhx_utils_Keycodes.exclaim = 33;
com_babylonhx_utils_Keycodes.quotedbl = 34;
com_babylonhx_utils_Keycodes.hash = 35;
com_babylonhx_utils_Keycodes.percent = 37;
com_babylonhx_utils_Keycodes.dollar = 36;
com_babylonhx_utils_Keycodes.ampersand = 38;
com_babylonhx_utils_Keycodes.quote = 39;
com_babylonhx_utils_Keycodes.leftparen = 40;
com_babylonhx_utils_Keycodes.rightparen = 41;
com_babylonhx_utils_Keycodes.asterisk = 42;
com_babylonhx_utils_Keycodes.plus = 43;
com_babylonhx_utils_Keycodes.comma = 44;
com_babylonhx_utils_Keycodes.minus = 45;
com_babylonhx_utils_Keycodes.period = 46;
com_babylonhx_utils_Keycodes.slash = 47;
com_babylonhx_utils_Keycodes.key_0 = 48;
com_babylonhx_utils_Keycodes.key_1 = 49;
com_babylonhx_utils_Keycodes.key_2 = 50;
com_babylonhx_utils_Keycodes.key_3 = 51;
com_babylonhx_utils_Keycodes.key_4 = 52;
com_babylonhx_utils_Keycodes.key_5 = 53;
com_babylonhx_utils_Keycodes.key_6 = 54;
com_babylonhx_utils_Keycodes.key_7 = 55;
com_babylonhx_utils_Keycodes.key_8 = 56;
com_babylonhx_utils_Keycodes.key_9 = 57;
com_babylonhx_utils_Keycodes.colon = 58;
com_babylonhx_utils_Keycodes.semicolon = 59;
com_babylonhx_utils_Keycodes.less = 60;
com_babylonhx_utils_Keycodes.equals = 61;
com_babylonhx_utils_Keycodes.greater = 62;
com_babylonhx_utils_Keycodes.question = 63;
com_babylonhx_utils_Keycodes.at = 64;
com_babylonhx_utils_Keycodes.leftbracket = 91;
com_babylonhx_utils_Keycodes.backslash = 92;
com_babylonhx_utils_Keycodes.rightbracket = 93;
com_babylonhx_utils_Keycodes.caret = 94;
com_babylonhx_utils_Keycodes.underscore = 95;
com_babylonhx_utils_Keycodes.backquote = 96;
com_babylonhx_utils_Keycodes.key_a = 97;
com_babylonhx_utils_Keycodes.key_b = 98;
com_babylonhx_utils_Keycodes.key_c = 99;
com_babylonhx_utils_Keycodes.key_d = 100;
com_babylonhx_utils_Keycodes.key_e = 101;
com_babylonhx_utils_Keycodes.key_f = 102;
com_babylonhx_utils_Keycodes.key_g = 103;
com_babylonhx_utils_Keycodes.key_h = 104;
com_babylonhx_utils_Keycodes.key_i = 105;
com_babylonhx_utils_Keycodes.key_j = 106;
com_babylonhx_utils_Keycodes.key_k = 107;
com_babylonhx_utils_Keycodes.key_l = 108;
com_babylonhx_utils_Keycodes.key_m = 109;
com_babylonhx_utils_Keycodes.key_n = 110;
com_babylonhx_utils_Keycodes.key_o = 111;
com_babylonhx_utils_Keycodes.key_p = 112;
com_babylonhx_utils_Keycodes.key_q = 113;
com_babylonhx_utils_Keycodes.key_r = 114;
com_babylonhx_utils_Keycodes.key_s = 115;
com_babylonhx_utils_Keycodes.key_t = 116;
com_babylonhx_utils_Keycodes.key_u = 117;
com_babylonhx_utils_Keycodes.key_v = 118;
com_babylonhx_utils_Keycodes.key_w = 119;
com_babylonhx_utils_Keycodes.key_x = 120;
com_babylonhx_utils_Keycodes.key_y = 121;
com_babylonhx_utils_Keycodes.key_z = 122;
com_babylonhx_utils_Keycodes.capslock = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.capslock);
com_babylonhx_utils_Keycodes.f1 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f1);
com_babylonhx_utils_Keycodes.f2 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f2);
com_babylonhx_utils_Keycodes.f3 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f3);
com_babylonhx_utils_Keycodes.f4 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f4);
com_babylonhx_utils_Keycodes.f5 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f5);
com_babylonhx_utils_Keycodes.f6 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f6);
com_babylonhx_utils_Keycodes.f7 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f7);
com_babylonhx_utils_Keycodes.f8 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f8);
com_babylonhx_utils_Keycodes.f9 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f9);
com_babylonhx_utils_Keycodes.f10 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f10);
com_babylonhx_utils_Keycodes.f11 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f11);
com_babylonhx_utils_Keycodes.f12 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f12);
com_babylonhx_utils_Keycodes.printscreen = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.printscreen);
com_babylonhx_utils_Keycodes.scrolllock = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.scrolllock);
com_babylonhx_utils_Keycodes.pause = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.pause);
com_babylonhx_utils_Keycodes.insert = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.insert);
com_babylonhx_utils_Keycodes.home = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.home);
com_babylonhx_utils_Keycodes.pageup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.pageup);
com_babylonhx_utils_Keycodes["delete"] = 127;
com_babylonhx_utils_Keycodes.end = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.end);
com_babylonhx_utils_Keycodes.pagedown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.pagedown);
com_babylonhx_utils_Keycodes.right = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.right);
com_babylonhx_utils_Keycodes.left = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.left);
com_babylonhx_utils_Keycodes.down = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.down);
com_babylonhx_utils_Keycodes.up = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.up);
com_babylonhx_utils_Keycodes.numlockclear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.numlockclear);
com_babylonhx_utils_Keycodes.kp_divide = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_divide);
com_babylonhx_utils_Keycodes.kp_multiply = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_multiply);
com_babylonhx_utils_Keycodes.kp_minus = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_minus);
com_babylonhx_utils_Keycodes.kp_plus = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_plus);
com_babylonhx_utils_Keycodes.kp_enter = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_enter);
com_babylonhx_utils_Keycodes.kp_1 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_1);
com_babylonhx_utils_Keycodes.kp_2 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_2);
com_babylonhx_utils_Keycodes.kp_3 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_3);
com_babylonhx_utils_Keycodes.kp_4 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_4);
com_babylonhx_utils_Keycodes.kp_5 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_5);
com_babylonhx_utils_Keycodes.kp_6 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_6);
com_babylonhx_utils_Keycodes.kp_7 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_7);
com_babylonhx_utils_Keycodes.kp_8 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_8);
com_babylonhx_utils_Keycodes.kp_9 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_9);
com_babylonhx_utils_Keycodes.kp_0 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_0);
com_babylonhx_utils_Keycodes.kp_period = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_period);
com_babylonhx_utils_Keycodes.application = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.application);
com_babylonhx_utils_Keycodes.power = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.power);
com_babylonhx_utils_Keycodes.kp_equals = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_equals);
com_babylonhx_utils_Keycodes.f13 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f13);
com_babylonhx_utils_Keycodes.f14 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f14);
com_babylonhx_utils_Keycodes.f15 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f15);
com_babylonhx_utils_Keycodes.f16 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f16);
com_babylonhx_utils_Keycodes.f17 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f17);
com_babylonhx_utils_Keycodes.f18 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f18);
com_babylonhx_utils_Keycodes.f19 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f19);
com_babylonhx_utils_Keycodes.f20 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f20);
com_babylonhx_utils_Keycodes.f21 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f21);
com_babylonhx_utils_Keycodes.f22 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f22);
com_babylonhx_utils_Keycodes.f23 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f23);
com_babylonhx_utils_Keycodes.f24 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f24);
com_babylonhx_utils_Keycodes.execute = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.execute);
com_babylonhx_utils_Keycodes.help = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.help);
com_babylonhx_utils_Keycodes.menu = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.menu);
com_babylonhx_utils_Keycodes.select = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.select);
com_babylonhx_utils_Keycodes.stop = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.stop);
com_babylonhx_utils_Keycodes.again = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.again);
com_babylonhx_utils_Keycodes.undo = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.undo);
com_babylonhx_utils_Keycodes.cut = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.cut);
com_babylonhx_utils_Keycodes.copy = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.copy);
com_babylonhx_utils_Keycodes.paste = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.paste);
com_babylonhx_utils_Keycodes.find = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.find);
com_babylonhx_utils_Keycodes.mute = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mute);
com_babylonhx_utils_Keycodes.volumeup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.volumeup);
com_babylonhx_utils_Keycodes.volumedown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.volumedown);
com_babylonhx_utils_Keycodes.kp_comma = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_comma);
com_babylonhx_utils_Keycodes.kp_equalsas400 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_equalsas400);
com_babylonhx_utils_Keycodes.alterase = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.alterase);
com_babylonhx_utils_Keycodes.sysreq = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.sysreq);
com_babylonhx_utils_Keycodes.cancel = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.cancel);
com_babylonhx_utils_Keycodes.clear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.clear);
com_babylonhx_utils_Keycodes.prior = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.prior);
com_babylonhx_utils_Keycodes.return2 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.return2);
com_babylonhx_utils_Keycodes.separator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.separator);
com_babylonhx_utils_Keycodes.out = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.out);
com_babylonhx_utils_Keycodes.oper = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.oper);
com_babylonhx_utils_Keycodes.clearagain = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.clearagain);
com_babylonhx_utils_Keycodes.crsel = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.crsel);
com_babylonhx_utils_Keycodes.exsel = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.exsel);
com_babylonhx_utils_Keycodes.kp_00 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_00);
com_babylonhx_utils_Keycodes.kp_000 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_000);
com_babylonhx_utils_Keycodes.thousandsseparator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.thousandsseparator);
com_babylonhx_utils_Keycodes.decimalseparator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.decimalseparator);
com_babylonhx_utils_Keycodes.currencyunit = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.currencyunit);
com_babylonhx_utils_Keycodes.currencysubunit = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.currencysubunit);
com_babylonhx_utils_Keycodes.kp_leftparen = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_leftparen);
com_babylonhx_utils_Keycodes.kp_rightparen = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_rightparen);
com_babylonhx_utils_Keycodes.kp_leftbrace = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_leftbrace);
com_babylonhx_utils_Keycodes.kp_rightbrace = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_rightbrace);
com_babylonhx_utils_Keycodes.kp_tab = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_tab);
com_babylonhx_utils_Keycodes.kp_backspace = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_backspace);
com_babylonhx_utils_Keycodes.kp_a = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_a);
com_babylonhx_utils_Keycodes.kp_b = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_b);
com_babylonhx_utils_Keycodes.kp_c = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_c);
com_babylonhx_utils_Keycodes.kp_d = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_d);
com_babylonhx_utils_Keycodes.kp_e = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_e);
com_babylonhx_utils_Keycodes.kp_f = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_f);
com_babylonhx_utils_Keycodes.kp_xor = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_xor);
com_babylonhx_utils_Keycodes.kp_power = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_power);
com_babylonhx_utils_Keycodes.kp_percent = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_percent);
com_babylonhx_utils_Keycodes.kp_less = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_less);
com_babylonhx_utils_Keycodes.kp_greater = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_greater);
com_babylonhx_utils_Keycodes.kp_ampersand = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_ampersand);
com_babylonhx_utils_Keycodes.kp_dblampersand = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_dblampersand);
com_babylonhx_utils_Keycodes.kp_verticalbar = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_verticalbar);
com_babylonhx_utils_Keycodes.kp_dblverticalbar = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_dblverticalbar);
com_babylonhx_utils_Keycodes.kp_colon = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_colon);
com_babylonhx_utils_Keycodes.kp_hash = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_hash);
com_babylonhx_utils_Keycodes.kp_space = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_space);
com_babylonhx_utils_Keycodes.kp_at = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_at);
com_babylonhx_utils_Keycodes.kp_exclam = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_exclam);
com_babylonhx_utils_Keycodes.kp_memstore = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memstore);
com_babylonhx_utils_Keycodes.kp_memrecall = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memrecall);
com_babylonhx_utils_Keycodes.kp_memclear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memclear);
com_babylonhx_utils_Keycodes.kp_memadd = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memadd);
com_babylonhx_utils_Keycodes.kp_memsubtract = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memsubtract);
com_babylonhx_utils_Keycodes.kp_memmultiply = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memmultiply);
com_babylonhx_utils_Keycodes.kp_memdivide = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memdivide);
com_babylonhx_utils_Keycodes.kp_plusminus = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_plusminus);
com_babylonhx_utils_Keycodes.kp_clear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_clear);
com_babylonhx_utils_Keycodes.kp_clearentry = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_clearentry);
com_babylonhx_utils_Keycodes.kp_binary = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_binary);
com_babylonhx_utils_Keycodes.kp_octal = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_octal);
com_babylonhx_utils_Keycodes.kp_decimal = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_decimal);
com_babylonhx_utils_Keycodes.kp_hexadecimal = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_hexadecimal);
com_babylonhx_utils_Keycodes.lctrl = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lctrl);
com_babylonhx_utils_Keycodes.lshift = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lshift);
com_babylonhx_utils_Keycodes.lalt = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lalt);
com_babylonhx_utils_Keycodes.lmeta = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lmeta);
com_babylonhx_utils_Keycodes.rctrl = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.rctrl);
com_babylonhx_utils_Keycodes.rshift = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.rshift);
com_babylonhx_utils_Keycodes.ralt = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ralt);
com_babylonhx_utils_Keycodes.rmeta = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.rmeta);
com_babylonhx_utils_Keycodes.mode = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mode);
com_babylonhx_utils_Keycodes.audionext = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audionext);
com_babylonhx_utils_Keycodes.audioprev = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audioprev);
com_babylonhx_utils_Keycodes.audiostop = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audiostop);
com_babylonhx_utils_Keycodes.audioplay = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audioplay);
com_babylonhx_utils_Keycodes.audiomute = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audiomute);
com_babylonhx_utils_Keycodes.mediaselect = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mediaselect);
com_babylonhx_utils_Keycodes.www = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.www);
com_babylonhx_utils_Keycodes.mail = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mail);
com_babylonhx_utils_Keycodes.calculator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.calculator);
com_babylonhx_utils_Keycodes.computer = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.computer);
com_babylonhx_utils_Keycodes.ac_search = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_search);
com_babylonhx_utils_Keycodes.ac_home = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_home);
com_babylonhx_utils_Keycodes.ac_back = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_back);
com_babylonhx_utils_Keycodes.ac_forward = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_forward);
com_babylonhx_utils_Keycodes.ac_stop = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_stop);
com_babylonhx_utils_Keycodes.ac_refresh = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_refresh);
com_babylonhx_utils_Keycodes.ac_bookmarks = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_bookmarks);
com_babylonhx_utils_Keycodes.brightnessdown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.brightnessdown);
com_babylonhx_utils_Keycodes.brightnessup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.brightnessup);
com_babylonhx_utils_Keycodes.displayswitch = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.displayswitch);
com_babylonhx_utils_Keycodes.kbdillumtoggle = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kbdillumtoggle);
com_babylonhx_utils_Keycodes.kbdillumdown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kbdillumdown);
com_babylonhx_utils_Keycodes.kbdillumup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kbdillumup);
com_babylonhx_utils_Keycodes.eject = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.eject);
com_babylonhx_utils_Keycodes.sleep = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.sleep);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.onChange = new lime_app_Event_$Void_$Void();
lime_Assets.initialized = false;
lime__$backend_html5_HTML5Window.windowID = 0;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.BGR_EXT = 32992;
lime_graphics_opengl_GL.BGRA_EXT = 32993;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_system_CFFI.lime_cffi_set_finalizer = lime_system_CFFI.load("lime","lime_cffi_set_finalizer",1,false);
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app_Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app_Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui_Touch.onEnd = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_utils_ByteArray.cffi_lime_bytes_from_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_from_data_pointer",2,false);
	$r = inValue;
	return $r;
}(this));
lime_utils_ByteArray.cffi_lime_bytes_get_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_get_data_pointer",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils_ByteArray.cffi_lime_bytes_read_file = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_read_file",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
